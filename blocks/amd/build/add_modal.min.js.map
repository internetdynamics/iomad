{"version":3,"file":"add_modal.min.js","sources":["../src/add_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Show an add block modal instead of doing it on a separate page.\r\n *\r\n * @module     core_block/add_modal\r\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport ModalFactory from 'core/modal_factory';\r\nimport Templates from 'core/templates';\r\nimport {get_string as getString} from 'core/str';\r\nimport Ajax from 'core/ajax';\r\nimport ModalForm from \"core_form/modalform\";\r\n\r\nconst SELECTORS = {\r\n    ADD_BLOCK: '[data-key=\"addblock\"]',\r\n    SHOW_BLOCK_FORM: '[data-action=\"showaddblockform\"][data-blockname][data-blockform]'\r\n};\r\n\r\n// Ensure we only add our listeners once.\r\nlet listenerEventsRegistered = false;\r\n\r\n/**\r\n * Register related event listeners.\r\n *\r\n * @method registerListenerEvents\r\n * @param {String|null} addBlockUrl The add block URL\r\n * @param {String} pagehash\r\n */\r\nconst registerListenerEvents = (addBlockUrl, pagehash) => {\r\n    let addBlockModal = null;\r\n    document.addEventListener('click', e => {\r\n\r\n        const showAddBlockForm = e.target.closest(SELECTORS.SHOW_BLOCK_FORM);\r\n        if (showAddBlockForm) {\r\n            e.preventDefault();\r\n\r\n            const modalForm = new ModalForm({\r\n                modalConfig: {\r\n                    title: getString('addblock', 'core_block',\r\n                        showAddBlockForm.getAttribute('data-blocktitle')),\r\n                },\r\n                args: {blockname: showAddBlockForm.getAttribute('data-blockname'), pagehash,\r\n                    blockregion: showAddBlockForm.getAttribute('data-blockregion')},\r\n                formClass: showAddBlockForm.getAttribute('data-blockform'),\r\n                returnFocus: showAddBlockForm,\r\n            });\r\n\r\n            modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\r\n                addBlockModal.destroy();\r\n                window.location.reload();\r\n            });\r\n\r\n            modalForm.show();\r\n        }\r\n\r\n        const addBlock = e.target.closest(SELECTORS.ADD_BLOCK);\r\n        if (addBlock) {\r\n            e.preventDefault();\r\n\r\n            let addBlockModalUrl = addBlockUrl ?? addBlock.dataset.url;\r\n\r\n            buildAddBlockModal()\r\n                .then(modal => {\r\n                    addBlockModal = modal;\r\n                    const modalBody = renderBlocks(addBlockModalUrl, pagehash,\r\n                        addBlock.getAttribute('data-blockregion'));\r\n                    modal.setBody(modalBody);\r\n                    modal.show();\r\n\r\n                    return modalBody;\r\n                })\r\n                .catch(() => {\r\n                    addBlockModal.destroy();\r\n                });\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Method that creates the 'add block' modal.\r\n *\r\n * @method buildAddBlockModal\r\n * @returns {Promise} The modal promise (modal's body will be rendered later).\r\n */\r\nconst buildAddBlockModal = () => {\r\n    return ModalFactory.create({\r\n        type: ModalFactory.types.CANCEL,\r\n        title: getString('addblock')\r\n    });\r\n};\r\n\r\n/**\r\n * Method that renders the list of available blocks.\r\n *\r\n * @method renderBlocks\r\n * @param {String} addBlockUrl The add block URL\r\n * @param {String} pagehash\r\n * @param {String} region\r\n * @return {Promise}\r\n */\r\nconst renderBlocks = async(addBlockUrl, pagehash, region) => {\r\n    // Fetch all addable blocks in the given page.\r\n    const blocks = await getAddableBlocks(pagehash);\r\n\r\n    return Templates.render('core/add_block_body', {\r\n        blocks: blocks,\r\n        url: addBlockUrl,\r\n        blockregion: region,\r\n        pagehash\r\n    });\r\n};\r\n\r\n/**\r\n * Method that fetches all addable blocks in a given page.\r\n *\r\n * @method getAddableBlocks\r\n * @param {String} pagehash\r\n * @return {Promise}\r\n */\r\nconst getAddableBlocks = async(pagehash) => {\r\n    const request = {\r\n        methodname: 'core_block_fetch_addable_blocks',\r\n        args: {\r\n            pagecontextid: 0,\r\n            pagetype: '',\r\n            pagelayout: '',\r\n            subpage: '',\r\n            pagehash: pagehash,\r\n        },\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Set up the actions.\r\n *\r\n * @method init\r\n * @param {String} addBlockUrl The add block URL\r\n * @param {String} pagehash\r\n */\r\nexport const init = (addBlockUrl = null, pagehash = '') => {\r\n    if (!listenerEventsRegistered) {\r\n        registerListenerEvents(addBlockUrl, pagehash);\r\n        listenerEventsRegistered = true;\r\n    }\r\n};\r\n"],"names":["SELECTORS","listenerEventsRegistered","registerListenerEvents","addBlockUrl","pagehash","addBlockModal","document","addEventListener","e","showAddBlockForm","target","closest","preventDefault","modalForm","ModalForm","modalConfig","title","getAttribute","args","blockname","blockregion","formClass","returnFocus","events","FORM_SUBMITTED","destroy","window","location","reload","show","addBlock","addBlockModalUrl","dataset","url","buildAddBlockModal","then","modal","modalBody","renderBlocks","setBody","catch","ModalFactory","create","type","types","CANCEL","async","region","blocks","getAddableBlocks","Templates","render","request","methodname","pagecontextid","pagetype","pagelayout","subpage","Ajax","call"],"mappings":";;;;;;;8QA6BMA,oBACS,wBADTA,0BAEe,uEAIjBC,0BAA2B,QASzBC,uBAAyB,CAACC,YAAaC,gBACrCC,cAAgB,KACpBC,SAASC,iBAAiB,SAASC,UAEzBC,iBAAmBD,EAAEE,OAAOC,QAAQX,8BACtCS,iBAAkB,CAClBD,EAAEI,uBAEIC,UAAY,IAAIC,mBAAU,CAC5BC,YAAa,CACTC,OAAO,mBAAU,WAAY,aACzBP,iBAAiBQ,aAAa,qBAEtCC,KAAM,CAACC,UAAWV,iBAAiBQ,aAAa,kBAAmBb,SAAAA,SAC/DgB,YAAaX,iBAAiBQ,aAAa,qBAC/CI,UAAWZ,iBAAiBQ,aAAa,kBACzCK,YAAab,mBAGjBI,UAAUN,iBAAiBM,UAAUU,OAAOC,gBAAgB,KACxDnB,cAAcoB,UACdC,OAAOC,SAASC,YAGpBf,UAAUgB,aAGRC,SAAWtB,EAAEE,OAAOC,QAAQX,wBAC9B8B,SAAU,CACVtB,EAAEI,qBAEEmB,iBAAmB5B,MAAAA,YAAAA,YAAe2B,SAASE,QAAQC,IAEvDC,qBACKC,MAAKC,QACF/B,cAAgB+B,YACVC,UAAYC,aAAaP,iBAAkB3B,SAC7C0B,SAASb,aAAa,4BAC1BmB,MAAMG,QAAQF,WACdD,MAAMP,OAECQ,aAEVG,OAAM,KACHnC,cAAcoB,kBAY5BS,mBAAqB,IAChBO,uBAAaC,OAAO,CACvBC,KAAMF,uBAAaG,MAAMC,OACzB7B,OAAO,mBAAU,cAanBsB,aAAeQ,MAAM3C,YAAaC,SAAU2C,gBAExCC,aAAeC,iBAAiB7C,iBAE/B8C,mBAAUC,OAAO,sBAAuB,CAC3CH,OAAQA,OACRf,IAAK9B,YACLiB,YAAa2B,OACb3C,SAAAA,YAWF6C,iBAAmBH,MAAAA,iBACfM,QAAU,CACZC,WAAY,kCACZnC,KAAM,CACFoC,cAAe,EACfC,SAAU,GACVC,WAAY,GACZC,QAAS,GACTrD,SAAUA,kBAIXsD,cAAKC,KAAK,CAACP,UAAU,kBAUZ,eAACjD,mEAAc,KAAMC,gEAAW,GAC3CH,2BACDC,uBAAuBC,YAAaC,UACpCH,0BAA2B"}