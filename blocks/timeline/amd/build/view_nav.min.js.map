{"version":3,"file":"view_nav.min.js","sources":["../src/view_nav.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Manage the timeline view navigation for the timeline block.\r\n *\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(\r\n[\r\n    'jquery',\r\n    'core/custom_interaction_events',\r\n    'block_timeline/view',\r\n    'core/ajax',\r\n    'core/notification',\r\n    'core/utils'\r\n],\r\nfunction(\r\n    $,\r\n    CustomEvents,\r\n    View,\r\n    Ajax,\r\n    Notification,\r\n    Utils\r\n) {\r\n\r\n    var SELECTORS = {\r\n        TIMELINE_DAY_FILTER: '[data-region=\"day-filter\"]',\r\n        TIMELINE_DAY_FILTER_OPTION: '[data-from]',\r\n        TIMELINE_VIEW_SELECTOR: '[data-region=\"view-selector\"]',\r\n        DATA_DAYS_OFFSET: '[data-days-offset]',\r\n        DATA_DAYS_LIMIT: '[data-days-limit]',\r\n        TIMELINE_SEARCH_INPUT: '[data-action=\"search\"]',\r\n        TIMELINE_SEARCH_CLEAR_ICON: '[data-action=\"clearsearch\"]',\r\n        NO_COURSES_EMPTY_MESSAGE: '[data-region=\"no-courses-empty-message\"]',\r\n    };\r\n\r\n    /**\r\n     * Generic handler to persist user preferences\r\n     *\r\n     * @param {string} type The name of the attribute you're updating\r\n     * @param {string} value The value of the attribute you're updating\r\n     */\r\n    var updateUserPreferences = function(type, value) {\r\n        var request = {\r\n            methodname: 'core_user_update_user_preferences',\r\n            args: {\r\n                preferences: [\r\n                    {\r\n                        type: type,\r\n                        value: value\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n\r\n        Ajax.call([request])[0]\r\n            .fail(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Event listener for the day selector (\"Next 7 days\", \"Next 30 days\", etc).\r\n     *\r\n     * @param {object} root The root element for the timeline block\r\n     * @param {object} timelineViewRoot The root element for the timeline view\r\n     */\r\n    var registerTimelineDaySelector = function(root, timelineViewRoot) {\r\n        var timelineDaySelectorContainer = root.find(SELECTORS.TIMELINE_DAY_FILTER);\r\n\r\n        CustomEvents.define(timelineDaySelectorContainer, [CustomEvents.events.activate]);\r\n        timelineDaySelectorContainer.on(\r\n            CustomEvents.events.activate,\r\n            SELECTORS.TIMELINE_DAY_FILTER_OPTION,\r\n            function(e, data) {\r\n                // Update the user preference\r\n                var filtername = $(e.currentTarget).data('filtername');\r\n                var type = 'block_timeline_user_filter_preference';\r\n                updateUserPreferences(type, filtername);\r\n\r\n                var option = $(e.target).closest(SELECTORS.TIMELINE_DAY_FILTER_OPTION);\r\n\r\n                if (option.attr('aria-current') == 'true') {\r\n                    // If it's already active then we don't need to do anything.\r\n                    return;\r\n                }\r\n\r\n                var daysOffset = option.attr('data-from');\r\n                var daysLimit = option.attr('data-to');\r\n                var elementsWithDaysOffset = root.find(SELECTORS.DATA_DAYS_OFFSET);\r\n\r\n                elementsWithDaysOffset.attr('data-days-offset', daysOffset);\r\n\r\n                if (daysLimit != undefined) {\r\n                    elementsWithDaysOffset.attr('data-days-limit', daysLimit);\r\n                } else {\r\n                    elementsWithDaysOffset.removeAttr('data-days-limit');\r\n                }\r\n\r\n                if (option.attr('data-filtername') === 'overdue') {\r\n                    elementsWithDaysOffset.attr('data-filter-overdue', true);\r\n                } else {\r\n                    elementsWithDaysOffset.removeAttr('data-filter-overdue');\r\n                }\r\n\r\n                // Reset the views to reinitialise the event lists now that we've\r\n                // updated the day limits.\r\n                View.reset(timelineViewRoot);\r\n\r\n                data.originalEvent.preventDefault();\r\n            }\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Event listener for the \"sort\" button in the timeline navigation that allows for\r\n     * changing between the timeline dates and courses views.\r\n     *\r\n     * On a view change we tell the timeline view module that the view has been shown\r\n     * so that it can handle how to display the appropriate view.\r\n     *\r\n     * @param {object} root The root element for the timeline block\r\n     * @param {object} timelineViewRoot The root element for the timeline view\r\n     */\r\n    var registerViewSelector = function(root, timelineViewRoot) {\r\n        var viewSelector = root.find(SELECTORS.TIMELINE_VIEW_SELECTOR);\r\n\r\n        // Listen for when the user changes tab so that we can show the first set of courses\r\n        // and load their events when they request the sort by courses view for the first time.\r\n        viewSelector.on('shown shown.bs.tab', function(e) {\r\n            View.shown(timelineViewRoot);\r\n            $(e.target).removeClass('active');\r\n        });\r\n\r\n\r\n        // Event selector for user_sort\r\n        CustomEvents.define(viewSelector, [CustomEvents.events.activate]);\r\n        viewSelector.on(CustomEvents.events.activate, \"[data-toggle='tab']\", function(e) {\r\n            var filtername = $(e.currentTarget).data('filtername');\r\n            var type = 'block_timeline_user_sort_preference';\r\n            updateUserPreferences(type, filtername);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Event listener for the \"search\" input field in the timeline navigation that allows for\r\n     * searching the activity name, course name and activity type.\r\n     *\r\n     * @param {object} root The root element for the timeline block\r\n     * @param {object} timelineViewRoot The root element for the timeline view\r\n     */\r\n    const registerSearch = (root, timelineViewRoot) => {\r\n        const searchInput = root.find(SELECTORS.TIMELINE_SEARCH_INPUT);\r\n        const clearSearchIcon = root.find(SELECTORS.TIMELINE_SEARCH_CLEAR_ICON);\r\n        searchInput.on('input', Utils.debounce(() => {\r\n            if (searchInput.val() !== '') {\r\n                activeSearchState(clearSearchIcon, timelineViewRoot);\r\n            } else {\r\n                clearSearchState(clearSearchIcon, timelineViewRoot);\r\n            }\r\n        }, 1000));\r\n        clearSearchIcon.on('click', () => {\r\n            searchInput.val('');\r\n            clearSearchState(clearSearchIcon, timelineViewRoot);\r\n            searchInput.focus();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Show the clear search icon.\r\n     *\r\n     * @param {object} clearSearchIcon Clear search icon element.\r\n     * @param {object} timelineViewRoot The root element for the timeline view\r\n     */\r\n    const activeSearchState = (clearSearchIcon, timelineViewRoot) => {\r\n        clearSearchIcon.removeClass('d-none');\r\n        View.reset(timelineViewRoot);\r\n    };\r\n\r\n    /**\r\n     * Hide the clear search icon.\r\n     *\r\n     * @param {object} clearSearchIcon Clear search icon element.\r\n     * @param {object} timelineViewRoot The root element for the timeline view\r\n     */\r\n    const clearSearchState = (clearSearchIcon, timelineViewRoot) => {\r\n        clearSearchIcon.addClass('d-none');\r\n        View.reset(timelineViewRoot);\r\n    };\r\n\r\n    /**\r\n     * Initialise the timeline view navigation by adding event listeners to\r\n     * the navigation elements.\r\n     *\r\n     * @param {object} root The root element for the timeline block\r\n     * @param {object} timelineViewRoot The root element for the timeline view\r\n     */\r\n    var init = function(root, timelineViewRoot) {\r\n        root = $(root);\r\n\r\n        registerViewSelector(root, timelineViewRoot);\r\n\r\n        // Only need to handle filtering if the user is actively enrolled in a course.\r\n        if (!root.find(SELECTORS.NO_COURSES_EMPTY_MESSAGE).length) {\r\n            registerTimelineDaySelector(root, timelineViewRoot);\r\n            registerSearch(root, timelineViewRoot);\r\n        }\r\n    };\r\n\r\n    return {\r\n        init: init\r\n    };\r\n});\r\n"],"names":["define","$","CustomEvents","View","Ajax","Notification","Utils","SELECTORS","updateUserPreferences","type","value","request","methodname","args","preferences","call","fail","exception","activeSearchState","clearSearchIcon","timelineViewRoot","removeClass","reset","clearSearchState","addClass","init","root","viewSelector","find","on","e","shown","target","events","activate","filtername","currentTarget","data","registerViewSelector","length","timelineDaySelectorContainer","option","closest","attr","daysOffset","daysLimit","elementsWithDaysOffset","undefined","removeAttr","originalEvent","preventDefault","registerTimelineDaySelector","searchInput","debounce","val","focus","registerSearch"],"mappings":";;;;;;AAsBAA,iCACA,CACI,SACA,iCACA,sBACA,YACA,oBACA,eAEJ,SACIC,EACAC,aACAC,KACAC,KACAC,aACAC,WAGIC,8BACqB,6BADrBA,qCAE4B,cAF5BA,iCAGwB,gCAHxBA,2BAIkB,qBAJlBA,gCAMuB,yBANvBA,qCAO4B,8BAP5BA,mCAQ0B,2CAS1BC,sBAAwB,SAASC,KAAMC,WACnCC,QAAU,CACVC,WAAY,oCACZC,KAAM,CACFC,YAAa,CACT,CACIL,KAAMA,KACNC,MAAOA,UAMvBN,KAAKW,KAAK,CAACJ,UAAU,GAChBK,KAAKX,aAAaY,kBAoHrBC,kBAAoB,CAACC,gBAAiBC,oBACxCD,gBAAgBE,YAAY,UAC5BlB,KAAKmB,MAAMF,mBASTG,iBAAmB,CAACJ,gBAAiBC,oBACvCD,gBAAgBK,SAAS,UACzBrB,KAAKmB,MAAMF,yBAsBR,CACHK,KAbO,SAASC,KAAMN,mBAzEC,SAASM,KAAMN,sBAClCO,aAAeD,KAAKE,KAAKrB,kCAI7BoB,aAAaE,GAAG,sBAAsB,SAASC,GAC3C3B,KAAK4B,MAAMX,kBACXnB,EAAE6B,EAAEE,QAAQX,YAAY,aAK5BnB,aAAaF,OAAO2B,aAAc,CAACzB,aAAa+B,OAAOC,WACvDP,aAAaE,GAAG3B,aAAa+B,OAAOC,SAAU,uBAAuB,SAASJ,OACtEK,WAAalC,EAAE6B,EAAEM,eAAeC,KAAK,cAEzC7B,sBADW,sCACiB2B,gBA4DhCG,CAFAZ,KAAOzB,EAAEyB,MAEkBN,kBAGtBM,KAAKE,KAAKrB,oCAAoCgC,SAxIrB,SAASb,KAAMN,sBACzCoB,6BAA+Bd,KAAKE,KAAKrB,+BAE7CL,aAAaF,OAAOwC,6BAA8B,CAACtC,aAAa+B,OAAOC,WACvEM,6BAA6BX,GACzB3B,aAAa+B,OAAOC,SACpB3B,sCACA,SAASuB,EAAGO,UAEJF,WAAalC,EAAE6B,EAAEM,eAAeC,KAAK,cAEzC7B,sBADW,wCACiB2B,gBAExBM,OAASxC,EAAE6B,EAAEE,QAAQU,QAAQnC,yCAEE,QAA/BkC,OAAOE,KAAK,qBAKZC,WAAaH,OAAOE,KAAK,aACzBE,UAAYJ,OAAOE,KAAK,WACxBG,uBAAyBpB,KAAKE,KAAKrB,4BAEvCuC,uBAAuBH,KAAK,mBAAoBC,YAE/BG,MAAbF,UACAC,uBAAuBH,KAAK,kBAAmBE,WAE/CC,uBAAuBE,WAAW,mBAGC,YAAnCP,OAAOE,KAAK,mBACZG,uBAAuBH,KAAK,uBAAuB,GAEnDG,uBAAuBE,WAAW,uBAKtC7C,KAAKmB,MAAMF,kBAEXiB,KAAKY,cAAcC,qBA+FvBC,CAA4BzB,KAAMN,kBArDnB,EAACM,KAAMN,0BACpBgC,YAAc1B,KAAKE,KAAKrB,iCACxBY,gBAAkBO,KAAKE,KAAKrB,sCAClC6C,YAAYvB,GAAG,QAASvB,MAAM+C,UAAS,KACT,KAAtBD,YAAYE,MACZpC,kBAAkBC,gBAAiBC,kBAEnCG,iBAAiBJ,gBAAiBC,oBAEvC,MACHD,gBAAgBU,GAAG,SAAS,KACxBuB,YAAYE,IAAI,IAChB/B,iBAAiBJ,gBAAiBC,kBAClCgC,YAAYG,YAyCZC,CAAe9B,KAAMN"}