{"version":3,"file":"module.min.js","sources":["../src/module.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Manager for the accessreview block.\r\n *\r\n * @module block_accessreview/module\r\n * @author      Max Larkin <max@brickfieldlabs.ie>\r\n * @copyright   2020 Brickfield Education Labs <max@brickfieldlabs.ie>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {call as fetchMany} from 'core/ajax';\r\nimport * as Templates from 'core/templates';\r\nimport {exception as displayError} from 'core/notification';\r\n\r\n/**\r\n * The number of colours used to represent the heatmap. (Indexed on 0.)\r\n * @type {number}\r\n */\r\nconst numColours = 2;\r\n\r\n/**\r\n * The toggle state of the heatmap.\r\n * @type {boolean}\r\n */\r\nlet toggleState = true;\r\n\r\n/**\r\n * Renders the HTML template onto a particular HTML element.\r\n * @param {HTMLElement} element The element to attach the HTML to.\r\n * @param {number} errorCount The number of errors on this module/section.\r\n * @param {number} checkCount The number of checks triggered on this module/section.\r\n * @param {String} displayFormat\r\n * @param {Number} minViews\r\n * @param {Number} viewDelta\r\n * @returns {Promise}\r\n */\r\nconst renderTemplate = (element, errorCount, checkCount, displayFormat, minViews, viewDelta) => {\r\n    // Calculate a weight?\r\n    const weight = parseInt((errorCount - minViews) / viewDelta * numColours);\r\n\r\n    const context = {\r\n        resultPassed: !errorCount,\r\n        classList: '',\r\n        passRate: {\r\n            errorCount,\r\n            checkCount,\r\n            failureRate: Math.round(errorCount / checkCount * 100),\r\n        },\r\n    };\r\n\r\n    if (!element) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const elementClassList = ['block_accessreview'];\r\n    if (context.resultPassed) {\r\n        elementClassList.push('block_accessreview_success');\r\n    } else if (weight) {\r\n        elementClassList.push('block_accessreview_danger');\r\n    } else {\r\n        elementClassList.push('block_accessreview_warning');\r\n    }\r\n\r\n    const showIcons = (displayFormat == 'showicons') || (displayFormat == 'showboth');\r\n    const showBackground = (displayFormat == 'showbackground') || (displayFormat == 'showboth');\r\n\r\n    if (showBackground && !showIcons) {\r\n        // Only the background is displayed.\r\n        // No need to display the template.\r\n        // Note: The case where both the background and icons are shown is handled later to avoid jankiness.\r\n        element.classList.add(...elementClassList, 'alert');\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (showIcons && !showBackground) {\r\n        context.classList = elementClassList.join(' ');\r\n    }\r\n\r\n    // The icons are displayed either with, or without, the background.\r\n    return Templates.renderForPromise('block_accessreview/status', context)\r\n    .then(({html, js}) => {\r\n        Templates.appendNodeContents(element, html, js);\r\n\r\n        if (showBackground) {\r\n            element.classList.add(...elementClassList, 'alert');\r\n        }\r\n\r\n        return;\r\n    })\r\n    .catch();\r\n};\r\n\r\n/**\r\n * Applies the template to all sections and modules on the course page.\r\n *\r\n * @param {Number} courseId\r\n * @param {String} displayFormat\r\n * @param {Boolean} updatePreference\r\n * @returns {Promise}\r\n */\r\nconst showAccessMap = (courseId, displayFormat, updatePreference = false) => {\r\n    // Get error data.\r\n    return Promise.all(fetchReviewData(courseId, updatePreference))\r\n    .then(([sectionData, moduleData]) => {\r\n        // Get total data.\r\n        const {minViews, viewDelta} = getErrorTotals(sectionData, moduleData);\r\n\r\n        sectionData.forEach(section => {\r\n            const element = document.querySelector(`#section-${section.section} .summary`);\r\n            if (!element) {\r\n                return;\r\n            }\r\n\r\n            renderTemplate(element, section.numerrors, section.numchecks, displayFormat, minViews, viewDelta);\r\n        });\r\n\r\n        moduleData.forEach(module => {\r\n            const element = document.getElementById(`module-${module.cmid}`);\r\n            if (!element) {\r\n                return;\r\n            }\r\n\r\n            renderTemplate(element, module.numerrors, module.numchecks, displayFormat, minViews, viewDelta);\r\n        });\r\n\r\n        // Change the icon display.\r\n        document.querySelector('.icon-accessmap').classList.remove(...['fa-eye-slash']);\r\n        document.querySelector('.icon-accessmap').classList.add(...['fa-eye']);\r\n\r\n        return {\r\n            sectionData,\r\n            moduleData,\r\n        };\r\n    })\r\n    .catch(displayError);\r\n};\r\n\r\n\r\n/**\r\n * Hides or removes the templates from the HTML of the current page.\r\n *\r\n * @param {Boolean} updatePreference\r\n */\r\nconst hideAccessMap = (updatePreference = false) => {\r\n    // Removes the added elements.\r\n    document.querySelectorAll('.block_accessreview_view').forEach(node => node.remove());\r\n\r\n    const classList = [\r\n        'block_accessreview',\r\n        'block_accessreview_success',\r\n        'block_accessreview_warning',\r\n        'block_accessreview_danger',\r\n        'block_accessreview_view',\r\n        'alert',\r\n    ];\r\n\r\n    // Removes the added classes.\r\n    document.querySelectorAll('.block_accessreview').forEach(node => node.classList.remove(...classList));\r\n\r\n    if (updatePreference) {\r\n        setToggleStatePreference(false);\r\n    }\r\n\r\n    // Change the icon display.\r\n    document.querySelector('.icon-accessmap').classList.remove(...['fa-eye']);\r\n    document.querySelector('.icon-accessmap').classList.add(...['fa-eye-slash']);\r\n};\r\n\r\n\r\n/**\r\n * Toggles the heatmap on/off.\r\n *\r\n * @param {Number} courseId\r\n * @param {String} displayFormat\r\n */\r\nconst toggleAccessMap = (courseId, displayFormat) => {\r\n    toggleState = !toggleState;\r\n    if (!toggleState) {\r\n        hideAccessMap(true);\r\n    } else {\r\n        showAccessMap(courseId, displayFormat, true);\r\n    }\r\n};\r\n\r\n/**\r\n * Parses information on the errors, generating the min, max and totals.\r\n *\r\n * @param {Object[]} sectionData The error data for course sections.\r\n * @param {Object[]} moduleData The error data for course modules.\r\n * @returns {Object} An object representing the extra error information.\r\n */\r\nconst getErrorTotals = (sectionData, moduleData) => {\r\n    const totals = {\r\n        totalErrors: 0,\r\n        totalUsers: 0,\r\n        minViews: 0,\r\n        maxViews: 0,\r\n        viewDelta: 0,\r\n    };\r\n\r\n    [].concat(sectionData, moduleData).forEach(item => {\r\n        totals.totalErrors += item.numerrors;\r\n        if (item.numerrors < totals.minViews) {\r\n            totals.minViews = item.numerrors;\r\n        }\r\n\r\n        if (item.numerrors > totals.maxViews) {\r\n            totals.maxViews = item.numerrors;\r\n        }\r\n        totals.totalUsers += item.numchecks;\r\n    });\r\n\r\n    totals.viewDelta = totals.maxViews - totals.minViews + 1;\r\n\r\n    return totals;\r\n};\r\n\r\nconst registerEventListeners = (courseId, displayFormat) => {\r\n    document.addEventListener('click', e => {\r\n        if (e.target.closest('#toggle-accessmap')) {\r\n            e.preventDefault();\r\n            toggleAccessMap(courseId, displayFormat);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Set the user preference for the toggle value.\r\n *\r\n * @param   {Boolean} toggleState\r\n * @returns {Promise}\r\n */\r\nconst getTogglePreferenceParams = toggleState => {\r\n    return {\r\n        methodname: 'core_user_update_user_preferences',\r\n        args: {\r\n            preferences: [{\r\n                type: 'block_accessreviewtogglestate',\r\n                value: toggleState,\r\n            }],\r\n        }\r\n    };\r\n};\r\n\r\nconst setToggleStatePreference = toggleState => fetchMany([getTogglePreferenceParams(toggleState)]);\r\n\r\n/**\r\n * Fetch the review data.\r\n *\r\n * @param   {Number} courseid\r\n * @param {Boolean} updatePreference\r\n * @returns {Promise[]}\r\n */\r\nconst fetchReviewData = (courseid, updatePreference = false) => {\r\n    const calls = [\r\n        {\r\n            methodname: 'block_accessreview_get_section_data',\r\n            args: {courseid}\r\n        },\r\n        {\r\n            methodname: 'block_accessreview_get_module_data',\r\n            args: {courseid}\r\n        },\r\n    ];\r\n\r\n    if (updatePreference) {\r\n        calls.push(getTogglePreferenceParams(true));\r\n    }\r\n\r\n    return fetchMany(calls);\r\n};\r\n\r\n/**\r\n * Setting up the access review module.\r\n * @param {number} toggled A number represnting the state of the review toggle.\r\n * @param {string} displayFormat A string representing the display format for icons.\r\n * @param {number} courseId The course ID.\r\n */\r\nexport const init = (toggled, displayFormat, courseId) => {\r\n    // Settings consts.\r\n    toggleState = toggled == 1;\r\n\r\n    if (toggleState) {\r\n        showAccessMap(courseId, displayFormat);\r\n    }\r\n\r\n    registerEventListeners(courseId, displayFormat);\r\n};\r\n"],"names":["toggleState","renderTemplate","element","errorCount","checkCount","displayFormat","minViews","viewDelta","weight","parseInt","context","resultPassed","classList","passRate","failureRate","Math","round","Promise","resolve","elementClassList","push","showIcons","showBackground","add","join","Templates","renderForPromise","then","_ref","html","js","appendNodeContents","catch","showAccessMap","courseId","updatePreference","all","fetchReviewData","_ref2","sectionData","moduleData","getErrorTotals","forEach","section","document","querySelector","numerrors","numchecks","module","getElementById","cmid","remove","displayError","toggleAccessMap","querySelectorAll","node","setToggleStatePreference","hideAccessMap","totals","totalErrors","totalUsers","maxViews","concat","item","getTogglePreferenceParams","methodname","args","preferences","type","value","courseid","calls","toggled","addEventListener","e","target","closest","preventDefault","registerEventListeners"],"mappings":"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"}