{"version":3,"file":"gateways_modal.min.js","sources":["../src/gateways_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Contain the logic for the gateways modal.\r\n *\r\n * @module     core_payment/gateways_modal\r\n * @copyright  2019 Shamim Rezaie <shamim@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport ModalFactory from 'core/modal_factory';\r\nimport Templates from 'core/templates';\r\nimport {get_string as getString} from 'core/str';\r\nimport {getAvailableGateways} from './repository';\r\nimport Selectors from './selectors';\r\nimport ModalEvents from 'core/modal_events';\r\nimport PaymentEvents from 'core_payment/events';\r\nimport {add as addToast, addToastRegion} from 'core/toast';\r\nimport Notification from 'core/notification';\r\nimport ModalGateways from './modal_gateways';\r\n\r\n/**\r\n * Register event listeners for the module.\r\n */\r\nconst registerEventListeners = () => {\r\n    document.addEventListener('click', e => {\r\n        const gatewayTrigger = e.target.closest('[data-action=\"core_payment/triggerPayment\"]');\r\n        if (gatewayTrigger) {\r\n            e.preventDefault();\r\n\r\n            show(gatewayTrigger, {focusOnClose: e.target});\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Shows the gateway selector modal.\r\n *\r\n * @param {HTMLElement} rootNode\r\n * @param {Object} options - Additional options\r\n * @param {HTMLElement} options.focusOnClose The element to focus on when the modal is closed.\r\n */\r\nconst show = async(rootNode, {\r\n    focusOnClose = null,\r\n} = {}) => {\r\n    const modal = await ModalFactory.create({\r\n        type: ModalGateways.TYPE,\r\n        title: await getString('selectpaymenttype', 'core_payment'),\r\n        body: await Templates.render('core_payment/gateways_modal', {}),\r\n    });\r\n\r\n    const rootElement = modal.getRoot()[0];\r\n    addToastRegion(rootElement);\r\n\r\n    modal.show();\r\n\r\n    modal.getRoot().on(ModalEvents.hidden, () => {\r\n        // Destroy when hidden.\r\n        modal.destroy();\r\n        try {\r\n            focusOnClose.focus();\r\n        } catch (e) {\r\n            // eslint-disable-line\r\n        }\r\n    });\r\n\r\n    modal.getRoot().on(PaymentEvents.proceed, (e) => {\r\n        const gateway = (rootElement.querySelector(Selectors.values.gateway) || {value: ''}).value;\r\n\r\n        if (gateway) {\r\n            processPayment(\r\n                gateway,\r\n                rootNode.dataset.component,\r\n                rootNode.dataset.paymentarea,\r\n                rootNode.dataset.itemid,\r\n                rootNode.dataset.description\r\n            )\r\n            .then(message => {\r\n                modal.hide();\r\n                Notification.addNotification({\r\n                    message: message,\r\n                    type: 'success',\r\n                });\r\n                location.href = rootNode.dataset.successurl;\r\n\r\n                // The following return statement is never reached. It is put here just to make eslint happy.\r\n                return message;\r\n            })\r\n            .catch(message => Notification.alert('', message));\r\n        } else {\r\n            // We cannot use await in the following line.\r\n            // The reason is that we are preventing the default action of the save event being triggered,\r\n            // therefore we cannot define the event handler function asynchronous.\r\n            getString('nogatewayselected', 'core_payment').then(message => addToast(message, {type: 'warning'})).catch();\r\n        }\r\n\r\n        e.preventDefault();\r\n    });\r\n\r\n    // Re-calculate the cost when gateway is changed.\r\n    rootElement.addEventListener('change', e => {\r\n        if (e.target.matches(Selectors.elements.gateways)) {\r\n            updateCostRegion(rootElement, rootNode.dataset.cost);\r\n        }\r\n    });\r\n\r\n    const gateways = await getAvailableGateways(rootNode.dataset.component, rootNode.dataset.paymentarea, rootNode.dataset.itemid);\r\n    const context = {\r\n        gateways\r\n    };\r\n\r\n    const {html, js} = await Templates.renderForPromise('core_payment/gateways', context);\r\n    Templates.replaceNodeContents(rootElement.querySelector(Selectors.regions.gatewaysContainer), html, js);\r\n    selectSingleGateway(rootElement);\r\n    await updateCostRegion(rootElement, rootNode.dataset.cost);\r\n};\r\n\r\n/**\r\n * Auto-select the gateway if there is only one gateway.\r\n *\r\n * @param {HTMLElement} root An HTMLElement that contains the cost region\r\n */\r\nconst selectSingleGateway = root => {\r\n    const gateways = root.querySelectorAll(Selectors.elements.gateways);\r\n\r\n    if (gateways.length == 1) {\r\n        gateways[0].checked = true;\r\n    }\r\n};\r\n\r\n/**\r\n * Shows the cost of the item the user is purchasing in the cost region.\r\n *\r\n * @param {HTMLElement} root An HTMLElement that contains the cost region\r\n * @param {string} defaultCost The default cost that is going to be displayed if no gateway is selected\r\n * @returns {Promise<void>}\r\n */\r\nconst updateCostRegion = async(root, defaultCost = '') => {\r\n    const gatewayElement = root.querySelector(Selectors.values.gateway);\r\n    const surcharge = parseInt((gatewayElement || {dataset: {surcharge: 0}}).dataset.surcharge);\r\n    const cost = (gatewayElement || {dataset: {cost: defaultCost}}).dataset.cost;\r\n\r\n    const {html, js} = await Templates.renderForPromise('core_payment/fee_breakdown', {fee: cost, surcharge});\r\n    Templates.replaceNodeContents(root.querySelector(Selectors.regions.costContainer), html, js);\r\n};\r\n\r\n/**\r\n * Process payment using the selected gateway.\r\n *\r\n * @param {string} gateway The gateway to be used for payment\r\n * @param {string} component Name of the component that the itemId belongs to\r\n * @param {string} paymentArea Name of the area in the component that the itemId belongs to\r\n * @param {number} itemId An internal identifier that is used by the component\r\n * @param {string} description Description of the payment\r\n * @returns {Promise<string>}\r\n */\r\nconst processPayment = async(gateway, component, paymentArea, itemId, description) => {\r\n    const paymentMethod = await import(`paygw_${gateway}/gateways_modal`);\r\n    return paymentMethod.process(component, paymentArea, itemId, description);\r\n};\r\n\r\n/**\r\n * Set up the payment actions.\r\n */\r\nexport const init = () => {\r\n    if (!init.initialised) {\r\n        // Event listeners should only be registered once.\r\n        init.initialised = true;\r\n        registerEventListeners();\r\n    }\r\n};\r\n\r\n/**\r\n * Whether the init function was called before.\r\n *\r\n * @static\r\n * @type {boolean}\r\n */\r\ninit.initialised = false;\r\n"],"names":["show","async","rootNode","focusOnClose","modal","ModalFactory","create","type","ModalGateways","TYPE","title","body","Templates","render","rootElement","getRoot","on","ModalEvents","hidden","destroy","focus","e","PaymentEvents","proceed","gateway","querySelector","Selectors","values","value","processPayment","dataset","component","paymentarea","itemid","description","then","message","hide","addNotification","location","href","successurl","catch","Notification","alert","preventDefault","addEventListener","target","matches","elements","gateways","updateCostRegion","cost","context","html","js","renderForPromise","replaceNodeContents","regions","gatewaysContainer","selectSingleGateway","root","querySelectorAll","length","checked","defaultCost","gatewayElement","surcharge","parseInt","fee","costContainer","paymentArea","itemId","process","init","initialised","document","gatewayTrigger","closest"],"mappings":"m/BAuDMA,KAAOC,eAAMC,cAAUC,aACzBA,aAAe,6DACf,SACMC,YAAcC,uBAAaC,OAAO,CACpCC,KAAMC,wBAAcC,KACpBC,YAAa,mBAAU,oBAAqB,gBAC5CC,WAAYC,mBAAUC,OAAO,8BAA+B,MAG1DC,YAAcV,MAAMW,UAAU,6BACrBD,aAEfV,MAAMJ,OAENI,MAAMW,UAAUC,GAAGC,sBAAYC,QAAQ,KAEnCd,MAAMe,cAEFhB,aAAaiB,QACf,MAAOC,QAKbjB,MAAMW,UAAUC,GAAGM,gBAAcC,SAAUF,UACjCG,SAAWV,YAAYW,cAAcC,mBAAUC,OAAOH,UAAY,CAACI,MAAO,KAAKA,MAEjFJ,QACAK,eACIL,QACAtB,SAAS4B,QAAQC,UACjB7B,SAAS4B,QAAQE,YACjB9B,SAAS4B,QAAQG,OACjB/B,SAAS4B,QAAQI,aAEpBC,MAAKC,UACFhC,MAAMiC,6BACOC,gBAAgB,CACzBF,QAASA,QACT7B,KAAM,YAEVgC,SAASC,KAAOtC,SAAS4B,QAAQW,WAG1BL,WAEVM,OAAMN,SAAWO,sBAAaC,MAAM,GAAIR,+BAK/B,oBAAqB,gBAAgBD,MAAKC,UAAW,cAASA,QAAS,CAAC7B,KAAM,cAAamC,QAGzGrB,EAAEwB,oBAIN/B,YAAYgC,iBAAiB,UAAUzB,IAC/BA,EAAE0B,OAAOC,QAAQtB,mBAAUuB,SAASC,WACpCC,iBAAiBrC,YAAaZ,SAAS4B,QAAQsB,eAIjDF,eAAiB,oCAAqBhD,SAAS4B,QAAQC,UAAW7B,SAAS4B,QAAQE,YAAa9B,SAAS4B,QAAQG,QACjHoB,QAAU,CACZH,SAAAA,WAGEI,KAACA,KAADC,GAAOA,UAAY3C,mBAAU4C,iBAAiB,wBAAyBH,4BACnEI,oBAAoB3C,YAAYW,cAAcC,mBAAUgC,QAAQC,mBAAoBL,KAAMC,IACpGK,oBAAoB9C,mBACdqC,iBAAiBrC,YAAaZ,SAAS4B,QAAQsB,OAQnDQ,oBAAsBC,aAClBX,SAAWW,KAAKC,iBAAiBpC,mBAAUuB,SAASC,UAEnC,GAAnBA,SAASa,SACTb,SAAS,GAAGc,SAAU,IAWxBb,iBAAmBlD,eAAM4D,UAAMI,mEAAc,SACzCC,eAAiBL,KAAKpC,cAAcC,mBAAUC,OAAOH,SACrD2C,UAAYC,UAAUF,gBAAkB,CAACpC,QAAS,CAACqC,UAAW,KAAKrC,QAAQqC,WAC3Ef,MAAQc,gBAAkB,CAACpC,QAAS,CAACsB,KAAMa,eAAenC,QAAQsB,MAElEE,KAACA,KAADC,GAAOA,UAAY3C,mBAAU4C,iBAAiB,6BAA8B,CAACa,IAAKjB,KAAMe,UAAAA,+BACpFV,oBAAoBI,KAAKpC,cAAcC,mBAAUgC,QAAQY,eAAgBhB,KAAMC,KAavF1B,eAAiB5B,MAAMuB,QAASO,UAAWwC,YAAaC,OAAQtC,qPACtBV,sUAAAA,sGAAAA,+BACvBiD,QAAQ1C,UAAWwC,YAAaC,OAAQtC,aAMpDwC,KAAO,KACXA,KAAKC,cAEND,KAAKC,aAAc,EA9IvBC,SAAS9B,iBAAiB,SAASzB,UACzBwD,eAAiBxD,EAAE0B,OAAO+B,QAAQ,+CACpCD,iBACAxD,EAAEwB,iBAEF7C,KAAK6E,eAAgB,CAAC1E,aAAckB,EAAE0B,kCAoJlD2B,KAAKC,aAAc"}