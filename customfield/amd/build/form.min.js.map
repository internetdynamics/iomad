{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Custom Field interaction management for Moodle.\r\n *\r\n * @module     core_customfield/form\r\n * @copyright  2018 Toni Barbera\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport 'core/inplace_editable';\r\nimport {call as fetchMany} from 'core/ajax';\r\nimport {\r\n    get_string as getString,\r\n    get_strings as getStrings,\r\n} from 'core/str';\r\nimport ModalForm from 'core_form/modalform';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport SortableList from 'core/sortable_list';\r\nimport Templates from 'core/templates';\r\nimport jQuery from 'jquery';\r\n\r\n/**\r\n * Display confirmation dialogue\r\n *\r\n * @param {Number} id\r\n * @param {String} type\r\n * @param {String} component\r\n * @param {String} area\r\n * @param {Number} itemid\r\n */\r\nconst confirmDelete = (id, type, component, area, itemid) => {\r\n    const pendingPromise = new Pending('core_customfield/form:confirmDelete');\r\n\r\n    getStrings([\r\n        {'key': 'confirm'},\r\n        {'key': 'confirmdelete' + type, component: 'core_customfield'},\r\n        {'key': 'yes'},\r\n        {'key': 'no'},\r\n    ])\r\n    .then(strings => {\r\n        return Notification.confirm(strings[0], strings[1], strings[2], strings[3], function() {\r\n            const pendingDeletePromise = new Pending('core_customfield/form:confirmDelete');\r\n            fetchMany([\r\n                {\r\n                    methodname: (type === 'field') ? 'core_customfield_delete_field' : 'core_customfield_delete_category',\r\n                    args: {id},\r\n                },\r\n                {methodname: 'core_customfield_reload_template', args: {component, area, itemid}}\r\n            ])[1]\r\n            .then(response => Templates.render('core_customfield/list', response))\r\n            .then((html, js) => Templates.replaceNode(jQuery('[data-region=\"list-page\"]'), html, js))\r\n            .then(pendingDeletePromise.resolve)\r\n            .catch(Notification.exception);\r\n        });\r\n    })\r\n    .then(pendingPromise.resolve)\r\n    .catch(Notification.exception);\r\n};\r\n\r\n\r\n/**\r\n * Creates a new custom fields category with default name and updates the list\r\n *\r\n * @param {String} component\r\n * @param {String} area\r\n * @param {Number} itemid\r\n */\r\nconst createNewCategory = (component, area, itemid) => {\r\n    const pendingPromise = new Pending('core_customfield/form:createNewCategory');\r\n    const promises = fetchMany([\r\n        {methodname: 'core_customfield_create_category', args: {component, area, itemid}},\r\n        {methodname: 'core_customfield_reload_template', args: {component, area, itemid}}\r\n    ]);\r\n\r\n    promises[1].then(response => Templates.render('core_customfield/list', response))\r\n    .then((html, js) => Templates.replaceNode(jQuery('[data-region=\"list-page\"]'), html, js))\r\n    .then(() => pendingPromise.resolve())\r\n    .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Create new custom field\r\n *\r\n * @param {HTMLElement} element\r\n * @param {String} component\r\n * @param {String} area\r\n * @param {Number} itemid\r\n */\r\nconst createNewField = (element, component, area, itemid) => {\r\n    const pendingPromise = new Pending('core_customfield/form:createNewField');\r\n\r\n    const returnFocus = element.closest(\".action-menu\").querySelector(\".dropdown-toggle\");\r\n    const form = new ModalForm({\r\n        formClass: \"core_customfield\\\\field_config_form\",\r\n        args: {\r\n            categoryid: element.getAttribute('data-categoryid'),\r\n            type: element.getAttribute('data-type'),\r\n        },\r\n        modalConfig: {\r\n            title: getString('addingnewcustomfield', 'core_customfield', element.getAttribute('data-typename')),\r\n        },\r\n        returnFocus,\r\n    });\r\n\r\n    form.addEventListener(form.events.FORM_SUBMITTED, () => {\r\n        const pendingCreatedPromise = new Pending('core_customfield/form:createdNewField');\r\n        const promises = fetchMany([\r\n            {methodname: 'core_customfield_reload_template', args: {component: component, area: area, itemid: itemid}}\r\n        ]);\r\n\r\n        promises[0].then(response => Templates.render('core_customfield/list', response))\r\n        .then((html, js) => Templates.replaceNode(jQuery('[data-region=\"list-page\"]'), html, js))\r\n        .then(() => pendingCreatedPromise.resolve())\r\n        .catch(() => window.location.reload());\r\n    });\r\n\r\n    form.show();\r\n\r\n    pendingPromise.resolve();\r\n};\r\n\r\n/**\r\n * Edit custom field\r\n *\r\n * @param {HTMLElement} element\r\n * @param {String} component\r\n * @param {String} area\r\n * @param {Number} itemid\r\n */\r\nconst editField = (element, component, area, itemid) => {\r\n    const pendingPromise = new Pending('core_customfield/form:editField');\r\n\r\n    const form = new ModalForm({\r\n        formClass: \"core_customfield\\\\field_config_form\",\r\n        args: {\r\n            id: element.getAttribute('data-id'),\r\n        },\r\n        modalConfig: {\r\n            title: getString('editingfield', 'core_customfield', element.getAttribute('data-name')),\r\n        },\r\n        returnFocus: element,\r\n    });\r\n\r\n    form.addEventListener(form.events.FORM_SUBMITTED, () => {\r\n        const pendingCreatedPromise = new Pending('core_customfield/form:createdNewField');\r\n        const promises = fetchMany([\r\n            {methodname: 'core_customfield_reload_template', args: {component: component, area: area, itemid: itemid}}\r\n        ]);\r\n\r\n        promises[0].then(response => Templates.render('core_customfield/list', response))\r\n        .then((html, js) => Templates.replaceNode(jQuery('[data-region=\"list-page\"]'), html, js))\r\n        .then(() => pendingCreatedPromise.resolve())\r\n        .catch(() => window.location.reload());\r\n    });\r\n\r\n    form.show();\r\n\r\n    pendingPromise.resolve();\r\n};\r\n\r\n/**\r\n * Fetch the category name from an inplace editable, given a child node of that field.\r\n *\r\n * @param {NodeElement} nodeElement\r\n * @returns {String}\r\n */\r\nconst getCategoryNameFor = nodeElement => nodeElement\r\n    .closest('[data-category-id]')\r\n    .find('[data-inplaceeditable][data-itemtype=category][data-component=core_customfield]')\r\n    .attr('data-value');\r\n\r\nconst setupSortableLists = rootNode => {\r\n    // Sort category.\r\n    const sortCat = new SortableList(\r\n        '#customfield_catlist .categorieslist',\r\n        {\r\n            moveHandlerSelector: '.movecategory [data-drag-type=move]',\r\n        }\r\n    );\r\n    sortCat.getElementName = nodeElement => Promise.resolve(getCategoryNameFor(nodeElement));\r\n\r\n    // Note: The sortable list currently uses jQuery events.\r\n    jQuery('[data-category-id]').on(SortableList.EVENTS.DROP, (evt, info) => {\r\n        if (info.positionChanged) {\r\n            const pendingPromise = new Pending('core_customfield/form:categoryid:on:sortablelist-drop');\r\n            fetchMany([{\r\n                methodname: 'core_customfield_move_category',\r\n                args: {\r\n                    id: info.element.data('category-id'),\r\n                    beforeid: info.targetNextElement.data('category-id')\r\n                }\r\n\r\n            }])[0]\r\n            .then(pendingPromise.resolve)\r\n            .catch(Notification.exception);\r\n        }\r\n        evt.stopPropagation(); // Important for nested lists to prevent multiple targets.\r\n    });\r\n\r\n    // Sort fields.\r\n    var sort = new SortableList(\r\n        '#customfield_catlist .fieldslist tbody',\r\n        {\r\n            moveHandlerSelector: '.movefield [data-drag-type=move]',\r\n        }\r\n    );\r\n\r\n    sort.getDestinationName = (parentElement, afterElement) => {\r\n        if (!afterElement.length) {\r\n            return getString('totopofcategory', 'customfield', getCategoryNameFor(parentElement));\r\n        } else if (afterElement.attr('data-field-name')) {\r\n            return getString('afterfield', 'customfield', afterElement.attr('data-field-name'));\r\n        } else {\r\n            return Promise.resolve('');\r\n        }\r\n    };\r\n\r\n    jQuery('[data-field-name]').on(SortableList.EVENTS.DROP, (evt, info) => {\r\n        if (info.positionChanged) {\r\n            const pendingPromise = new Pending('core_customfield/form:fieldname:on:sortablelist-drop');\r\n            fetchMany([{\r\n                methodname: 'core_customfield_move_field',\r\n                args: {\r\n                    id: info.element.data('field-id'),\r\n                    beforeid: info.targetNextElement.data('field-id'),\r\n                    categoryid: Number(info.targetList.closest('[data-category-id]').attr('data-category-id'))\r\n                },\r\n            }])[0]\r\n            .then(pendingPromise.resolve)\r\n            .catch(Notification.exception);\r\n        }\r\n        evt.stopPropagation(); // Important for nested lists to prevent multiple targets.\r\n    });\r\n\r\n    jQuery('[data-field-name]').on(SortableList.EVENTS.DRAG, evt => {\r\n        var pendingPromise = new Pending('core_customfield/form:fieldname:on:sortablelist-drag');\r\n\r\n        evt.stopPropagation(); // Important for nested lists to prevent multiple targets.\r\n\r\n        // Refreshing fields tables.\r\n        Templates.render('core_customfield/nofields', {})\r\n        .then(html => {\r\n            rootNode.querySelectorAll('.categorieslist > *')\r\n            .forEach(category => {\r\n                const fields = category.querySelectorAll('.field:not(.sortable-list-is-dragged)');\r\n                const noFields = category.querySelector('.nofields');\r\n\r\n                if (!fields.length && !noFields) {\r\n                    category.querySelector('tbody').innerHTML = html;\r\n                } else if (fields.length && noFields) {\r\n                    noFields.remove();\r\n                }\r\n            });\r\n            return;\r\n        })\r\n        .then(pendingPromise.resolve)\r\n        .catch(Notification.exception);\r\n    });\r\n\r\n    jQuery('[data-category-id], [data-field-name]').on(SortableList.EVENTS.DRAGSTART, (evt, info) => {\r\n        setTimeout(() => {\r\n            jQuery('.sortable-list-is-dragged').width(info.element.width());\r\n        }, 501);\r\n    });\r\n};\r\n\r\n/**\r\n * Initialise the custom fields manager.\r\n */\r\nexport const init = () => {\r\n    const rootNode = document.querySelector('#customfield_catlist');\r\n\r\n    const component = rootNode.dataset.component;\r\n    const area = rootNode.dataset.area;\r\n    const itemid = rootNode.dataset.itemid;\r\n\r\n    rootNode.addEventListener('click', e => {\r\n        const roleHolder = e.target.closest('[data-role]');\r\n        if (!roleHolder) {\r\n            return;\r\n        }\r\n\r\n        if (roleHolder.dataset.role === 'deletefield') {\r\n            e.preventDefault();\r\n\r\n            confirmDelete(roleHolder.dataset.id, 'field', component, area, itemid);\r\n            return;\r\n        }\r\n\r\n        if (roleHolder.dataset.role === 'deletecategory') {\r\n            e.preventDefault();\r\n\r\n            confirmDelete(roleHolder.dataset.id, 'category', component, area, itemid);\r\n            return;\r\n        }\r\n\r\n        if (roleHolder.dataset.role === 'addnewcategory') {\r\n            e.preventDefault();\r\n            createNewCategory(component, area, itemid);\r\n\r\n            return;\r\n        }\r\n\r\n        if (roleHolder.dataset.role === 'addfield') {\r\n            e.preventDefault();\r\n            createNewField(roleHolder, component, area, itemid);\r\n\r\n            return;\r\n        }\r\n\r\n        if (roleHolder.dataset.role === 'editfield') {\r\n            e.preventDefault();\r\n            editField(roleHolder, component, area, itemid);\r\n\r\n            return;\r\n        }\r\n    });\r\n\r\n    setupSortableLists(rootNode, component, area, itemid);\r\n};\r\n"],"names":["confirmDelete","id","type","component","area","itemid","pendingPromise","Pending","then","strings","Notification","confirm","pendingDeletePromise","methodname","args","response","Templates","render","html","js","replaceNode","resolve","catch","exception","getCategoryNameFor","nodeElement","closest","find","attr","rootNode","document","querySelector","dataset","addEventListener","e","roleHolder","target","role","preventDefault","createNewCategory","element","returnFocus","form","ModalForm","formClass","categoryid","getAttribute","modalConfig","title","events","FORM_SUBMITTED","pendingCreatedPromise","window","location","reload","show","createNewField","editField","SortableList","moveHandlerSelector","getElementName","Promise","on","EVENTS","DROP","evt","info","positionChanged","data","beforeid","targetNextElement","stopPropagation","getDestinationName","parentElement","afterElement","length","Number","targetList","DRAG","querySelectorAll","forEach","category","fields","noFields","remove","innerHTML","DRAGSTART","setTimeout","width","setupSortableLists"],"mappings":"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"}