{"version":3,"file":"card_view.min.js","sources":["../../../src/local/editor/card_view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Report builder card view editor\r\n *\r\n * @module      core_reportbuilder/local/editor/card_view\r\n * @copyright   2021 Mikel Mart√≠n <mikel@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport DynamicForm from 'core_form/dynamicform';\r\nimport {add as addToast} from 'core/toast';\r\nimport {get_string as getString} from \"core/str\";\r\nimport {subscribe as subscribe} from 'core/pubsub';\r\nimport Notification from 'core/notification';\r\nimport * as reportEvents from 'core_reportbuilder/local/events';\r\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\r\n\r\nlet cardViewForm = null;\r\n\r\n/**\r\n * Initialise card view form, must be called on each init because the form container is re-created when switching editor modes\r\n */\r\nconst initCardViewForm = () => {\r\n    const cardViewFormContainer = document.querySelector(reportSelectors.regions.settingsCardView);\r\n    if (!cardViewFormContainer) {\r\n        return;\r\n    }\r\n    cardViewForm = new DynamicForm(cardViewFormContainer, '\\\\core_reportbuilder\\\\form\\\\card_view');\r\n\r\n    cardViewForm.addEventListener(cardViewForm.events.FORM_SUBMITTED, (event) => {\r\n        event.preventDefault();\r\n\r\n        getString('cardviewsettingssaved', 'core_reportbuilder')\r\n            .then(addToast)\r\n            .catch(Notification.exception);\r\n    });\r\n};\r\n\r\n/**\r\n * Initialise module\r\n *\r\n * @param {Boolean} initialized Ensure we only add our listeners once\r\n */\r\nexport const init = (initialized) => {\r\n    initCardViewForm();\r\n    if (initialized) {\r\n        return;\r\n    }\r\n\r\n    // Update form each time a column is added or removed to the custom report.\r\n    subscribe(reportEvents.publish.reportColumnsUpdated, () => {\r\n        const reportElement = document.querySelector(reportSelectors.regions.report);\r\n        cardViewForm.load({reportid: reportElement.dataset.reportId});\r\n    });\r\n};\r\n"],"names":["cardViewForm","initialized","cardViewFormContainer","document","querySelector","reportSelectors","regions","settingsCardView","DynamicForm","addEventListener","events","FORM_SUBMITTED","event","preventDefault","then","addToast","catch","Notification","exception","initCardViewForm","reportEvents","publish","reportColumnsUpdated","reportElement","report","load","reportid","dataset","reportId"],"mappings":"omDAiCIA,aAAe,mBA0BEC,cArBI,YACfC,sBAAwBC,SAASC,cAAcC,gBAAgBC,QAAQC,kBACxEL,wBAGLF,aAAe,IAAIQ,qBAAYN,sBAAuB,yCAEtDF,aAAaS,iBAAiBT,aAAaU,OAAOC,gBAAiBC,QAC/DA,MAAMC,qCAEI,wBAAyB,sBAC9BC,KAAKC,YACLC,MAAMC,sBAAaC,gBAU5BC,GACIlB,mCAKMmB,aAAaC,QAAQC,sBAAsB,WAC3CC,cAAgBpB,SAASC,cAAcC,gBAAgBC,QAAQkB,QACrExB,aAAayB,KAAK,CAACC,SAAUH,cAAcI,QAAQC"}