{"version":3,"file":"sorting.min.js","sources":["../../../src/local/editor/sorting.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Report builder columns sorting editor\r\n *\r\n * @module      core_reportbuilder/local/editor/sorting\r\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport $ from 'jquery';\r\nimport 'core/inplace_editable';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport {subscribe} from 'core/pubsub';\r\nimport SortableList from 'core/sortable_list';\r\nimport {get_string as getString} from 'core/str';\r\nimport {add as addToast} from 'core/toast';\r\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\r\nimport {reorderColumnSorting, toggleColumnSorting} from 'core_reportbuilder/local/repository/sorting';\r\nimport Templates from 'core/templates';\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\nimport * as reportEvents from 'core_reportbuilder/local/events';\r\n\r\n// These constants match PHP consts SORT_ASC, SORT_DESC.\r\nconst SORTORDER = {\r\n    ASCENDING: 4,\r\n    DESCENDING: 3,\r\n};\r\n\r\n/**\r\n * Reload sorting settings region\r\n *\r\n * @param {Object} context\r\n * @return {Promise}\r\n */\r\nconst reloadSettingsSortingRegion = context => {\r\n    const pendingPromise = new Pending('core_reportbuilder/sorting:reload');\r\n    const settingsSortingRegion = document.querySelector(reportSelectors.regions.settingsSorting);\r\n\r\n    return Templates.renderForPromise('core_reportbuilder/local/settings/sorting', {sorting: context})\r\n        .then(({html, js}) => {\r\n            Templates.replaceNode(settingsSortingRegion, html, js);\r\n            return pendingPromise.resolve();\r\n        });\r\n};\r\n\r\n/**\r\n * Updates column sorting\r\n *\r\n * @param {Element} reportElement\r\n * @param {Element} element\r\n * @param {Number} sortenabled\r\n * @param {Number} sortdirection\r\n * @return {Promise}\r\n */\r\nconst updateSorting = (reportElement, element, sortenabled, sortdirection) => {\r\n    const reportId = reportElement.dataset.reportId;\r\n    const listElement = element.closest('li');\r\n    const columnId = listElement.dataset.columnSortId;\r\n    const columnName = listElement.dataset.columnSortName;\r\n\r\n    return toggleColumnSorting(reportId, columnId, sortenabled, sortdirection)\r\n        .then(reloadSettingsSortingRegion)\r\n        .then(() => getString('columnsortupdated', 'core_reportbuilder', columnName))\r\n        .then(addToast)\r\n        .then(() => {\r\n            dispatchEvent(reportEvents.tableReload, {}, reportElement);\r\n            return null;\r\n        });\r\n};\r\n\r\n/**\r\n * Initialise module\r\n *\r\n * @param {Boolean} initialized Ensure we only add our listeners once\r\n */\r\nexport const init = (initialized) => {\r\n    if (initialized) {\r\n        return;\r\n    }\r\n\r\n    // Update sorting region each time report columns are updated (added or removed).\r\n    subscribe(reportEvents.publish.reportColumnsUpdated, data => reloadSettingsSortingRegion(data)\r\n        .catch(Notification.exception)\r\n    );\r\n\r\n    document.addEventListener('click', event => {\r\n\r\n        // Enable/disable sorting on columns.\r\n        const toggleSorting = event.target.closest(reportSelectors.actions.reportToggleColumnSort);\r\n        if (toggleSorting) {\r\n            event.preventDefault();\r\n\r\n            const pendingPromise = new Pending('core_reportbuilder/sorting:toggle');\r\n            const reportElement = toggleSorting.closest(reportSelectors.regions.report);\r\n            const sortdirection = parseInt(toggleSorting.closest('li').dataset.columnSortDirection);\r\n\r\n            updateSorting(reportElement, toggleSorting, toggleSorting.checked, sortdirection)\r\n                .then(() => {\r\n                    // Re-focus the toggle sorting element after reloading the region.\r\n                    const toggleSortingElement = document.getElementById(toggleSorting.id);\r\n                    toggleSortingElement?.focus();\r\n                    return pendingPromise.resolve();\r\n                })\r\n                .catch(Notification.exception);\r\n        }\r\n\r\n        // Change column sort direction.\r\n        const toggleSortDirection = event.target.closest(reportSelectors.actions.reportToggleColumnSortDirection);\r\n        if (toggleSortDirection) {\r\n            event.preventDefault();\r\n\r\n            const pendingPromise = new Pending('core_reportbuilder/sorting:direction');\r\n            const reportElement = toggleSortDirection.closest(reportSelectors.regions.report);\r\n            const listElement = toggleSortDirection.closest('li');\r\n            const toggleSorting = listElement.querySelector(reportSelectors.actions.reportToggleColumnSort);\r\n\r\n            let sortdirection = parseInt(listElement.dataset.columnSortDirection);\r\n            if (sortdirection === SORTORDER.ASCENDING) {\r\n                sortdirection = SORTORDER.DESCENDING;\r\n            } else if (sortdirection === SORTORDER.DESCENDING) {\r\n                sortdirection = SORTORDER.ASCENDING;\r\n            }\r\n\r\n            updateSorting(reportElement, toggleSortDirection, toggleSorting.checked, sortdirection)\r\n                .then(() => {\r\n                    // Re-focus the toggle sort direction element after reloading the region.\r\n                    const toggleSortDirectionElement = document.getElementById(toggleSortDirection.id);\r\n                    toggleSortDirectionElement?.focus();\r\n                    return pendingPromise.resolve();\r\n                })\r\n                .catch(Notification.exception);\r\n        }\r\n    });\r\n\r\n    // Initialize sortable list to handle column sorting moving (note JQuery dependency, see MDL-72293 for resolution).\r\n    var columnsSortingSortableList = new SortableList(`${reportSelectors.regions.settingsSorting} ul`, {isHorizontal: false});\r\n    columnsSortingSortableList.getElementName = element => Promise.resolve(element.data('columnSortName'));\r\n\r\n    $(document).on(SortableList.EVENTS.DROP, `${reportSelectors.regions.report} li[data-column-sort-id]`, (event, info) => {\r\n        if (info.positionChanged) {\r\n            const pendingPromise = new Pending('core_reportbuilder/sorting:reorder');\r\n            const reportElement = event.target.closest(reportSelectors.regions.report);\r\n            const columnId = info.element.data('columnSortId');\r\n            const columnPosition = info.element.data('columnSortPosition');\r\n\r\n            // Select target position, if moving to the end then count number of element siblings.\r\n            let targetColumnSortPosition = info.targetNextElement.data('columnSortPosition') || info.element.siblings().length + 2;\r\n            if (targetColumnSortPosition > columnPosition) {\r\n                targetColumnSortPosition--;\r\n            }\r\n\r\n            reorderColumnSorting(reportElement.dataset.reportId, columnId, targetColumnSortPosition)\r\n                .then(reloadSettingsSortingRegion)\r\n                .then(() => getString('columnsortupdated', 'core_reportbuilder', info.element.data('columnSortName')))\r\n                .then(addToast)\r\n                .then(() => {\r\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\r\n                    return null;\r\n                })\r\n                .then(() => pendingPromise.resolve())\r\n                .catch(Notification.exception);\r\n        }\r\n    });\r\n};\r\n"],"names":["SORTORDER","reloadSettingsSortingRegion","context","pendingPromise","Pending","settingsSortingRegion","document","querySelector","reportSelectors","regions","settingsSorting","Templates","renderForPromise","sorting","then","_ref","html","js","replaceNode","resolve","updateSorting","reportElement","element","sortenabled","sortdirection","reportId","dataset","listElement","closest","columnId","columnSortId","columnName","columnSortName","addToast","reportEvents","tableReload","initialized","publish","reportColumnsUpdated","data","catch","Notification","exception","addEventListener","event","toggleSorting","target","actions","reportToggleColumnSort","preventDefault","report","parseInt","columnSortDirection","checked","toggleSortingElement","getElementById","id","focus","toggleSortDirection","reportToggleColumnSortDirection","toggleSortDirectionElement","SortableList","isHorizontal","getElementName","Promise","on","EVENTS","DROP","info","positionChanged","columnPosition","targetColumnSortPosition","targetNextElement","siblings","length"],"mappings":"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"}