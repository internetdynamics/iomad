{"version":3,"file":"audience.min.js","sources":["../src/audience.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Report builder audiences\r\n *\r\n * @module      core_reportbuilder/audience\r\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport 'core/inplace_editable';\r\nimport Templates from 'core/templates';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {get_string as getString} from 'core/str';\r\nimport DynamicForm from 'core_form/dynamicform';\r\nimport {add as addToast} from 'core/toast';\r\nimport {deleteAudience} from 'core_reportbuilder/local/repository/audiences';\r\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\r\nimport {loadFragment} from 'core/fragment';\r\nimport {markFormAsDirty} from 'core_form/changechecker';\r\n\r\nlet reportId = 0;\r\nlet contextId = 0;\r\n\r\n/**\r\n * Add audience card\r\n *\r\n * @param {String} className\r\n * @param {String} title\r\n */\r\nconst addAudienceCard = (className, title) => {\r\n    const pendingPromise = new Pending('core_reportbuilder/audience:add');\r\n\r\n    const audiencesContainer = document.querySelector(reportSelectors.regions.audiencesContainer);\r\n    const audienceCardLength = audiencesContainer.querySelectorAll(reportSelectors.regions.audienceCard).length;\r\n\r\n    const params = {\r\n        classname: className,\r\n        reportid: reportId,\r\n        showormessage: (audienceCardLength > 0),\r\n        title: title,\r\n    };\r\n\r\n    // Load audience card fragment, render and then initialise the form within.\r\n    loadFragment('core_reportbuilder', 'audience_form', contextId, params)\r\n        .then((html, js) => {\r\n            const audienceCard = Templates.appendNodeContents(audiencesContainer, html, js)[0];\r\n            const audienceEmptyMessage = audiencesContainer.querySelector(reportSelectors.regions.audienceEmptyMessage);\r\n\r\n            const audienceForm = initAudienceCardForm(audienceCard);\r\n            // Mark as dirty new audience form created to prevent users leaving the page without saving it.\r\n            markFormAsDirty(audienceForm.getFormNode());\r\n            audienceEmptyMessage.classList.add('hidden');\r\n\r\n            return getString('audienceadded', 'core_reportbuilder', title);\r\n        })\r\n        .then(addToast)\r\n        .then(() => pendingPromise.resolve())\r\n        .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Edit audience card\r\n *\r\n * @param {Element} audienceCard\r\n */\r\nconst editAudienceCard = audienceCard => {\r\n    const pendingPromise = new Pending('core_reportbuilder/audience:edit');\r\n\r\n    // Load audience form with data for editing, then toggle visible controls in the card.\r\n    const audienceForm = initAudienceCardForm(audienceCard);\r\n    audienceForm.load({id: audienceCard.dataset.instanceid})\r\n        .then(() => {\r\n            const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\r\n            const audienceDescription = audienceCard.querySelector(reportSelectors.regions.audienceDescription);\r\n            const audienceEdit = audienceCard.querySelector(reportSelectors.actions.audienceEdit);\r\n\r\n            audienceFormContainer.classList.remove('hidden');\r\n            audienceDescription.classList.add('hidden');\r\n            audienceEdit.disabled = true;\r\n\r\n            return pendingPromise.resolve();\r\n        })\r\n        .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Initialise dynamic form within given audience card\r\n *\r\n * @param {Element} audienceCard\r\n * @return {DynamicForm}\r\n */\r\nconst initAudienceCardForm = audienceCard => {\r\n    const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\r\n    const audienceForm = new DynamicForm(audienceFormContainer, '\\\\core_reportbuilder\\\\form\\\\audience');\r\n\r\n    // After submitting the form, update the card instance and description properties.\r\n    audienceForm.addEventListener(audienceForm.events.FORM_SUBMITTED, data => {\r\n        const audienceHeading = audienceCard.querySelector(reportSelectors.regions.audienceHeading);\r\n        const audienceDescription = audienceCard.querySelector(reportSelectors.regions.audienceDescription);\r\n\r\n        audienceCard.dataset.instanceid = data.detail.instanceid;\r\n\r\n        audienceHeading.innerHTML = data.detail.heading;\r\n        audienceDescription.innerHTML = data.detail.description;\r\n\r\n        closeAudienceCardForm(audienceCard);\r\n\r\n        return getString('audiencesaved', 'core_reportbuilder')\r\n            .then(addToast);\r\n    });\r\n\r\n    // If cancelling the form, close the card or remove it if it was never created.\r\n    audienceForm.addEventListener(audienceForm.events.FORM_CANCELLED, () => {\r\n        if (audienceCard.dataset.instanceid > 0) {\r\n            closeAudienceCardForm(audienceCard);\r\n        } else {\r\n            removeAudienceCard(audienceCard);\r\n        }\r\n    });\r\n\r\n    return audienceForm;\r\n};\r\n\r\n/**\r\n * Delete audience card\r\n *\r\n * @param {Element} audienceDelete\r\n */\r\nconst deleteAudienceCard = audienceDelete => {\r\n    const audienceCard = audienceDelete.closest(reportSelectors.regions.audienceCard);\r\n    const audienceTitle = audienceCard.dataset.title;\r\n\r\n    Notification.saveCancelPromise(\r\n        getString('deleteaudience', 'core_reportbuilder', audienceTitle),\r\n        getString('deleteaudienceconfirm', 'core_reportbuilder', audienceTitle),\r\n        getString('delete', 'core'),\r\n        {triggerElement: audienceDelete}\r\n    ).then(() => {\r\n        const pendingPromise = new Pending('core_reportbuilder/audience:delete');\r\n\r\n        return deleteAudience(reportId, audienceCard.dataset.instanceid)\r\n            .then(() => addToast(getString('audiencedeleted', 'core_reportbuilder', audienceTitle)))\r\n            .then(() => {\r\n                removeAudienceCard(audienceCard);\r\n                return pendingPromise.resolve();\r\n            })\r\n            .catch(Notification.exception);\r\n    }).catch(() => {\r\n        return;\r\n    });\r\n};\r\n\r\n/**\r\n * Close audience card form\r\n *\r\n * @param {Element} audienceCard\r\n */\r\nconst closeAudienceCardForm = audienceCard => {\r\n    // Remove the [data-region=\"audience-form-container\"] (with all the event listeners attached to it), and create it again.\r\n    const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\r\n    const NewAudienceFormContainer = audienceFormContainer.cloneNode(false);\r\n    audienceCard.querySelector(reportSelectors.regions.audienceForm).replaceChild(NewAudienceFormContainer, audienceFormContainer);\r\n    // Show the description container and enable the action buttons.\r\n    audienceCard.querySelector(reportSelectors.regions.audienceDescription).classList.remove('hidden');\r\n    audienceCard.querySelector(reportSelectors.actions.audienceEdit).disabled = false;\r\n    audienceCard.querySelector(reportSelectors.actions.audienceDelete).disabled = false;\r\n};\r\n\r\n/**\r\n * Remove audience card\r\n *\r\n * @param {Element} audienceCard\r\n */\r\nconst removeAudienceCard = audienceCard => {\r\n    audienceCard.remove();\r\n\r\n    const audiencesContainer = document.querySelector(reportSelectors.regions.audiencesContainer);\r\n    const audienceCards = audiencesContainer.querySelectorAll(reportSelectors.regions.audienceCard);\r\n\r\n    // Show message if there are no cards remaining, ensure first card's separator is not present.\r\n    if (audienceCards.length === 0) {\r\n        const audienceEmptyMessage = document.querySelector(reportSelectors.regions.audienceEmptyMessage);\r\n        audienceEmptyMessage.classList.remove('hidden');\r\n    } else {\r\n        const audienceFirstCardSeparator = audienceCards[0].querySelector('.audience-separator');\r\n        audienceFirstCardSeparator?.remove();\r\n    }\r\n};\r\n\r\nlet initialized = false;\r\n\r\n/**\r\n * Initialise audiences tab.\r\n *\r\n * @param {Number} id\r\n * @param {Number} contextid\r\n */\r\nexport const init = (id, contextid) => {\r\n    prefetchStrings('core_reportbuilder', [\r\n        'audienceadded',\r\n        'audiencedeleted',\r\n        'audiencesaved',\r\n        'deleteaudience',\r\n        'deleteaudienceconfirm',\r\n    ]);\r\n\r\n    prefetchStrings('core', [\r\n        'delete',\r\n    ]);\r\n\r\n    reportId = id;\r\n    contextId = contextid;\r\n\r\n    if (initialized) {\r\n        // We already added the event listeners (can be called multiple times by mustache template).\r\n        return;\r\n    }\r\n\r\n    document.addEventListener('click', event => {\r\n\r\n        // Add instance.\r\n        const audienceAdd = event.target.closest(reportSelectors.actions.audienceAdd);\r\n        if (audienceAdd) {\r\n            event.preventDefault();\r\n            addAudienceCard(audienceAdd.dataset.uniqueIdentifier, audienceAdd.dataset.name);\r\n        }\r\n\r\n        // Edit instance.\r\n        const audienceEdit = event.target.closest(reportSelectors.actions.audienceEdit);\r\n        if (audienceEdit) {\r\n            const audienceEditCard = audienceEdit.closest(reportSelectors.regions.audienceCard);\r\n\r\n            event.preventDefault();\r\n            editAudienceCard(audienceEditCard);\r\n        }\r\n\r\n        // Delete instance.\r\n        const audienceDelete = event.target.closest(reportSelectors.actions.audienceDelete);\r\n        if (audienceDelete) {\r\n            event.preventDefault();\r\n            deleteAudienceCard(audienceDelete);\r\n        }\r\n    });\r\n\r\n    initialized = true;\r\n};\r\n"],"names":["reportId","contextId","initAudienceCardForm","audienceCard","audienceFormContainer","querySelector","reportSelectors","regions","audienceForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","data","audienceHeading","audienceDescription","dataset","instanceid","detail","innerHTML","heading","description","closeAudienceCardForm","then","addToast","FORM_CANCELLED","removeAudienceCard","NewAudienceFormContainer","cloneNode","replaceChild","classList","remove","actions","audienceEdit","disabled","audienceDelete","audienceCards","document","audiencesContainer","querySelectorAll","length","audienceEmptyMessage","audienceFirstCardSeparator","initialized","id","contextid","event","audienceAdd","target","closest","preventDefault","className","title","pendingPromise","Pending","audienceCardLength","params","classname","reportid","showormessage","html","js","Templates","appendNodeContents","getFormNode","add","resolve","catch","Notification","exception","addAudienceCard","uniqueIdentifier","name","audienceEditCard","load","editAudienceCard","audienceTitle","saveCancelPromise","triggerElement","deleteAudienceCard"],"mappings":"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"}