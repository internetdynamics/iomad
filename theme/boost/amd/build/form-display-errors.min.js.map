{"version":3,"file":"form-display-errors.min.js","sources":["../src/form-display-errors.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Custom form error event handler to manipulate the bootstrap markup and show\r\n * nicely styled errors in an mform.\r\n *\r\n * @module     theme_boost/form-display-errors\r\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core_form/events'], function($, FormEvent) {\r\n    return {\r\n        /**\r\n         * Enhance the supplied element to handle form field errors.\r\n         *\r\n         * @method\r\n         * @param {String} elementid\r\n         * @listens event:formFieldValidationFailed\r\n         */\r\n        enhance: function(elementid) {\r\n            var element = document.getElementById(elementid);\r\n            if (!element) {\r\n                // Some elements (e.g. static) don't have a form field.\r\n                // Hence there is no validation. So, no setup required here.\r\n                return;\r\n            }\r\n\r\n            element.addEventListener(FormEvent.eventTypes.formFieldValidationFailed, e => {\r\n                const msg = e.detail.message;\r\n                e.preventDefault();\r\n\r\n                var parent = $(element).closest('.form-group');\r\n                var feedback = parent.find('.form-control-feedback');\r\n                const feedbackId = feedback.attr('id');\r\n\r\n                // Get current aria-describedby value.\r\n                let describedBy = $(element).attr('aria-describedby');\r\n                if (typeof describedBy === \"undefined\") {\r\n                    describedBy = '';\r\n                }\r\n                // Split aria-describedby attribute into an array of IDs if necessary.\r\n                let describedByIds = [];\r\n                if (describedBy.length) {\r\n                    describedByIds = describedBy.split(\" \");\r\n                }\r\n                // Find the the feedback container in the aria-describedby attribute.\r\n                const feedbackIndex = describedByIds.indexOf(feedbackId);\r\n\r\n                // Sometimes (atto) we have a hidden textarea backed by a real contenteditable div.\r\n                if (($(element).prop(\"tagName\") == 'TEXTAREA') && parent.find('[contenteditable]').length > 0) {\r\n                    element = parent.find('[contenteditable]');\r\n                }\r\n                if (msg !== '') {\r\n                    parent.addClass('has-danger');\r\n                    parent.data('client-validation-error', true);\r\n                    $(element).addClass('is-invalid');\r\n                    // Append the feedback ID to the aria-describedby attribute if it doesn't exist yet.\r\n                    if (feedbackIndex === -1) {\r\n                        describedByIds.push(feedbackId);\r\n                        $(element).attr('aria-describedby', describedByIds.join(\" \"));\r\n                    }\r\n                    $(element).attr('aria-invalid', true);\r\n                    feedback.attr('tabindex', 0);\r\n                    feedback.html(msg);\r\n\r\n                    // Only display and focus when the error was not already visible.\r\n                    // This is so that, when tabbing around the form, you don't get stuck.\r\n                    if (!feedback.is(':visible')) {\r\n                        feedback.show();\r\n                        feedback.focus();\r\n                    }\r\n\r\n                } else {\r\n                    if (parent.data('client-validation-error') === true) {\r\n                        parent.removeClass('has-danger');\r\n                        parent.data('client-validation-error', false);\r\n                        $(element).removeClass('is-invalid');\r\n                        // If the aria-describedby attribute contains the error container's ID, remove it.\r\n                        if (feedbackIndex > -1) {\r\n                            describedByIds.splice(feedbackIndex, 1);\r\n                        }\r\n                        // Check the remaining element IDs in the aria-describedby attribute.\r\n                        if (describedByIds.length) {\r\n                            // If there's at least one, combine them with a blank space and update the aria-describedby attribute.\r\n                            describedBy = describedByIds.join(\" \");\r\n                            // Put back the new describedby attribute.\r\n                            $(element).attr('aria-describedby', describedBy);\r\n                        } else {\r\n                            // If there's none, remove the aria-describedby attribute.\r\n                            $(element).removeAttr('aria-describedby');\r\n                        }\r\n                        $(element).attr('aria-invalid', false);\r\n                        feedback.hide();\r\n                    }\r\n                }\r\n            });\r\n\r\n            var form = element.closest('form');\r\n            if (form && !('boostFormErrorsEnhanced' in form.dataset)) {\r\n                form.addEventListener('submit', function() {\r\n                    var visibleError = $('.form-control-feedback:visible');\r\n                    if (visibleError.length) {\r\n                        visibleError[0].focus();\r\n                    }\r\n                });\r\n                form.dataset.boostFormErrorsEnhanced = 1;\r\n            }\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","FormEvent","enhance","elementid","element","document","getElementById","addEventListener","eventTypes","formFieldValidationFailed","e","msg","detail","message","preventDefault","parent","closest","feedback","find","feedbackId","attr","describedBy","describedByIds","length","split","feedbackIndex","indexOf","prop","addClass","data","push","join","html","is","show","focus","removeClass","splice","removeAttr","hide","form","dataset","visibleError","boostFormErrorsEnhanced"],"mappings":";;;;;;;;AAuBAA,yCAAO,CAAC,SAAU,qBAAqB,SAASC,EAAGC,iBACxC,CAQHC,QAAS,SAASC,eACVC,QAAUC,SAASC,eAAeH,cACjCC,SAMLA,QAAQG,iBAAiBN,UAAUO,WAAWC,2BAA2BC,UAC/DC,IAAMD,EAAEE,OAAOC,QACrBH,EAAEI,qBAEEC,OAASf,EAAEI,SAASY,QAAQ,eAC5BC,SAAWF,OAAOG,KAAK,gCACrBC,WAAaF,SAASG,KAAK,UAG7BC,YAAcrB,EAAEI,SAASgB,KAAK,yBACP,IAAhBC,cACPA,YAAc,QAGdC,eAAiB,GACjBD,YAAYE,SACZD,eAAiBD,YAAYG,MAAM,YAGjCC,cAAgBH,eAAeI,QAAQP,YAGV,YAA9BnB,EAAEI,SAASuB,KAAK,YAA6BZ,OAAOG,KAAK,qBAAqBK,OAAS,IACxFnB,QAAUW,OAAOG,KAAK,sBAEd,KAARP,KACAI,OAAOa,SAAS,cAChBb,OAAOc,KAAK,2BAA2B,GACvC7B,EAAEI,SAASwB,SAAS,eAEG,IAAnBH,gBACAH,eAAeQ,KAAKX,YACpBnB,EAAEI,SAASgB,KAAK,mBAAoBE,eAAeS,KAAK,OAE5D/B,EAAEI,SAASgB,KAAK,gBAAgB,GAChCH,SAASG,KAAK,WAAY,GAC1BH,SAASe,KAAKrB,KAITM,SAASgB,GAAG,cACbhB,SAASiB,OACTjB,SAASkB,WAIkC,IAA3CpB,OAAOc,KAAK,6BACZd,OAAOqB,YAAY,cACnBrB,OAAOc,KAAK,2BAA2B,GACvC7B,EAAEI,SAASgC,YAAY,cAEnBX,eAAiB,GACjBH,eAAee,OAAOZ,cAAe,GAGrCH,eAAeC,QAEfF,YAAcC,eAAeS,KAAK,KAElC/B,EAAEI,SAASgB,KAAK,mBAAoBC,cAGpCrB,EAAEI,SAASkC,WAAW,oBAE1BtC,EAAEI,SAASgB,KAAK,gBAAgB,GAChCH,SAASsB,eAKjBC,KAAOpC,QAAQY,QAAQ,QACvBwB,QAAU,4BAA6BA,KAAKC,WAC5CD,KAAKjC,iBAAiB,UAAU,eACxBmC,aAAe1C,EAAE,kCACjB0C,aAAanB,QACbmB,aAAa,GAAGP,WAGxBK,KAAKC,QAAQE,wBAA0B"}