{"version":3,"file":"aria.min.js","sources":["../src/aria.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Enhancements to Bootstrap components for accessibility.\r\n *\r\n * @module     theme_iomadboost/aria\r\n * @copyright  2018 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport Pending from 'core/pending';\r\n\r\n/**\r\n * Drop downs from bootstrap don't support keyboard accessibility by default.\r\n */\r\nconst dropdownFix = () => {\r\n    let focusEnd = false;\r\n    const setFocusEnd = (end = true) => {\r\n        focusEnd = end;\r\n    };\r\n    const getFocusEnd = () => {\r\n        const result = focusEnd;\r\n        focusEnd = false;\r\n        return result;\r\n    };\r\n\r\n    // Special handling for navigation keys when menu is open.\r\n    const shiftFocus = element => {\r\n        const delayedFocus = pendingPromise => {\r\n            element.focus();\r\n            pendingPromise.resolve();\r\n        };\r\n        setTimeout(delayedFocus, 50, new Pending('core/aria:delayed-focus'));\r\n    };\r\n\r\n    // Event handling for the dropdown menu button.\r\n    const handleMenuButton = e => {\r\n        const trigger = e.key;\r\n        let fixFocus = false;\r\n\r\n        // Space key or Enter key opens the menu.\r\n        if (trigger === ' ' || trigger === 'Enter') {\r\n            fixFocus = true;\r\n            // Cancel random scroll.\r\n            e.preventDefault();\r\n            // Open the menu instead.\r\n            e.target.click();\r\n        }\r\n\r\n        // Up and Down keys also open the menu.\r\n        if (trigger === 'ArrowUp' || trigger === 'ArrowDown') {\r\n            fixFocus = true;\r\n        }\r\n\r\n        if (!fixFocus) {\r\n            // No need to fix the focus. Return early.\r\n            return;\r\n        }\r\n\r\n        // Fix the focus on the menu items when the menu is opened.\r\n        const menu = e.target.parentElement.querySelector('[role=\"menu\"]');\r\n        let menuItems = false;\r\n        let foundMenuItem = false;\r\n        let textInput = false;\r\n\r\n        if (menu) {\r\n            menuItems = menu.querySelectorAll('[role=\"menuitem\"]');\r\n            textInput = e.target.parentElement.querySelector('[data-action=\"search\"]');\r\n        }\r\n\r\n        if (menuItems && menuItems.length > 0) {\r\n            // Up key opens the menu at the end.\r\n            if (trigger === 'ArrowUp') {\r\n                setFocusEnd();\r\n            } else {\r\n                setFocusEnd(false);\r\n            }\r\n\r\n            if (getFocusEnd()) {\r\n                foundMenuItem = menuItems[menuItems.length - 1];\r\n            } else {\r\n                // The first menu entry, pretty reasonable.\r\n                foundMenuItem = menuItems[0];\r\n            }\r\n        }\r\n\r\n        if (textInput) {\r\n            shiftFocus(textInput);\r\n        }\r\n        if (foundMenuItem && textInput === null) {\r\n            shiftFocus(foundMenuItem);\r\n        }\r\n    };\r\n\r\n    // Search for menu items by finding the first item that has\r\n    // text starting with the typed character (case insensitive).\r\n    document.addEventListener('keypress', e => {\r\n        if (e.target.matches('.dropdown [role=\"menu\"] [role=\"menuitem\"]')) {\r\n            const menu = e.target.closest('[role=\"menu\"]');\r\n            if (!menu) {\r\n                return;\r\n            }\r\n            const menuItems = menu.querySelectorAll('[role=\"menuitem\"]');\r\n            if (!menuItems) {\r\n                return;\r\n            }\r\n\r\n            const trigger = e.key.toLowerCase();\r\n\r\n            for (let i = 0; i < menuItems.length; i++) {\r\n                const item = menuItems[i];\r\n                const itemText = item.text.trim().toLowerCase();\r\n                if (itemText.indexOf(trigger) == 0) {\r\n                    shiftFocus(item);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    // Keyboard navigation for arrow keys, home and end keys.\r\n    document.addEventListener('keydown', e => {\r\n\r\n        // We only want to set focus when users access the dropdown via keyboard as per\r\n        // guidelines defined in w3 aria practices 1.1 menu-button.\r\n        if (e.target.matches('[data-toggle=\"dropdown\"]')) {\r\n            handleMenuButton(e);\r\n        }\r\n\r\n        if (e.target.matches('.dropdown [role=\"menu\"] [role=\"menuitem\"]')) {\r\n            const trigger = e.key;\r\n            let next = false;\r\n            const menu = e.target.closest('[role=\"menu\"]');\r\n\r\n            if (!menu) {\r\n                return;\r\n            }\r\n            const menuItems = menu.querySelectorAll('[role=\"menuitem\"]');\r\n            if (!menuItems) {\r\n                return;\r\n            }\r\n            // Down key.\r\n            if (trigger == 'ArrowDown') {\r\n                for (let i = 0; i < menuItems.length - 1; i++) {\r\n                    if (menuItems[i] == e.target) {\r\n                        next = menuItems[i + 1];\r\n                        break;\r\n                    }\r\n                }\r\n                if (!next) {\r\n                    // Wrap to first item.\r\n                    next = menuItems[0];\r\n                }\r\n            } else if (trigger == 'ArrowUp') {\r\n                // Up key.\r\n                for (let i = 1; i < menuItems.length; i++) {\r\n                    if (menuItems[i] == e.target) {\r\n                        next = menuItems[i - 1];\r\n                        break;\r\n                    }\r\n                }\r\n                if (!next) {\r\n                    // Wrap to last item.\r\n                    next = menuItems[menuItems.length - 1];\r\n                }\r\n            } else if (trigger == 'Home') {\r\n                // Home key.\r\n                next = menuItems[0];\r\n\r\n            } else if (trigger == 'End') {\r\n                // End key.\r\n                next = menuItems[menuItems.length - 1];\r\n            }\r\n\r\n            // Variable next is set if we do want to act on the keypress.\r\n            if (next) {\r\n                e.preventDefault();\r\n                shiftFocus(next);\r\n            }\r\n            return;\r\n        }\r\n    });\r\n\r\n    $('.dropdown').on('hidden.bs.dropdown', e => {\r\n        // We need to focus on the menu trigger.\r\n        const trigger = e.target.querySelector('[data-toggle=\"dropdown\"]');\r\n        const focused = document.activeElement != document.body ? document.activeElement : null;\r\n        if (trigger && focused && e.target.contains(focused)) {\r\n            shiftFocus(trigger);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * A lot of Bootstrap's out of the box features don't work if dropdown items are not focusable.\r\n */\r\nconst comboboxFix = () => {\r\n    $(document).on('show.bs.dropdown', e => {\r\n        if (e.relatedTarget.matches('[role=\"combobox\"]')) {\r\n            const combobox = e.relatedTarget;\r\n            const listbox = document.querySelector(`#${combobox.getAttribute('aria-controls')}[role=\"listbox\"]`);\r\n\r\n            if (listbox) {\r\n                const selectedOption = listbox.querySelector('[role=\"option\"][aria-selected=\"true\"]');\r\n\r\n                // To make sure ArrowDown doesn't move the active option afterwards.\r\n                setTimeout(() => {\r\n                    if (selectedOption) {\r\n                        selectedOption.classList.add('active');\r\n                        combobox.setAttribute('aria-activedescendant', selectedOption.id);\r\n                    } else {\r\n                        const firstOption = listbox.querySelector('[role=\"option\"]');\r\n                        firstOption.setAttribute('aria-selected', 'true');\r\n                        firstOption.classList.add('active');\r\n                        combobox.setAttribute('aria-activedescendant', firstOption.id);\r\n                    }\r\n                }, 0);\r\n            }\r\n        }\r\n    });\r\n\r\n    $(document).on('hidden.bs.dropdown', e => {\r\n        if (e.relatedTarget.matches('[role=\"combobox\"]')) {\r\n            const combobox = e.relatedTarget;\r\n            const listbox = document.querySelector(`#${combobox.getAttribute('aria-controls')}[role=\"listbox\"]`);\r\n\r\n            combobox.removeAttribute('aria-activedescendant');\r\n\r\n            if (listbox) {\r\n                setTimeout(() => {\r\n                    // Undo all previously highlighted options.\r\n                    listbox.querySelectorAll('.active[role=\"option\"]').forEach(option => {\r\n                        option.classList.remove('active');\r\n                    });\r\n                }, 0);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Handling keyboard events for both navigating through and selecting options.\r\n    document.addEventListener('keydown', e => {\r\n        if (e.target.matches('[role=\"combobox\"][aria-controls]:not([aria-haspopup=dialog])')) {\r\n            const combobox = e.target;\r\n            const trigger = e.key;\r\n            let next = null;\r\n            const listbox = document.querySelector(`#${combobox.getAttribute('aria-controls')}[role=\"listbox\"]`);\r\n            const options = listbox.querySelectorAll('[role=\"option\"]');\r\n            const activeOption = listbox.querySelector('.active[role=\"option\"]');\r\n            const editable = combobox.hasAttribute('aria-autocomplete');\r\n\r\n            // Under the special case that the dropdown menu is being shown as a result of the key press (like when the user\r\n            // presses ArrowDown or Enter or ... to open the dropdown menu), activeOption is not set yet.\r\n            // It's because of a race condition with show.bs.dropdown event handler.\r\n            if (options && (activeOption || editable)) {\r\n                if (trigger == 'ArrowDown') {\r\n                    for (let i = 0; i < options.length - 1; i++) {\r\n                        if (options[i] == activeOption) {\r\n                            next = options[i + 1];\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (editable && !next) {\r\n                        next = options[0];\r\n                    }\r\n                } if (trigger == 'ArrowUp') {\r\n                    for (let i = 1; i < options.length; i++) {\r\n                        if (options[i] == activeOption) {\r\n                            next = options[i - 1];\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (editable && !next) {\r\n                        next = options[options.length - 1];\r\n                    }\r\n                } else if (trigger == 'Home') {\r\n                    next = options[0];\r\n                } else if (trigger == 'End') {\r\n                    next = options[options.length - 1];\r\n                } else if ((trigger == ' ' && !editable) || trigger == 'Enter') {\r\n                    e.preventDefault();\r\n                    selectOption(combobox, activeOption);\r\n                } else if (!editable) {\r\n                    // Search for options by finding the first option that has\r\n                    // text starting with the typed character (case insensitive).\r\n                    for (let i = 0; i < options.length; i++) {\r\n                        const option = options[i];\r\n                        const optionText = option.textContent.trim().toLowerCase();\r\n                        const keyPressed = e.key.toLowerCase();\r\n                        if (optionText.indexOf(keyPressed) == 0) {\r\n                            next = option;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Variable next is set if we do want to act on the keypress.\r\n                if (next) {\r\n                    e.preventDefault();\r\n                    if (activeOption) {\r\n                        activeOption.classList.remove('active');\r\n                    }\r\n                    next.classList.add('active');\r\n                    combobox.setAttribute('aria-activedescendant', next.id);\r\n                    next.scrollIntoView({block: 'nearest'});\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    document.addEventListener('click', e => {\r\n        const option = e.target.closest('[role=\"listbox\"] [role=\"option\"]');\r\n        if (option) {\r\n            const listbox = option.closest('[role=\"listbox\"]');\r\n            const combobox = document.querySelector(`[role=\"combobox\"][aria-controls=\"${listbox.id}\"]`);\r\n            if (combobox) {\r\n                combobox.focus();\r\n                selectOption(combobox, option);\r\n            }\r\n        }\r\n    });\r\n\r\n    // In case some code somewhere else changes the value of the combobox.\r\n    document.addEventListener('change', e => {\r\n        if (e.target.matches('input[type=\"hidden\"][id]')) {\r\n            const combobox = document.querySelector(`[role=\"combobox\"][data-input-element=\"${e.target.id}\"]`);\r\n            const option = e.target.parentElement.querySelector(`[role=\"option\"][data-value=\"${e.target.value}\"]`);\r\n\r\n            if (combobox && option) {\r\n                selectOption(combobox, option);\r\n            }\r\n        }\r\n    });\r\n\r\n    const selectOption = (combobox, option) => {\r\n        const listbox = option.closest('[role=\"listbox\"]');\r\n        const oldSelectedOption = listbox.querySelector('[role=\"option\"][aria-selected=\"true\"]');\r\n\r\n        if (oldSelectedOption != option) {\r\n            if (oldSelectedOption) {\r\n                oldSelectedOption.removeAttribute('aria-selected');\r\n            }\r\n            option.setAttribute('aria-selected', 'true');\r\n        }\r\n\r\n        if (combobox.hasAttribute('value')) {\r\n            combobox.value = option.textContent.replace(/[\\n\\r]+|[\\s]{2,}/g, ' ').trim();\r\n        } else {\r\n            combobox.textContent = option.textContent;\r\n        }\r\n\r\n        if (combobox.dataset.inputElement) {\r\n            const inputElement = document.getElementById(combobox.dataset.inputElement);\r\n            if (inputElement && (inputElement.value != option.dataset.value)) {\r\n                inputElement.value = option.dataset.value;\r\n                inputElement.dispatchEvent(new Event('change', {bubbles: true}));\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * After page load, focus on any element with special autofocus attribute.\r\n */\r\nconst autoFocus = () => {\r\n    window.addEventListener(\"load\", () => {\r\n        const alerts = document.querySelectorAll('[data-aria-autofocus=\"true\"][role=\"alert\"]');\r\n        Array.prototype.forEach.call(alerts, autofocusElement => {\r\n            // According to the specification an role=\"alert\" region is only read out on change to the content\r\n            // of that region.\r\n            autofocusElement.innerHTML += ' ';\r\n            autofocusElement.removeAttribute('data-aria-autofocus');\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Changes the focus to the correct tab based on the key that is pressed.\r\n * @param {KeyboardEvent} e\r\n */\r\nconst updateTabFocus = e => {\r\n    const tabList = e.target.closest('[role=\"tablist\"]');\r\n    const vertical = tabList.getAttribute('aria-orientation') == 'vertical';\r\n    const rtl = window.right_to_left();\r\n    const arrowNext = vertical ? 'ArrowDown' : (rtl ? 'ArrowLeft' : 'ArrowRight');\r\n    const arrowPrevious = vertical ? 'ArrowUp' : (rtl ? 'ArrowRight' : 'ArrowLeft');\r\n    const tabs = Array.prototype.filter.call(\r\n        tabList.querySelectorAll('[role=\"tab\"]'),\r\n        tab => !!tab.offsetHeight); // We only work with the visible tabs.\r\n\r\n    for (let i = 0; i < tabs.length; i++) {\r\n        tabs[i].index = i;\r\n    }\r\n\r\n    switch (e.key) {\r\n        case arrowNext:\r\n            e.preventDefault();\r\n            if (e.target.index !== undefined && tabs[e.target.index + 1]) {\r\n                tabs[e.target.index + 1].focus();\r\n            } else {\r\n                tabs[0].focus();\r\n            }\r\n            break;\r\n        case arrowPrevious:\r\n            e.preventDefault();\r\n            if (e.target.index !== undefined && tabs[e.target.index - 1]) {\r\n                tabs[e.target.index - 1].focus();\r\n            } else {\r\n                tabs[tabs.length - 1].focus();\r\n            }\r\n            break;\r\n        case 'Home':\r\n            e.preventDefault();\r\n            tabs[0].focus();\r\n            break;\r\n        case 'End':\r\n            e.preventDefault();\r\n            tabs[tabs.length - 1].focus();\r\n    }\r\n};\r\n\r\n/**\r\n * Fix accessibility issues regarding tab elements focus and their tab order in Bootstrap navs.\r\n */\r\nconst tabElementFix = () => {\r\n    document.addEventListener('keydown', e => {\r\n        if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Home', 'End'].includes(e.key)) {\r\n            if (e.target.matches('[role=\"tablist\"] [role=\"tab\"]')) {\r\n                updateTabFocus(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    document.addEventListener('click', e => {\r\n        if (e.target.matches('[role=\"tablist\"] [data-toggle=\"tab\"], [role=\"tablist\"] [data-toggle=\"pill\"]')) {\r\n            const tabs = e.target.closest('[role=\"tablist\"]').querySelectorAll('[data-toggle=\"tab\"], [data-toggle=\"pill\"]');\r\n            e.preventDefault();\r\n            $(e.target).tab('show');\r\n            tabs.forEach(tab => {\r\n                tab.tabIndex = -1;\r\n            });\r\n            e.target.tabIndex = 0;\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Fix keyboard interaction with Bootstrap Collapse elements.\r\n *\r\n * @see {@link https://www.w3.org/TR/wai-aria-practices-1.1/#disclosure|WAI-ARIA Authoring Practices 1.1 - Disclosure (Show/Hide)}\r\n */\r\nconst collapseFix = () => {\r\n    document.addEventListener('keydown', e => {\r\n        if (e.target.matches('[data-toggle=\"collapse\"]')) {\r\n            // Pressing space should toggle expand/collapse.\r\n            if (e.key === ' ') {\r\n                e.preventDefault();\r\n                e.target.click();\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nexport const init = () => {\r\n    dropdownFix();\r\n    comboboxFix();\r\n    autoFocus();\r\n    tabElementFix();\r\n    collapseFix();\r\n};\r\n"],"names":["dropdownFix","focusEnd","setFocusEnd","end","shiftFocus","element","setTimeout","pendingPromise","focus","resolve","Pending","handleMenuButton","e","trigger","key","fixFocus","preventDefault","target","click","menu","parentElement","querySelector","menuItems","foundMenuItem","textInput","querySelectorAll","length","result","getFocusEnd","document","addEventListener","matches","closest","toLowerCase","i","item","text","trim","indexOf","next","on","focused","activeElement","body","contains","tabElementFix","includes","tabList","vertical","getAttribute","rtl","window","right_to_left","arrowNext","arrowPrevious","tabs","Array","prototype","filter","call","tab","offsetHeight","index","undefined","updateTabFocus","forEach","tabIndex","relatedTarget","combobox","listbox","selectedOption","classList","add","setAttribute","id","firstOption","removeAttribute","option","remove","options","activeOption","editable","hasAttribute","selectOption","optionText","textContent","keyPressed","scrollIntoView","block","value","oldSelectedOption","replace","dataset","inputElement","getElementById","dispatchEvent","Event","bubbles","comboboxFix","alerts","autofocusElement","innerHTML"],"mappings":"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"}