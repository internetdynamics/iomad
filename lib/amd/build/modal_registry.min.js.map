{"version":3,"file":"modal_registry.min.js","sources":["../src/modal_registry.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A registry for the different types of modal.\r\n *\r\n * @module     core/modal_registry\r\n * @class      modal_registry\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['core/notification', 'core/prefetch'], function(Notification, Prefetch) {\r\n\r\n    // A singleton registry for all modules to access. Allows types to be\r\n    // added at runtime.\r\n    var registry = {};\r\n\r\n    /**\r\n     * Get a registered type of modal.\r\n     *\r\n     * @method get\r\n     * @param {string} type The type of modal to get\r\n     * @return {object} The registered config for the modal\r\n     */\r\n    var get = function(type) {\r\n        return registry[type];\r\n    };\r\n\r\n    /**\r\n     * Register a modal with the registry.\r\n     *\r\n     * @method register\r\n     * @param {string} type The type of modal (must be unique)\r\n     * @param {function} module The modal module (must be a constructor function of type core/modal)\r\n     * @param {string} template The template name of the modal\r\n     */\r\n    var register = function(type, module, template) {\r\n        if (get(type)) {\r\n            Notification.exception({message: \"Modal of  type '\" + type + \"' is already registered\"});\r\n        }\r\n\r\n        if (!module || typeof module !== 'function') {\r\n            Notification.exception({message: \"You must provide a modal module\"});\r\n        }\r\n\r\n        if (!template) {\r\n            Notification.exception({message: \"You must provide a modal template\"});\r\n        }\r\n\r\n        registry[type] = {\r\n            module: module,\r\n            template: template,\r\n        };\r\n\r\n        // Prefetch the template.\r\n        Prefetch.prefetchTemplate(template);\r\n    };\r\n\r\n    return {\r\n        register: register,\r\n        get: get,\r\n    };\r\n});\r\n"],"names":["define","Notification","Prefetch","registry","get","type","register","module","template","exception","message","prefetchTemplate"],"mappings":";;;;;;;;AAuBAA,6BAAO,CAAC,oBAAqB,kBAAkB,SAASC,aAAcC,cAI9DC,SAAW,GASXC,IAAM,SAASC,aACRF,SAASE,aAiCb,CACHC,SAvBW,SAASD,KAAME,OAAQC,UAC9BJ,IAAIC,OACJJ,aAAaQ,UAAU,CAACC,QAAS,mBAAqBL,KAAO,4BAG5DE,QAA4B,mBAAXA,QAClBN,aAAaQ,UAAU,CAACC,QAAS,oCAGhCF,UACDP,aAAaQ,UAAU,CAACC,QAAS,sCAGrCP,SAASE,MAAQ,CACbE,OAAQA,OACRC,SAAUA,UAIdN,SAASS,iBAAiBH,WAK1BJ,IAAKA"}