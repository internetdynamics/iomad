{"version":3,"file":"form-autocomplete.min.js","sources":["../src/form-autocomplete.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Autocomplete wrapper for select2 library.\r\n *\r\n * @module     core/form-autocomplete\r\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/log',\r\n    'core/str',\r\n    'core/templates',\r\n    'core/notification',\r\n    'core/loadingicon',\r\n    'core/aria',\r\n    'core_form/changechecker',\r\n], function(\r\n    $,\r\n    log,\r\n    str,\r\n    templates,\r\n    notification,\r\n    LoadingIcon,\r\n    Aria,\r\n    FormChangeChecker\r\n) {\r\n    // Private functions and variables.\r\n    /** @var {Object} KEYS - List of keycode constants. */\r\n    var KEYS = {\r\n        DOWN: 40,\r\n        ENTER: 13,\r\n        SPACE: 32,\r\n        ESCAPE: 27,\r\n        COMMA: 44,\r\n        UP: 38,\r\n        LEFT: 37,\r\n        RIGHT: 39\r\n    };\r\n\r\n    var uniqueId = Date.now();\r\n\r\n    /**\r\n     * Make an item in the selection list \"active\".\r\n     *\r\n     * @method activateSelection\r\n     * @private\r\n     * @param {Number} index The index in the current (visible) list of selection.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @return {Promise}\r\n     */\r\n    var activateSelection = function(index, state) {\r\n        // Find the elements in the DOM.\r\n        var selectionElement = $(document.getElementById(state.selectionId));\r\n\r\n        // Count the visible items.\r\n        var length = selectionElement.children('[aria-selected=true]').length;\r\n        // Limit the index to the upper/lower bounds of the list (wrap in both directions).\r\n        index = index % length;\r\n        while (index < 0) {\r\n            index += length;\r\n        }\r\n        // Find the specified element.\r\n        var element = $(selectionElement.children('[aria-selected=true]').get(index));\r\n        // Create an id we can assign to this element.\r\n        var itemId = state.selectionId + '-' + index;\r\n\r\n        // Deselect all the selections.\r\n        selectionElement.children().attr('data-active-selection', null).attr('id', '');\r\n\r\n        // Select only this suggestion and assign it the id.\r\n        element.attr('data-active-selection', true).attr('id', itemId);\r\n\r\n        // Tell the input field it has a new active descendant so the item is announced.\r\n        selectionElement.attr('aria-activedescendant', itemId);\r\n        selectionElement.attr('data-active-value', element.attr('data-value'));\r\n\r\n        return $.Deferred().resolve();\r\n    };\r\n\r\n    /**\r\n     * Get the actively selected element from the state object.\r\n     *\r\n     * @param   {Object} state\r\n     * @returns {jQuery}\r\n     */\r\n    var getActiveElementFromState = function(state) {\r\n        var selectionRegion = $(document.getElementById(state.selectionId));\r\n        var activeId = selectionRegion.attr('aria-activedescendant');\r\n\r\n        if (activeId) {\r\n            var activeElement = $(document.getElementById(activeId));\r\n            if (activeElement.length) {\r\n                // The active descendent still exists.\r\n                return activeElement;\r\n            }\r\n        }\r\n\r\n        // Ensure we are creating a properly formed selector based on the active value.\r\n        var activeValue = selectionRegion.attr('data-active-value')?.replace(/\"/g, '\\\\\"');\r\n        return selectionRegion.find('[data-value=\"' + activeValue + '\"]');\r\n    };\r\n\r\n    /**\r\n     * Update the active selection from the given state object.\r\n     *\r\n     * @param   {Object} state\r\n     */\r\n    var updateActiveSelectionFromState = function(state) {\r\n        var activeElement = getActiveElementFromState(state);\r\n        var activeValue = activeElement.attr('data-value');\r\n\r\n        var selectionRegion = $(document.getElementById(state.selectionId));\r\n        if (activeValue) {\r\n            // Find the index of the currently selected index.\r\n            var activeIndex = selectionRegion.find('[aria-selected=true]').index(activeElement);\r\n\r\n            if (activeIndex !== -1) {\r\n                activateSelection(activeIndex, state);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Either the active index was not set, or it could not be found.\r\n        // Select the first value instead.\r\n        activateSelection(0, state);\r\n    };\r\n\r\n    /**\r\n     * Update the element that shows the currently selected items.\r\n     *\r\n     * @method updateSelectionList\r\n     * @private\r\n     * @param {Object} options Original options for this autocomplete element.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @return {Promise}\r\n     */\r\n    var updateSelectionList = function(options, state, originalSelect) {\r\n        var pendingKey = 'form-autocomplete-updateSelectionList-' + state.inputId;\r\n        M.util.js_pending(pendingKey);\r\n\r\n        // Build up a valid context to re-render the template.\r\n        var items = [];\r\n        var newSelection = $(document.getElementById(state.selectionId));\r\n        originalSelect.children('option').each(function(index, ele) {\r\n            if ($(ele).prop('selected')) {\r\n                var label;\r\n                if ($(ele).data('html')) {\r\n                    label = $(ele).data('html');\r\n                } else {\r\n                    label = $(ele).html();\r\n                }\r\n                if (label !== '') {\r\n                    items.push({label: label, value: $(ele).attr('value')});\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!hasItemListChanged(state, items)) {\r\n            M.util.js_complete(pendingKey);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        state.items = items;\r\n\r\n        var context = $.extend(options, state);\r\n        // Render the template.\r\n        return templates.render(options.templates.items, context)\r\n        .then(function(html, js) {\r\n            // Add it to the page.\r\n            templates.replaceNodeContents(newSelection, html, js);\r\n\r\n            updateActiveSelectionFromState(state);\r\n\r\n            return;\r\n        })\r\n        .then(function() {\r\n            return M.util.js_complete(pendingKey);\r\n        })\r\n        .catch(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Check whether the list of items stored in the state has changed.\r\n     *\r\n     * @param   {Object} state\r\n     * @param   {Array} items\r\n     * @returns {Boolean}\r\n     */\r\n    var hasItemListChanged = function(state, items) {\r\n        if (state.items.length !== items.length) {\r\n            return true;\r\n        }\r\n\r\n        // Check for any items in the state items which are not present in the new items list.\r\n        return state.items.filter(item => items.indexOf(item) === -1).length > 0;\r\n    };\r\n\r\n    /**\r\n     * Notify of a change in the selection.\r\n     *\r\n     * @param {jQuery} originalSelect The jQuery object matching the hidden select list.\r\n     */\r\n    var notifyChange = function(originalSelect) {\r\n        FormChangeChecker.markFormChangedFromNode(originalSelect[0]);\r\n\r\n        // Note, jQuery .change() was not working here. Better to\r\n        // use plain JavaScript anyway.\r\n        originalSelect[0].dispatchEvent(new Event('change'));\r\n    };\r\n\r\n    /**\r\n     * Remove the given item from the list of selected things.\r\n     *\r\n     * @method deselectItem\r\n     * @private\r\n     * @param {Object} options Original options for this autocomplete element.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @param {Element} item The item to be deselected.\r\n     * @param {Element} originalSelect The original select list.\r\n     * @return {Promise}\r\n     */\r\n    var deselectItem = function(options, state, item, originalSelect) {\r\n        var selectedItemValue = $(item).attr('data-value');\r\n\r\n        // Preprend an empty option to the select list to avoid having a default selected option.\r\n        originalSelect.prepend($('<option>'));\r\n\r\n        // Look for a match, and toggle the selected property if there is a match.\r\n        originalSelect.children('option').each(function(index, ele) {\r\n            if ($(ele).attr('value') == selectedItemValue) {\r\n                $(ele).prop('selected', false);\r\n                // We remove newly created custom tags from the suggestions list when they are deselected.\r\n                if ($(ele).attr('data-iscustom')) {\r\n                    $(ele).remove();\r\n                }\r\n            }\r\n        });\r\n        // Rerender the selection list.\r\n        return updateSelectionList(options, state, originalSelect)\r\n        .then(function() {\r\n            // Notify that the selection changed.\r\n            notifyChange(originalSelect);\r\n\r\n            return;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Make an item in the suggestions \"active\" (about to be selected).\r\n     *\r\n     * @method activateItem\r\n     * @private\r\n     * @param {Number} index The index in the current (visible) list of suggestions.\r\n     * @param {Object} state State variables for this instance of autocomplete.\r\n     * @return {Promise}\r\n     */\r\n    var activateItem = function(index, state) {\r\n        // Find the elements in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n        // Count the visible items.\r\n        var length = suggestionsElement.children(':not([aria-hidden])').length;\r\n        // Limit the index to the upper/lower bounds of the list (wrap in both directions).\r\n        index = index % length;\r\n        while (index < 0) {\r\n            index += length;\r\n        }\r\n        // Find the specified element.\r\n        var element = $(suggestionsElement.children(':not([aria-hidden])').get(index));\r\n        // Find the index of this item in the full list of suggestions (including hidden).\r\n        var globalIndex = $(suggestionsElement.children('[role=option]')).index(element);\r\n        // Create an id we can assign to this element.\r\n        var itemId = state.suggestionsId + '-' + globalIndex;\r\n\r\n        // Deselect all the suggestions.\r\n        suggestionsElement.children().attr('aria-selected', false).attr('id', '');\r\n        // Select only this suggestion and assign it the id.\r\n        element.attr('aria-selected', true).attr('id', itemId);\r\n        // Tell the input field it has a new active descendant so the item is announced.\r\n        inputElement.attr('aria-activedescendant', itemId);\r\n\r\n        // Scroll it into view.\r\n        var scrollPos = element.offset().top\r\n                       - suggestionsElement.offset().top\r\n                       + suggestionsElement.scrollTop()\r\n                       - (suggestionsElement.height() / 2);\r\n        return suggestionsElement.animate({\r\n            scrollTop: scrollPos\r\n        }, 100).promise();\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active suggestion, and activate the next one.\r\n     *\r\n     * @method activateNextItem\r\n     * @private\r\n     * @param {Object} state State variable for this auto complete element.\r\n     * @return {Promise}\r\n     */\r\n    var activateNextItem = function(state) {\r\n        // Find the list of suggestions.\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n        // Find the active one.\r\n        var element = suggestionsElement.children('[aria-selected=true]');\r\n        // Find it's index.\r\n        var current = suggestionsElement.children(':not([aria-hidden])').index(element);\r\n        // Activate the next one.\r\n        return activateItem(current + 1, state);\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active selection, and activate the previous one.\r\n     *\r\n     * @method activatePreviousSelection\r\n     * @private\r\n     * @param {Object} state State variables for this instance of autocomplete.\r\n     * @return {Promise}\r\n     */\r\n    var activatePreviousSelection = function(state) {\r\n        // Find the list of selections.\r\n        var selectionsElement = $(document.getElementById(state.selectionId));\r\n        // Find the active one.\r\n        var element = selectionsElement.children('[data-active-selection]');\r\n        if (!element) {\r\n            return activateSelection(0, state);\r\n        }\r\n        // Find it's index.\r\n        var current = selectionsElement.children('[aria-selected=true]').index(element);\r\n        // Activate the next one.\r\n        return activateSelection(current - 1, state);\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active selection, and activate the next one.\r\n     *\r\n     * @method activateNextSelection\r\n     * @private\r\n     * @param {Object} state State variables for this instance of autocomplete.\r\n     * @return {Promise}\r\n     */\r\n    var activateNextSelection = function(state) {\r\n        // Find the list of selections.\r\n        var selectionsElement = $(document.getElementById(state.selectionId));\r\n\r\n        // Find the active one.\r\n        var element = selectionsElement.children('[data-active-selection]');\r\n        var current = 0;\r\n\r\n        if (element) {\r\n            // The element was found. Determine the index and move to the next one.\r\n            current = selectionsElement.children('[aria-selected=true]').index(element);\r\n            current = current + 1;\r\n        } else {\r\n            // No selected item found. Move to the first.\r\n            current = 0;\r\n        }\r\n\r\n        return activateSelection(current, state);\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active suggestion, and activate the previous one.\r\n     *\r\n     * @method activatePreviousItem\r\n     * @private\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @return {Promise}\r\n     */\r\n    var activatePreviousItem = function(state) {\r\n        // Find the list of suggestions.\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n        // Find the active one.\r\n        var element = suggestionsElement.children('[aria-selected=true]');\r\n\r\n        // Find it's index.\r\n        var current = suggestionsElement.children(':not([aria-hidden])').index(element);\r\n\r\n        // Activate the previous one.\r\n        return activateItem(current - 1, state);\r\n    };\r\n\r\n    /**\r\n     * Close the list of suggestions.\r\n     *\r\n     * @method closeSuggestions\r\n     * @private\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @return {Promise}\r\n     */\r\n    var closeSuggestions = function(state) {\r\n        // Find the elements in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n        if (inputElement.attr('aria-expanded') === \"true\") {\r\n            // Announce the list of suggestions was closed.\r\n            inputElement.attr('aria-expanded', false);\r\n        }\r\n        // Read the current list of selections.\r\n        inputElement.attr('aria-activedescendant', state.selectionId);\r\n\r\n        // Hide the suggestions list (from screen readers too).\r\n        Aria.hide(suggestionsElement.get());\r\n        suggestionsElement.hide();\r\n\r\n        return $.Deferred().resolve();\r\n    };\r\n\r\n    /**\r\n     * Rebuild the list of suggestions based on the current values in the select list, and the query.\r\n     *\r\n     * @method updateSuggestions\r\n     * @private\r\n     * @param {Object} options The original options for this autocomplete.\r\n     * @param {Object} state The state variables for this autocomplete.\r\n     * @param {String} query The current text for the search string.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @return {Promise}\r\n     */\r\n    var updateSuggestions = function(options, state, query, originalSelect) {\r\n        var pendingKey = 'form-autocomplete-updateSuggestions-' + state.inputId;\r\n        M.util.js_pending(pendingKey);\r\n\r\n        // Find the elements in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n        // Used to track if we found any visible suggestions.\r\n        var matchingElements = false;\r\n        // Options is used by the context when rendering the suggestions from a template.\r\n        var suggestions = [];\r\n        originalSelect.children('option').each(function(index, option) {\r\n            if ($(option).prop('selected') !== true) {\r\n                suggestions[suggestions.length] = {label: option.innerHTML, value: $(option).attr('value')};\r\n            }\r\n        });\r\n\r\n        // Re-render the list of suggestions.\r\n        var searchquery = state.caseSensitive ? query : query.toLocaleLowerCase();\r\n        var context = $.extend({options: suggestions}, options, state);\r\n        var returnVal = templates.render(\r\n            'core/form_autocomplete_suggestions',\r\n            context\r\n        )\r\n        .then(function(html, js) {\r\n            // We have the new template, insert it in the page.\r\n            templates.replaceNode(suggestionsElement, html, js);\r\n\r\n            // Get the element again.\r\n            suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n            // Show it if it is hidden.\r\n            Aria.unhide(suggestionsElement.get());\r\n            suggestionsElement.show();\r\n\r\n            // For each option in the list, hide it if it doesn't match the query.\r\n            suggestionsElement.children().each(function(index, node) {\r\n                node = $(node);\r\n                if ((options.caseSensitive && node.text().indexOf(searchquery) > -1) ||\r\n                        (!options.caseSensitive && node.text().toLocaleLowerCase().indexOf(searchquery) > -1)) {\r\n                    Aria.unhide(node.get());\r\n                    node.show();\r\n                    matchingElements = true;\r\n                } else {\r\n                    node.hide();\r\n                    Aria.hide(node.get());\r\n                }\r\n            });\r\n            // If we found any matches, show the list.\r\n            inputElement.attr('aria-expanded', true);\r\n            if (originalSelect.attr('data-notice')) {\r\n                // Display a notice rather than actual suggestions.\r\n                suggestionsElement.html(originalSelect.attr('data-notice'));\r\n            } else if (matchingElements) {\r\n                // We only activate the first item in the list if tags is false,\r\n                // because otherwise \"Enter\" would select the first item, instead of\r\n                // creating a new tag.\r\n                if (!options.tags) {\r\n                    activateItem(0, state);\r\n                }\r\n            } else {\r\n                // Nothing matches. Tell them that.\r\n                str.get_string('nosuggestions', 'form').done(function(nosuggestionsstr) {\r\n                    suggestionsElement.html(nosuggestionsstr);\r\n                });\r\n            }\r\n\r\n            return suggestionsElement;\r\n        })\r\n        .then(function() {\r\n            return M.util.js_complete(pendingKey);\r\n        })\r\n        .catch(notification.exception);\r\n\r\n        return returnVal;\r\n    };\r\n\r\n    /**\r\n     * Create a new item for the list (a tag).\r\n     *\r\n     * @method createItem\r\n     * @private\r\n     * @param {Object} options The original options for the autocomplete.\r\n     * @param {Object} state State variables for the autocomplete.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @return {Promise}\r\n     */\r\n    var createItem = function(options, state, originalSelect) {\r\n        // Find the element in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        // Get the current text in the input field.\r\n        var query = inputElement.val();\r\n        var tags = query.split(',');\r\n        var found = false;\r\n\r\n        $.each(tags, function(tagindex, tag) {\r\n            // If we can only select one at a time, deselect any current value.\r\n            tag = tag.trim();\r\n            if (tag !== '') {\r\n                if (!options.multiple) {\r\n                    originalSelect.children('option').prop('selected', false);\r\n                }\r\n                // Look for an existing option in the select list that matches this new tag.\r\n                originalSelect.children('option').each(function(index, ele) {\r\n                    if ($(ele).attr('value') == tag) {\r\n                        found = true;\r\n                        $(ele).prop('selected', true);\r\n                    }\r\n                });\r\n                // Only create the item if it's new.\r\n                if (!found) {\r\n                    var option = $('<option>');\r\n                    option.append(document.createTextNode(tag));\r\n                    option.attr('value', tag);\r\n                    originalSelect.append(option);\r\n                    option.prop('selected', true);\r\n                    // We mark newly created custom options as we handle them differently if they are \"deselected\".\r\n                    option.attr('data-iscustom', true);\r\n                }\r\n            }\r\n        });\r\n\r\n        return updateSelectionList(options, state, originalSelect)\r\n        .then(function() {\r\n            // Notify that the selection changed.\r\n            notifyChange(originalSelect);\r\n\r\n            return;\r\n        })\r\n        .then(function() {\r\n            // Clear the input field.\r\n            inputElement.val('');\r\n\r\n            return;\r\n        })\r\n        .then(function() {\r\n            // Close the suggestions list.\r\n            return closeSuggestions(state);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Select the currently active item from the suggestions list.\r\n     *\r\n     * @method selectCurrentItem\r\n     * @private\r\n     * @param {Object} options The original options for the autocomplete.\r\n     * @param {Object} state State variables for the autocomplete.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @return {Promise}\r\n     */\r\n    var selectCurrentItem = function(options, state, originalSelect) {\r\n        // Find the elements in the page.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n        // Here loop through suggestions and set val to join of all selected items.\r\n\r\n        var selectedItemValue = suggestionsElement.children('[aria-selected=true]').attr('data-value');\r\n        // The select will either be a single or multi select, so the following will either\r\n        // select one or more items correctly.\r\n        // Take care to use 'prop' and not 'attr' for selected properties.\r\n        // If only one can be selected at a time, start by deselecting everything.\r\n        if (!options.multiple) {\r\n            originalSelect.children('option').prop('selected', false);\r\n        }\r\n        // Look for a match, and toggle the selected property if there is a match.\r\n        originalSelect.children('option').each(function(index, ele) {\r\n            if ($(ele).attr('value') == selectedItemValue) {\r\n                $(ele).prop('selected', true);\r\n            }\r\n        });\r\n\r\n        return updateSelectionList(options, state, originalSelect)\r\n        .then(function() {\r\n            // Notify that the selection changed.\r\n            notifyChange(originalSelect);\r\n\r\n            return;\r\n        })\r\n        .then(function() {\r\n            if (options.closeSuggestionsOnSelect) {\r\n                // Clear the input element.\r\n                inputElement.val('');\r\n                // Close the list of suggestions.\r\n                return closeSuggestions(state);\r\n            } else {\r\n                // Focus on the input element so the suggestions does not auto-close.\r\n                inputElement.focus();\r\n                // Remove the last selected item from the suggestions list.\r\n                return updateSuggestions(options, state, inputElement.val(), originalSelect);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Fetch a new list of options via ajax.\r\n     *\r\n     * @method updateAjax\r\n     * @private\r\n     * @param {Event} e The event that triggered this update.\r\n     * @param {Object} options The original options for the autocomplete.\r\n     * @param {Object} state The state variables for the autocomplete.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @param {Object} ajaxHandler This is a module that does the ajax fetch and translates the results.\r\n     * @return {Promise}\r\n     */\r\n    var updateAjax = function(e, options, state, originalSelect, ajaxHandler) {\r\n        var pendingPromise = addPendingJSPromise('updateAjax');\r\n        // We need to show the indicator outside of the hidden select list.\r\n        // So we get the parent id of the hidden select list.\r\n        var parentElement = $(document.getElementById(state.selectId)).parent();\r\n        LoadingIcon.addIconToContainerRemoveOnCompletion(parentElement, pendingPromise);\r\n\r\n        // Get the query to pass to the ajax function.\r\n        var query = $(e.currentTarget).val();\r\n        // Call the transport function to do the ajax (name taken from Select2).\r\n        ajaxHandler.transport(options.selector, query, function(results) {\r\n            // We got a result - pass it through the translator before using it.\r\n            var processedResults = ajaxHandler.processResults(options.selector, results);\r\n            var existingValues = [];\r\n\r\n            // Now destroy all options that are not current\r\n            originalSelect.children('option').each(function(optionIndex, option) {\r\n                option = $(option);\r\n                if (!option.prop('selected')) {\r\n                    option.remove();\r\n                } else {\r\n                    existingValues.push(String(option.attr('value')));\r\n                }\r\n            });\r\n\r\n            if (!options.multiple && originalSelect.children('option').length === 0) {\r\n                // If this is a single select - and there are no current options\r\n                // the first option added will be selected by the browser. This causes a bug!\r\n                // We need to insert an empty option so that none of the real options are selected.\r\n                var option = $('<option>');\r\n                originalSelect.append(option);\r\n            }\r\n            if ($.isArray(processedResults)) {\r\n                // Add all the new ones returned from ajax.\r\n                $.each(processedResults, function(resultIndex, result) {\r\n                    if (existingValues.indexOf(String(result.value)) === -1) {\r\n                        var option = $('<option>');\r\n                        option.append(result.label);\r\n                        option.attr('value', result.value);\r\n                        originalSelect.append(option);\r\n                    }\r\n                });\r\n                originalSelect.attr('data-notice', '');\r\n            } else {\r\n                // The AJAX handler returned a string instead of the array.\r\n                originalSelect.attr('data-notice', processedResults);\r\n            }\r\n            // Update the list of suggestions now from the new values in the select list.\r\n            pendingPromise.resolve(updateSuggestions(options, state, '', originalSelect));\r\n        }, function(error) {\r\n            pendingPromise.reject(error);\r\n        });\r\n\r\n        return pendingPromise;\r\n    };\r\n\r\n    /**\r\n     * Add all the event listeners required for keyboard nav, blur clicks etc.\r\n     *\r\n     * @method addNavigation\r\n     * @private\r\n     * @param {Object} options The options used to create this autocomplete element.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     */\r\n    var addNavigation = function(options, state, originalSelect) {\r\n        // Start with the input element.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        // Add keyboard nav with keydown.\r\n        inputElement.on('keydown', function(e) {\r\n            var pendingJsPromise = addPendingJSPromise('addNavigation-' + state.inputId + '-' + e.keyCode);\r\n\r\n            switch (e.keyCode) {\r\n                case KEYS.DOWN:\r\n                    // If the suggestion list is open, move to the next item.\r\n                    if (!options.showSuggestions) {\r\n                        // Do not consume this event.\r\n                        pendingJsPromise.resolve();\r\n                        return true;\r\n                    } else if (inputElement.attr('aria-expanded') === \"true\") {\r\n                        pendingJsPromise.resolve(activateNextItem(state));\r\n                    } else {\r\n                        // Handle ajax population of suggestions.\r\n                        if (!inputElement.val() && options.ajax) {\r\n                            require([options.ajax], function(ajaxHandler) {\r\n                                pendingJsPromise.resolve(updateAjax(e, options, state, originalSelect, ajaxHandler));\r\n                            });\r\n                        } else {\r\n                            // Open the suggestions list.\r\n                            pendingJsPromise.resolve(updateSuggestions(options, state, inputElement.val(), originalSelect));\r\n                        }\r\n                    }\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n                case KEYS.UP:\r\n                    // Choose the previous active item.\r\n                    pendingJsPromise.resolve(activatePreviousItem(state));\r\n\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n                case KEYS.ENTER:\r\n                    var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n                    if ((inputElement.attr('aria-expanded') === \"true\") &&\r\n                            (suggestionsElement.children('[aria-selected=true]').length > 0)) {\r\n                        // If the suggestion list has an active item, select it.\r\n                        pendingJsPromise.resolve(selectCurrentItem(options, state, originalSelect));\r\n                    } else if (options.tags) {\r\n                        // If tags are enabled, create a tag.\r\n                        pendingJsPromise.resolve(createItem(options, state, originalSelect));\r\n                    } else {\r\n                        pendingJsPromise.resolve();\r\n                    }\r\n\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n                case KEYS.ESCAPE:\r\n                    if (inputElement.attr('aria-expanded') === \"true\") {\r\n                        // If the suggestion list is open, close it.\r\n                        pendingJsPromise.resolve(closeSuggestions(state));\r\n                    } else {\r\n                        pendingJsPromise.resolve();\r\n                    }\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n            }\r\n            pendingJsPromise.resolve();\r\n            return true;\r\n        });\r\n        // Support multi lingual COMMA keycode (44).\r\n        inputElement.on('keypress', function(e) {\r\n\r\n            if (e.keyCode === KEYS.COMMA) {\r\n                if (options.tags) {\r\n                    // If we are allowing tags, comma should create a tag (or enter).\r\n                    addPendingJSPromise('keypress-' + e.keyCode)\r\n                    .resolve(createItem(options, state, originalSelect));\r\n                }\r\n                // We handled this event, so prevent it.\r\n                e.preventDefault();\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        // Support submitting the form without leaving the autocomplete element,\r\n        // or submitting too quick before the blur handler action is completed.\r\n        inputElement.closest('form').on('submit', function() {\r\n            if (options.tags) {\r\n                // If tags are enabled, create a tag.\r\n                addPendingJSPromise('form-autocomplete-submit')\r\n                .resolve(createItem(options, state, originalSelect));\r\n            }\r\n\r\n            return true;\r\n        });\r\n        inputElement.on('blur', function() {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-blur');\r\n            window.setTimeout(function() {\r\n                // Get the current element with focus.\r\n                var focusElement = $(document.activeElement);\r\n                var timeoutPromise = $.Deferred();\r\n\r\n                // Only close the menu if the input hasn't regained focus and if the element still exists,\r\n                // and regain focus if the scrollbar is clicked.\r\n                // Due to the half a second delay, it is possible that the input element no longer exist\r\n                // by the time this code is being executed.\r\n                if (focusElement.is(document.getElementById(state.suggestionsId))) {\r\n                    inputElement.focus(); // Probably the scrollbar is clicked. Regain focus.\r\n                } else if (!focusElement.is(inputElement) && $(document.getElementById(state.inputId)).length) {\r\n                    if (options.tags) {\r\n                        timeoutPromise.then(function() {\r\n                            return createItem(options, state, originalSelect);\r\n                        })\r\n                        .catch();\r\n                    }\r\n                    timeoutPromise.then(function() {\r\n                        return closeSuggestions(state);\r\n                    })\r\n                    .catch();\r\n                }\r\n\r\n                timeoutPromise.then(function() {\r\n                    return pendingPromise.resolve();\r\n                })\r\n                .catch();\r\n                timeoutPromise.resolve();\r\n            }, 500);\r\n        });\r\n        if (options.showSuggestions) {\r\n            var arrowElement = $(document.getElementById(state.downArrowId));\r\n            arrowElement.on('click', function(e) {\r\n                var pendingPromise = addPendingJSPromise('form-autocomplete-show-suggestions');\r\n\r\n                // Prevent the close timer, or we will open, then close the suggestions.\r\n                inputElement.focus();\r\n\r\n                // Handle ajax population of suggestions.\r\n                if (!inputElement.val() && options.ajax) {\r\n                    require([options.ajax], function(ajaxHandler) {\r\n                        pendingPromise.resolve(updateAjax(e, options, state, originalSelect, ajaxHandler));\r\n                    });\r\n                } else {\r\n                    // Else - open the suggestions list.\r\n                    pendingPromise.resolve(updateSuggestions(options, state, inputElement.val(), originalSelect));\r\n                }\r\n            });\r\n        }\r\n\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n        // Remove any click handler first.\r\n        suggestionsElement.parent().prop(\"onclick\", null).off(\"click\");\r\n        suggestionsElement.parent().on('click', `#${state.suggestionsId} [role=option]`, function(e) {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-parent');\r\n            // Handle clicks on suggestions.\r\n            var element = $(e.currentTarget).closest('[role=option]');\r\n            var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n            // Find the index of the clicked on suggestion.\r\n            var current = suggestionsElement.children(':not([aria-hidden])').index(element);\r\n\r\n            // Activate it.\r\n            activateItem(current, state)\r\n            .then(function() {\r\n                // And select it.\r\n                return selectCurrentItem(options, state, originalSelect);\r\n            })\r\n            .then(function() {\r\n                return pendingPromise.resolve();\r\n            })\r\n            .catch();\r\n        });\r\n        var selectionElement = $(document.getElementById(state.selectionId));\r\n\r\n        // Handle clicks on the selected items (will unselect an item).\r\n        selectionElement.on('click', '[role=option]', function(e) {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-clicks');\r\n\r\n            // Remove it from the selection.\r\n            pendingPromise.resolve(deselectItem(options, state, $(e.currentTarget), originalSelect));\r\n        });\r\n\r\n        // When listbox is focused, focus on the first option if there is no focused option.\r\n        selectionElement.on('focus', function() {\r\n            updateActiveSelectionFromState(state);\r\n        });\r\n\r\n        // Keyboard navigation for the selection list.\r\n        selectionElement.on('keydown', function(e) {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-keydown-' + e.keyCode);\r\n            switch (e.keyCode) {\r\n                case KEYS.RIGHT:\r\n                case KEYS.DOWN:\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n\r\n                    // Choose the next selection item.\r\n                    pendingPromise.resolve(activateNextSelection(state));\r\n                    return;\r\n                case KEYS.LEFT:\r\n                case KEYS.UP:\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n\r\n                    // Choose the previous selection item.\r\n                    pendingPromise.resolve(activatePreviousSelection(state));\r\n                    return;\r\n                case KEYS.SPACE:\r\n                case KEYS.ENTER:\r\n                    // Get the item that is currently selected.\r\n                    var selectedItem = $(document.getElementById(state.selectionId)).children('[data-active-selection]');\r\n                    if (selectedItem) {\r\n                        e.preventDefault();\r\n\r\n                        // Unselect this item.\r\n                        pendingPromise.resolve(deselectItem(options, state, selectedItem, originalSelect));\r\n                    }\r\n                    return;\r\n            }\r\n\r\n            // Not handled. Resolve the promise.\r\n            pendingPromise.resolve();\r\n        });\r\n        // Whenever the input field changes, update the suggestion list.\r\n        if (options.showSuggestions) {\r\n            // Store the value of the field as its last value, when the field gains focus.\r\n            inputElement.on('focus', function(e) {\r\n                var query = $(e.currentTarget).val();\r\n                $(e.currentTarget).data('last-value', query);\r\n            });\r\n\r\n            // If this field uses ajax, set it up.\r\n            if (options.ajax) {\r\n                require([options.ajax], function(ajaxHandler) {\r\n                    // Creating throttled handlers free of race conditions, and accurate.\r\n                    // This code keeps track of a throttleTimeout, which is periodically polled.\r\n                    // Once the throttled function is executed, the fact that it is running is noted.\r\n                    // If a subsequent request comes in whilst it is running, this request is re-applied.\r\n                    var throttleTimeout = null;\r\n                    var inProgress = false;\r\n                    var pendingKey = 'autocomplete-throttledhandler';\r\n                    var handler = function(e) {\r\n                        // Empty the current timeout.\r\n                        throttleTimeout = null;\r\n\r\n                        // Mark this request as in-progress.\r\n                        inProgress = true;\r\n\r\n                        // Process the request.\r\n                        updateAjax(e, options, state, originalSelect, ajaxHandler)\r\n                        .then(function() {\r\n                            // Check if the throttleTimeout is still empty.\r\n                            // There's a potential condition whereby the JS request takes long enough to complete that\r\n                            // another task has been queued.\r\n                            // In this case another task will be kicked off and we must wait for that before marking htis as\r\n                            // complete.\r\n                            if (null === throttleTimeout) {\r\n                                // Mark this task as complete.\r\n                                M.util.js_complete(pendingKey);\r\n                            }\r\n                            inProgress = false;\r\n\r\n                            return arguments[0];\r\n                        })\r\n                        .catch(notification.exception);\r\n                    };\r\n\r\n                    // For input events, we do not want to trigger many, many updates.\r\n                    var throttledHandler = function(e) {\r\n                        window.clearTimeout(throttleTimeout);\r\n                        if (inProgress) {\r\n                            // A request is currently ongoing.\r\n                            // Delay this request another 100ms.\r\n                            throttleTimeout = window.setTimeout(throttledHandler.bind(this, e), 100);\r\n                            return;\r\n                        }\r\n\r\n                        if (throttleTimeout === null) {\r\n                            // There is currently no existing timeout handler, and it has not been recently cleared, so\r\n                            // this is the start of a throttling check.\r\n                            M.util.js_pending(pendingKey);\r\n                        }\r\n\r\n                        // There is currently no existing timeout handler, and it has not been recently cleared, so this\r\n                        // is the start of a throttling check.\r\n                        // Queue a call to the handler.\r\n                        throttleTimeout = window.setTimeout(handler.bind(this, e), 300);\r\n                    };\r\n\r\n                    // Trigger an ajax update after the text field value changes.\r\n                    inputElement.on('input', function(e) {\r\n                        var query = $(e.currentTarget).val();\r\n                        var last = $(e.currentTarget).data('last-value');\r\n                        // IE11 fires many more input events than required - even when the value has not changed.\r\n                        if (last !== query) {\r\n                            throttledHandler(e);\r\n                        }\r\n                        $(e.currentTarget).data('last-value', query);\r\n                    });\r\n                });\r\n            } else {\r\n                inputElement.on('input', function(e) {\r\n                    var query = $(e.currentTarget).val();\r\n                    var last = $(e.currentTarget).data('last-value');\r\n                    // IE11 fires many more input events than required - even when the value has not changed.\r\n                    // We need to only do this for real value changed events or the suggestions will be\r\n                    // unclickable on IE11 (because they will be rebuilt before the click event fires).\r\n                    // Note - because of this we cannot close the list when the query is empty or it will break\r\n                    // on IE11.\r\n                    if (last !== query) {\r\n                        updateSuggestions(options, state, query, originalSelect);\r\n                    }\r\n                    $(e.currentTarget).data('last-value', query);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create and return an unresolved Promise for some pending JS.\r\n     *\r\n     * @param   {String} key The unique identifier for this promise\r\n     * @return  {Promise}\r\n     */\r\n    var addPendingJSPromise = function(key) {\r\n            var pendingKey = 'form-autocomplete:' + key;\r\n\r\n            M.util.js_pending(pendingKey);\r\n\r\n            var pendingPromise = $.Deferred();\r\n\r\n            pendingPromise\r\n            .then(function() {\r\n                M.util.js_complete(pendingKey);\r\n\r\n                return arguments[0];\r\n            })\r\n            .catch(notification.exception);\r\n\r\n            return pendingPromise;\r\n    };\r\n\r\n    return {\r\n        // Public variables and functions.\r\n        /**\r\n         * Turn a boring select box into an auto-complete beast.\r\n         *\r\n         * @method enhance\r\n         * @param {string} selector The selector that identifies the select box.\r\n         * @param {boolean} tags Whether to allow support for tags (can define new entries).\r\n         * @param {string} ajax Name of an AMD module to handle ajax requests. If specified, the AMD\r\n         *                      module must expose 2 functions \"transport\" and \"processResults\".\r\n         *                      These are modeled on Select2 see: https://select2.github.io/options.html#ajax\r\n         * @param {String} placeholder - The text to display before a selection is made.\r\n         * @param {Boolean} caseSensitive - If search has to be made case sensitive.\r\n         * @param {Boolean} showSuggestions - If suggestions should be shown\r\n         * @param {String} noSelectionString - Text to display when there is no selection\r\n         * @param {Boolean} closeSuggestionsOnSelect - Whether to close the suggestions immediately after making a selection.\r\n         * @param {Object} templateOverrides A set of templates to use instead of the standard templates\r\n         * @return {Promise}\r\n         */\r\n        enhance: function(selector, tags, ajax, placeholder, caseSensitive, showSuggestions, noSelectionString,\r\n                          closeSuggestionsOnSelect, templateOverrides) {\r\n            // Set some default values.\r\n            var options = {\r\n                selector: selector,\r\n                tags: false,\r\n                ajax: false,\r\n                placeholder: placeholder,\r\n                caseSensitive: false,\r\n                showSuggestions: true,\r\n                noSelectionString: noSelectionString,\r\n                templates: $.extend({\r\n                        input: 'core/form_autocomplete_input',\r\n                        items: 'core/form_autocomplete_selection_items',\r\n                        layout: 'core/form_autocomplete_layout',\r\n                        selection: 'core/form_autocomplete_selection',\r\n                        suggestions: 'core/form_autocomplete_suggestions',\r\n                    }, templateOverrides),\r\n            };\r\n            var pendingKey = 'autocomplete-setup-' + selector;\r\n            M.util.js_pending(pendingKey);\r\n            if (typeof tags !== \"undefined\") {\r\n                options.tags = tags;\r\n            }\r\n            if (typeof ajax !== \"undefined\") {\r\n                options.ajax = ajax;\r\n            }\r\n            if (typeof caseSensitive !== \"undefined\") {\r\n                options.caseSensitive = caseSensitive;\r\n            }\r\n            if (typeof showSuggestions !== \"undefined\") {\r\n                options.showSuggestions = showSuggestions;\r\n            }\r\n            if (typeof noSelectionString === \"undefined\") {\r\n                str.get_string('noselection', 'form').done(function(result) {\r\n                    options.noSelectionString = result;\r\n                }).fail(notification.exception);\r\n            }\r\n\r\n            // Look for the select element.\r\n            var originalSelect = $(selector);\r\n            if (!originalSelect) {\r\n                log.debug('Selector not found: ' + selector);\r\n                M.util.js_complete(pendingKey);\r\n                return false;\r\n            }\r\n\r\n            // Ensure we enhance the element only once.\r\n            if (originalSelect.data('enhanced') === 'enhanced') {\r\n                M.util.js_complete(pendingKey);\r\n                return false;\r\n            }\r\n            originalSelect.data('enhanced', 'enhanced');\r\n\r\n            // Hide the original select.\r\n            Aria.hide(originalSelect.get());\r\n            originalSelect.css('visibility', 'hidden');\r\n\r\n            // Find or generate some ids.\r\n            var state = {\r\n                selectId: originalSelect.attr('id'),\r\n                inputId: 'form_autocomplete_input-' + uniqueId,\r\n                suggestionsId: 'form_autocomplete_suggestions-' + uniqueId,\r\n                selectionId: 'form_autocomplete_selection-' + uniqueId,\r\n                downArrowId: 'form_autocomplete_downarrow-' + uniqueId,\r\n                items: [],\r\n            };\r\n\r\n            // Increment the unique counter so we don't get duplicates ever.\r\n            uniqueId++;\r\n\r\n            options.multiple = originalSelect.attr('multiple');\r\n            if (!options.multiple) {\r\n                // If this is a single select then there is no way to de-select the current value -\r\n                // unless we add a bogus blank option to be selected when nothing else is.\r\n                // This matches similar code in updateAjax above.\r\n                originalSelect.prepend('<option>');\r\n            }\r\n\r\n            if (typeof closeSuggestionsOnSelect !== \"undefined\") {\r\n                options.closeSuggestionsOnSelect = closeSuggestionsOnSelect;\r\n            } else {\r\n                // If not specified, this will close suggestions by default for single-select elements only.\r\n                options.closeSuggestionsOnSelect = !options.multiple;\r\n            }\r\n\r\n            var originalLabel = $('[for=' + state.selectId + ']');\r\n            // Create the new markup and insert it after the select.\r\n            var suggestions = [];\r\n            originalSelect.children('option').each(function(index, option) {\r\n                suggestions[index] = {label: option.innerHTML, value: $(option).attr('value')};\r\n            });\r\n\r\n            // Render all the parts of our UI.\r\n            var context = $.extend({}, options, state);\r\n            context.options = suggestions;\r\n            context.items = [];\r\n\r\n            // Collect rendered inline JS to be executed once the HTML is shown.\r\n            var collectedjs = '';\r\n\r\n            var renderLayout = templates.render(options.templates.layout, {})\r\n            .then(function(html) {\r\n                return $(html);\r\n            });\r\n\r\n            var renderInput = templates.render(options.templates.input, context).then(function(html, js) {\r\n                collectedjs += js;\r\n                return $(html);\r\n            });\r\n\r\n            var renderDatalist = templates.render(options.templates.suggestions, context).then(function(html, js) {\r\n                collectedjs += js;\r\n                return $(html);\r\n            });\r\n\r\n            var renderSelection = templates.render(options.templates.selection, context).then(function(html, js) {\r\n                collectedjs += js;\r\n                return $(html);\r\n            });\r\n\r\n            return $.when(renderLayout, renderInput, renderDatalist, renderSelection)\r\n            .then(function(layout, input, suggestions, selection) {\r\n                originalSelect.hide();\r\n                var container = originalSelect.parent();\r\n\r\n                // Ensure that the data-fieldtype is set for behat.\r\n                input.find('input').attr('data-fieldtype', 'autocomplete');\r\n\r\n                container.append(layout);\r\n                container.find('[data-region=\"form_autocomplete-input\"]').replaceWith(input);\r\n                container.find('[data-region=\"form_autocomplete-suggestions\"]').replaceWith(suggestions);\r\n                container.find('[data-region=\"form_autocomplete-selection\"]').replaceWith(selection);\r\n\r\n                templates.runTemplateJS(collectedjs);\r\n\r\n                // Update the form label to point to the text input.\r\n                originalLabel.attr('for', state.inputId);\r\n                // Add the event handlers.\r\n                addNavigation(options, state, originalSelect);\r\n\r\n                var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n                // Hide the suggestions by default.\r\n                suggestionsElement.hide();\r\n                Aria.hide(suggestionsElement.get());\r\n\r\n                return;\r\n            })\r\n            .then(function() {\r\n                // Show the current values in the selection list.\r\n                return updateSelectionList(options, state, originalSelect);\r\n            })\r\n            .then(function() {\r\n                return M.util.js_complete(pendingKey);\r\n            })\r\n            .catch(function(error) {\r\n                M.util.js_complete(pendingKey);\r\n                notification.exception(error);\r\n            });\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","log","str","templates","notification","LoadingIcon","Aria","FormChangeChecker","KEYS","uniqueId","Date","now","activateSelection","index","state","selectionElement","document","getElementById","selectionId","length","children","element","get","itemId","attr","Deferred","resolve","updateActiveSelectionFromState","activeElement","selectionRegion","activeId","activeValue","_selectionRegion$attr","replace","find","getActiveElementFromState","activeIndex","updateSelectionList","options","originalSelect","pendingKey","inputId","M","util","js_pending","items","newSelection","each","ele","label","prop","data","html","push","value","hasItemListChanged","js_complete","Promise","context","extend","render","then","js","replaceNodeContents","catch","exception","filter","item","indexOf","notifyChange","markFormChangedFromNode","dispatchEvent","Event","deselectItem","selectedItemValue","prepend","remove","activateItem","inputElement","suggestionsElement","suggestionsId","globalIndex","scrollPos","offset","top","scrollTop","height","animate","promise","closeSuggestions","hide","updateSuggestions","query","matchingElements","suggestions","option","innerHTML","searchquery","caseSensitive","toLocaleLowerCase","replaceNode","unhide","show","node","text","tags","get_string","done","nosuggestionsstr","createItem","val","split","found","tagindex","tag","trim","multiple","append","createTextNode","selectCurrentItem","closeSuggestionsOnSelect","focus","updateAjax","e","ajaxHandler","pendingPromise","addPendingJSPromise","parentElement","selectId","parent","addIconToContainerRemoveOnCompletion","currentTarget","transport","selector","results","processedResults","processResults","existingValues","optionIndex","String","isArray","resultIndex","result","error","reject","addNavigation","on","pendingJsPromise","keyCode","showSuggestions","current","activateNextItem","ajax","require","preventDefault","activatePreviousItem","closest","window","setTimeout","focusElement","timeoutPromise","is","downArrowId","off","selectionsElement","activateNextSelection","activatePreviousSelection","selectedItem","throttleTimeout","inProgress","handler","arguments","throttledHandler","clearTimeout","bind","this","key","enhance","placeholder","noSelectionString","templateOverrides","input","layout","selection","fail","debug","css","originalLabel","collectedjs","renderLayout","renderInput","renderDatalist","renderSelection","when","container","replaceWith","runTemplateJS"],"mappings":"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"}