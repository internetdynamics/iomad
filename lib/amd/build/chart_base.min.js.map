{"version":3,"file":"chart_base.min.js","sources":["../src/chart_base.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Chart base.\r\n *\r\n * @copyright  2016 Frédéric Massart - FMCorz.net\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @module     core/chart_base\r\n */\r\ndefine(['core/chart_series', 'core/chart_axis'], function(Series, Axis) {\r\n\r\n    /**\r\n     * Chart base.\r\n     *\r\n     * The constructor of a chart must never take any argument.\r\n     *\r\n     * {@link module:core/chart_base#_setDefault} to set the defaults on instantiation.\r\n     *\r\n     * @class\r\n     */\r\n    function Base() {\r\n        this._series = [];\r\n        this._labels = [];\r\n        this._xaxes = [];\r\n        this._yaxes = [];\r\n\r\n        this._setDefaults();\r\n    }\r\n\r\n    /**\r\n     * The series constituting this chart.\r\n     *\r\n     * @protected\r\n     * @type {module:core/chart_series[]}\r\n     */\r\n    Base.prototype._series = null;\r\n\r\n    /**\r\n     * The labels of the X axis when categorised.\r\n     *\r\n     * @protected\r\n     * @type {String[]}\r\n     */\r\n    Base.prototype._labels = null;\r\n\r\n    /**\r\n     * Options for chart legend display.\r\n     *\r\n     * @protected\r\n     * @type {Object}\r\n     */\r\n    Base.prototype._legendOptions = null;\r\n\r\n    /**\r\n     * The title of the chart.\r\n     *\r\n     * @protected\r\n     * @type {String}\r\n     */\r\n    Base.prototype._title = null;\r\n\r\n    /**\r\n     * The X axes.\r\n     *\r\n     * @protected\r\n     * @type {module:core/chart_axis[]}\r\n     */\r\n    Base.prototype._xaxes = null;\r\n\r\n    /**\r\n     * The Y axes.\r\n     *\r\n     * @protected\r\n     * @type {module:core/chart_axis[]}\r\n     */\r\n    Base.prototype._yaxes = null;\r\n\r\n    /**\r\n     * Colours to pick from when automatically assigning them.\r\n     *\r\n     * @const\r\n     * @type {String[]}\r\n     */\r\n    Base.prototype.COLORSET = ['#f3c300', '#875692', '#f38400', '#a1caf1', '#be0032', '#c2b280', '#7f180d', '#008856',\r\n            '#e68fac', '#0067a5'];\r\n\r\n    /**\r\n     * Set of colours defined by setting $CFG->chart_colorset to be picked when automatically assigning them.\r\n     *\r\n     * @type {String[]}\r\n     * @protected\r\n     */\r\n    Base.prototype._configColorSet = null;\r\n\r\n    /**\r\n     * The type of chart.\r\n     *\r\n     * @abstract\r\n     * @type {String}\r\n     * @const\r\n     */\r\n    Base.prototype.TYPE = null;\r\n\r\n    /**\r\n     * Add a series to the chart.\r\n     *\r\n     * This will automatically assign a color to the series if it does not have one.\r\n     *\r\n     * @param {module:core/chart_series} series The series to add.\r\n     */\r\n    Base.prototype.addSeries = function(series) {\r\n        this._validateSeries(series);\r\n        this._series.push(series);\r\n\r\n        // Give a default color from the set.\r\n        if (series.getColor() === null) {\r\n            var configColorSet = this.getConfigColorSet() || Base.prototype.COLORSET;\r\n            series.setColor(configColorSet[this._series.length % configColorSet.length]);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create a new instance of a chart from serialised data.\r\n     *\r\n     * the serialised attributes they offer and support.\r\n     *\r\n     * @static\r\n     * @method create\r\n     * @param {module:core/chart_base} Klass The class oject representing the type of chart to instantiate.\r\n     * @param {Object} data The data of the chart.\r\n     * @return {module:core/chart_base}\r\n     */\r\n    Base.prototype.create = function(Klass, data) {\r\n        // TODO Not convinced about the usage of Klass here but I can't figure out a way\r\n        // to have a reference to the class in the sub classes, in PHP I'd do new self().\r\n        var Chart = new Klass();\r\n        Chart.setConfigColorSet(data.config_colorset);\r\n        Chart.setLabels(data.labels);\r\n        Chart.setTitle(data.title);\r\n        if (data.legend_options) {\r\n            Chart.setLegendOptions(data.legend_options);\r\n        }\r\n        data.series.forEach(function(seriesData) {\r\n            Chart.addSeries(Series.prototype.create(seriesData));\r\n        });\r\n        data.axes.x.forEach(function(axisData, i) {\r\n            Chart.setXAxis(Axis.prototype.create(axisData), i);\r\n        });\r\n        data.axes.y.forEach(function(axisData, i) {\r\n            Chart.setYAxis(Axis.prototype.create(axisData), i);\r\n        });\r\n        return Chart;\r\n    };\r\n\r\n    /**\r\n     * Get an axis.\r\n     *\r\n     * @private\r\n     * @param {String} xy Accepts the values 'x' or 'y'.\r\n     * @param {Number} [index=0] The index of the axis of its type.\r\n     * @param {Bool} [createIfNotExists=false] When true, create an instance if it does not exist.\r\n     * @return {module:core/chart_axis}\r\n     */\r\n    Base.prototype.__getAxis = function(xy, index, createIfNotExists) {\r\n        var axes = xy === 'x' ? this._xaxes : this._yaxes,\r\n            setAxis = (xy === 'x' ? this.setXAxis : this.setYAxis).bind(this),\r\n            axis;\r\n\r\n        index = typeof index === 'undefined' ? 0 : index;\r\n        createIfNotExists = typeof createIfNotExists === 'undefined' ? false : createIfNotExists;\r\n        axis = axes[index];\r\n\r\n        if (typeof axis === 'undefined') {\r\n            if (!createIfNotExists) {\r\n                throw new Error('Unknown axis.');\r\n            }\r\n            axis = new Axis();\r\n            setAxis(axis, index);\r\n        }\r\n\r\n        return axis;\r\n    };\r\n\r\n    /**\r\n     * Get colours defined by setting.\r\n     *\r\n     * @return {String[]}\r\n     */\r\n    Base.prototype.getConfigColorSet = function() {\r\n        return this._configColorSet;\r\n    };\r\n\r\n    /**\r\n     * Get the labels of the X axis.\r\n     *\r\n     * @return {String[]}\r\n     */\r\n    Base.prototype.getLabels = function() {\r\n        return this._labels;\r\n    };\r\n\r\n    /**\r\n     * Get whether to display the chart legend.\r\n     *\r\n     * @return {Bool}\r\n     */\r\n    Base.prototype.getLegendOptions = function() {\r\n        return this._legendOptions;\r\n    };\r\n\r\n    /**\r\n     * Get the series.\r\n     *\r\n     * @return {module:core/chart_series[]}\r\n     */\r\n    Base.prototype.getSeries = function() {\r\n        return this._series;\r\n    };\r\n\r\n    /**\r\n     * Get the title of the chart.\r\n     *\r\n     * @return {String}\r\n     */\r\n    Base.prototype.getTitle = function() {\r\n        return this._title;\r\n    };\r\n\r\n    /**\r\n     * Get the type of chart.\r\n     *\r\n     * @see module:core/chart_base#TYPE\r\n     * @return {String}\r\n     */\r\n    Base.prototype.getType = function() {\r\n        if (!this.TYPE) {\r\n            throw new Error('The TYPE property has not been set.');\r\n        }\r\n        return this.TYPE;\r\n    };\r\n\r\n    /**\r\n     * Get the X axes.\r\n     *\r\n     * @return {module:core/chart_axis[]}\r\n     */\r\n    Base.prototype.getXAxes = function() {\r\n        return this._xaxes;\r\n    };\r\n\r\n    /**\r\n     * Get an X axis.\r\n     *\r\n     * @param {Number} [index=0] The index of the axis.\r\n     * @param {Bool} [createIfNotExists=false] Create the instance of it does not exist at index.\r\n     * @return {module:core/chart_axis}\r\n     */\r\n    Base.prototype.getXAxis = function(index, createIfNotExists) {\r\n        return this.__getAxis('x', index, createIfNotExists);\r\n    };\r\n\r\n    /**\r\n     * Get the Y axes.\r\n     *\r\n     * @return {module:core/chart_axis[]}\r\n     */\r\n    Base.prototype.getYAxes = function() {\r\n        return this._yaxes;\r\n    };\r\n\r\n    /**\r\n     * Get an Y axis.\r\n     *\r\n     * @param {Number} [index=0] The index of the axis.\r\n     * @param {Bool} [createIfNotExists=false] Create the instance of it does not exist at index.\r\n     * @return {module:core/chart_axis}\r\n     */\r\n    Base.prototype.getYAxis = function(index, createIfNotExists) {\r\n        return this.__getAxis('y', index, createIfNotExists);\r\n    };\r\n\r\n    /**\r\n     * Set colours defined by setting.\r\n     *\r\n     * @param {String[]} colorset An array of css colours.\r\n     * @protected\r\n     */\r\n    Base.prototype.setConfigColorSet = function(colorset) {\r\n        this._configColorSet = colorset;\r\n    };\r\n\r\n    /**\r\n     * Set the defaults for this chart type.\r\n     *\r\n     * Child classes can extend this to set defaults values on instantiation.\r\n     *\r\n     * emphasize and self-document the defaults values set by the chart type.\r\n     *\r\n     * @protected\r\n     */\r\n    Base.prototype._setDefaults = function() {\r\n        // For the children to extend.\r\n    };\r\n\r\n    /**\r\n     * Set the labels of the X axis.\r\n     *\r\n     * This requires for each series to contain strictly as many values as there\r\n     * are labels.\r\n     *\r\n     * @param {String[]} labels The labels.\r\n     */\r\n    Base.prototype.setLabels = function(labels) {\r\n        if (labels.length && this._series.length && this._series[0].length != labels.length) {\r\n            throw new Error('Series must match label values.');\r\n        }\r\n        this._labels = labels;\r\n    };\r\n\r\n    /**\r\n     * Set options for chart legend display.\r\n     *\r\n     * @param {Object} legendOptions\r\n     */\r\n    Base.prototype.setLegendOptions = function(legendOptions) {\r\n        if (typeof legendOptions !== 'object') {\r\n            throw new Error('Setting legend with non-object value:' + legendOptions);\r\n        }\r\n        this._legendOptions = legendOptions;\r\n    };\r\n\r\n    /**\r\n     * Set the title of the chart.\r\n     *\r\n     * @param {String} title The title.\r\n     */\r\n    Base.prototype.setTitle = function(title) {\r\n        this._title = title;\r\n    };\r\n\r\n    /**\r\n     * Set an X axis.\r\n     *\r\n     * Note that this will override any predefined axis without warning.\r\n     *\r\n     * @param {module:core/chart_axis} axis The axis.\r\n     * @param {Number} [index=0] The index of the axis.\r\n     */\r\n    Base.prototype.setXAxis = function(axis, index) {\r\n        index = typeof index === 'undefined' ? 0 : index;\r\n        this._validateAxis('x', axis, index);\r\n        this._xaxes[index] = axis;\r\n    };\r\n\r\n    /**\r\n     * Set a Y axis.\r\n     *\r\n     * Note that this will override any predefined axis without warning.\r\n     *\r\n     * @param {module:core/chart_axis} axis The axis.\r\n     * @param {Number} [index=0] The index of the axis.\r\n     */\r\n    Base.prototype.setYAxis = function(axis, index) {\r\n        index = typeof index === 'undefined' ? 0 : index;\r\n        this._validateAxis('y', axis, index);\r\n        this._yaxes[index] = axis;\r\n    };\r\n\r\n    /**\r\n     * Validate an axis.\r\n     *\r\n     * @protected\r\n     * @param {String} xy X or Y axis.\r\n     * @param {module:core/chart_axis} axis The axis to validate.\r\n     * @param {Number} [index=0] The index of the axis.\r\n     */\r\n    Base.prototype._validateAxis = function(xy, axis, index) {\r\n        index = typeof index === 'undefined' ? 0 : index;\r\n        if (index > 0) {\r\n            var axes = xy == 'x' ? this._xaxes : this._yaxes;\r\n            if (typeof axes[index - 1] === 'undefined') {\r\n                throw new Error('Missing ' + xy + ' axis at index lower than ' + index);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Validate a series.\r\n     *\r\n     * @protected\r\n     * @param {module:core/chart_series} series The series to validate.\r\n     */\r\n    Base.prototype._validateSeries = function(series) {\r\n        if (this._series.length && this._series[0].getCount() != series.getCount()) {\r\n            throw new Error('Series do not have an equal number of values.');\r\n\r\n        } else if (this._labels.length && this._labels.length != series.getCount()) {\r\n            throw new Error('Series must match label values.');\r\n        }\r\n    };\r\n\r\n    return Base;\r\n\r\n});\r\n"],"names":["define","Series","Axis","Base","_series","_labels","_xaxes","_yaxes","_setDefaults","prototype","_legendOptions","_title","COLORSET","_configColorSet","TYPE","addSeries","series","_validateSeries","push","getColor","configColorSet","this","getConfigColorSet","setColor","length","create","Klass","data","Chart","setConfigColorSet","config_colorset","setLabels","labels","setTitle","title","legend_options","setLegendOptions","forEach","seriesData","axes","x","axisData","i","setXAxis","y","setYAxis","__getAxis","xy","index","createIfNotExists","axis","setAxis","bind","Error","getLabels","getLegendOptions","getSeries","getTitle","getType","getXAxes","getXAxis","getYAxes","getYAxis","colorset","legendOptions","_validateAxis","getCount"],"mappings":"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"}