{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Utility functions.\r\n *\r\n * @module core/utils\r\n * @copyright  2019 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n /**\r\n  * Create a wrapper function to throttle the execution of the given\r\n  *\r\n  * function to at most once every specified period.\r\n  *\r\n  * If the function is attempted to be executed while it's in cooldown\r\n  * (during the wait period) then it'll immediately execute again as\r\n  * soon as the cooldown is over.\r\n  *\r\n  * @method\r\n  * @param {Function} func The function to throttle\r\n  * @param {Number} wait The number of milliseconds to wait between executions\r\n  * @return {Function}\r\n  */\r\nexport const throttle = (func, wait) => {\r\n    let onCooldown = false;\r\n    let runAgain = null;\r\n    const run = function(...args) {\r\n        if (runAgain === null) {\r\n            // This is the first time the function has been called.\r\n            runAgain = false;\r\n        } else {\r\n            // This function has been called a second time during the wait period\r\n            // so re-run it once the wait period is over.\r\n            runAgain = true;\r\n        }\r\n\r\n        if (onCooldown) {\r\n            // Function has already run for this wait period.\r\n            return;\r\n        }\r\n\r\n        func.apply(this, args);\r\n        onCooldown = true;\r\n\r\n        setTimeout(() => {\r\n            const recurse = runAgain;\r\n            onCooldown = false;\r\n            runAgain = null;\r\n\r\n            if (recurse) {\r\n                run(args);\r\n            }\r\n        }, wait);\r\n    };\r\n\r\n    return run;\r\n};\r\n\r\n/**\r\n * Create a wrapper function to debounce the execution of the given\r\n * function. Each attempt to execute the function will reset the cooldown\r\n * period.\r\n *\r\n * @method\r\n * @param {Function} func The function to debounce\r\n * @param {Number} wait The number of milliseconds to wait after the final attempt to execute\r\n * @return {Function}\r\n */\r\nexport const debounce = (func, wait) => {\r\n    let timeout = null;\r\n    return function(...args) {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => {\r\n            func.apply(this, args);\r\n        }, wait);\r\n    };\r\n};\r\n"],"names":["func","wait","onCooldown","runAgain","run","args","apply","this","setTimeout","recurse","timeout","clearTimeout"],"mappings":"yKAqCwB,CAACA,KAAMC,YACvBC,YAAa,EACbC,SAAW,WACTC,IAAM,yCAAYC,6CAAAA,2BAGhBF,SAFa,OAAbA,SASAD,aAKJF,KAAKM,MAAMC,KAAMF,MACjBH,YAAa,EAEbM,YAAW,WACDC,QAAUN,SAChBD,YAAa,EACbC,SAAW,KAEPM,SACAL,IAAIC,QAETJ,eAGAG,uBAaa,CAACJ,KAAMC,YACvBS,QAAU,YACP,0CAAYL,kDAAAA,6BACfM,aAAaD,SACbA,QAAUF,YAAW,KACjBR,KAAKM,MAAMC,KAAMF,QAClBJ"}