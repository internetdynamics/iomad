{"version":3,"file":"modal_factory.min.js","sources":["../src/modal_factory.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Create a modal.\r\n *\r\n * @module     core/modal_factory\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/modal_events', 'core/modal_registry', 'core/modal',\r\n        'core/modal_save_cancel', 'core/modal_delete_cancel', 'core/modal_cancel', 'core/local/modal/alert',\r\n        'core/templates', 'core/notification', 'core/custom_interaction_events',\r\n        'core/pending'],\r\n    function($, ModalEvents, ModalRegistry, Modal, ModalSaveCancel, ModalDeleteCancel,\r\n        ModalCancel, ModalAlert, Templates, Notification, CustomEvents, Pending) {\r\n\r\n    // The templates for each type of modal.\r\n    var TEMPLATES = {\r\n        DEFAULT: 'core/modal',\r\n        SAVE_CANCEL: 'core/modal_save_cancel',\r\n        DELETE_CANCEL: 'core/modal_delete_cancel',\r\n        CANCEL: 'core/modal_cancel',\r\n        ALERT: 'core/local/modal/alert',\r\n    };\r\n\r\n    /**\r\n     * The available types of modals.\r\n     *\r\n     * @constant\r\n     * @static\r\n     * @public\r\n     * @property {String} DEFAULT The default modal\r\n     * @property {String} SAVE_CANCEL A modal which can be used to either save, or cancel.\r\n     * @property {String} DELETE_CANCEL A modal which can be used to either delete, or cancel.\r\n     * @property {String} CANCEL A modal which displayed a cancel button\r\n     * @property {String} ALERT An information modal which only displays information.\r\n     */\r\n    var TYPES = {\r\n        DEFAULT: 'DEFAULT',\r\n        SAVE_CANCEL: 'SAVE_CANCEL',\r\n        DELETE_CANCEL: 'DELETE_CANCEL',\r\n        CANCEL: 'CANCEL',\r\n        ALERT: 'ALERT',\r\n    };\r\n\r\n    // Register the common set of modals.\r\n    ModalRegistry.register(TYPES.DEFAULT, Modal, TEMPLATES.DEFAULT);\r\n    ModalRegistry.register(TYPES.SAVE_CANCEL, ModalSaveCancel, TEMPLATES.SAVE_CANCEL);\r\n    ModalRegistry.register(TYPES.DELETE_CANCEL, ModalDeleteCancel, TEMPLATES.DELETE_CANCEL);\r\n    ModalRegistry.register(TYPES.CANCEL, ModalCancel, TEMPLATES.CANCEL);\r\n    ModalRegistry.register(TYPES.ALERT, ModalAlert, TEMPLATES.ALERT);\r\n\r\n    /**\r\n     * Set up the events required to show the modal and return focus when the modal\r\n     * is closed.\r\n     *\r\n     * @method setUpTrigger\r\n     * @private\r\n     * @param {Promise} modalPromise The modal instance\r\n     * @param {object} triggerElement The jQuery element to open the modal\r\n     * @param {object} modalConfig The modal configuration given to the factory\r\n     */\r\n    var setUpTrigger = function(modalPromise, triggerElement, modalConfig) {\r\n        // The element that actually shows the modal.\r\n        var actualTriggerElement = null;\r\n        // Check if the client has provided a callback function to be called\r\n        // before the modal is displayed.\r\n        var hasPreShowCallback = (typeof modalConfig.preShowCallback == 'function');\r\n        // Function to handle the trigger element being activated.\r\n        var triggeredCallback = function(e, data) {\r\n            var pendingPromise = new Pending('core/modal_factory:setUpTrigger:triggeredCallback');\r\n            actualTriggerElement = $(e.currentTarget);\r\n            modalPromise.then(function(modal) {\r\n                if (hasPreShowCallback) {\r\n                    // If the client provided a pre-show callback then execute\r\n                    // it now before showing the modal.\r\n                    modalConfig.preShowCallback(actualTriggerElement, modal);\r\n                }\r\n\r\n                modal.show();\r\n\r\n                return modal;\r\n            })\r\n            .then(pendingPromise.resolve);\r\n            data.originalEvent.preventDefault();\r\n        };\r\n\r\n        // The trigger element can either be a single element or it can be an\r\n        // element + selector pair to create a delegated event handler to trigger\r\n        // the modal.\r\n        if (Array.isArray(triggerElement)) {\r\n            var selector = triggerElement[1];\r\n            triggerElement = triggerElement[0];\r\n\r\n            CustomEvents.define(triggerElement, [CustomEvents.events.activate]);\r\n            triggerElement.on(CustomEvents.events.activate, selector, triggeredCallback);\r\n        } else {\r\n            CustomEvents.define(triggerElement, [CustomEvents.events.activate]);\r\n            triggerElement.on(CustomEvents.events.activate, triggeredCallback);\r\n        }\r\n\r\n        modalPromise.then(function(modal) {\r\n            modal.getRoot().on(ModalEvents.hidden, function() {\r\n                // Focus on the trigger element that actually launched the modal.\r\n                if (actualTriggerElement !== null) {\r\n                    actualTriggerElement.focus();\r\n                }\r\n            });\r\n\r\n            return modal;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create the correct instance of a modal based on the givem type. Sets up\r\n     * the trigger between the modal and the trigger element.\r\n     *\r\n     * @method createFromElement\r\n     * @private\r\n     * @param {object} registryConf A config from the ModalRegistry\r\n     * @param {object} modalElement The modal HTML jQuery object\r\n     * @return {object} Modal instance\r\n     */\r\n    var createFromElement = function(registryConf, modalElement) {\r\n        modalElement = $(modalElement);\r\n        var Module = registryConf.module;\r\n        var modal = new Module(modalElement);\r\n\r\n        return modal;\r\n    };\r\n\r\n    /**\r\n     * Create the correct modal instance for the given type, including loading\r\n     * the correct template.\r\n     *\r\n     * @method createFromType\r\n     * @private\r\n     * @param {object} registryConf A config from the ModalRegistry\r\n     * @param {object} templateContext The context to render the template with\r\n     * @returns {promise} Resolved with a Modal instance\r\n     */\r\n    var createFromType = function(registryConf, templateContext) {\r\n        var templateName = registryConf.template;\r\n\r\n        var modalPromise = Templates.render(templateName, templateContext)\r\n            .then(function(html) {\r\n                var modalElement = $(html);\r\n                return createFromElement(registryConf, modalElement);\r\n            })\r\n            .fail(Notification.exception);\r\n\r\n        return modalPromise;\r\n    };\r\n\r\n    /**\r\n     * Create a Modal instance.\r\n     *\r\n     * @method create\r\n     * @param {object} modalConfig The configuration to create the modal instance\r\n     * @param {object} triggerElement The trigger HTML jQuery object\r\n     * @return {promise} Resolved with a Modal instance\r\n     */\r\n    var create = function(modalConfig, triggerElement) {\r\n        var type = modalConfig.type || TYPES.DEFAULT;\r\n        var isLarge = modalConfig.large ? true : false;\r\n        // If 'scrollable' is not configured, set the modal to be scrollable by default.\r\n        var isScrollable = modalConfig.hasOwnProperty('scrollable') ? modalConfig.scrollable : true;\r\n        var registryConf = null;\r\n        var templateContext = {};\r\n\r\n        registryConf = ModalRegistry.get(type);\r\n\r\n        if (!registryConf) {\r\n            Notification.exception({message: 'Unable to find modal of type: ' + type});\r\n        }\r\n\r\n        if (typeof modalConfig.templateContext != 'undefined') {\r\n            templateContext = modalConfig.templateContext;\r\n        }\r\n\r\n        var pendingModalPromise = new Pending('core/modal_factory:create');\r\n        var modalPromise = createFromType(registryConf, templateContext)\r\n            .then(function(modal) {\r\n                if (typeof modalConfig.title != 'undefined') {\r\n                    modal.setTitle(modalConfig.title);\r\n                }\r\n\r\n                if (typeof modalConfig.body != 'undefined') {\r\n                    modal.setBody(modalConfig.body);\r\n                }\r\n\r\n                if (typeof modalConfig.footer != 'undefined') {\r\n                    modal.setFooter(modalConfig.footer);\r\n                }\r\n\r\n                if (modalConfig.buttons) {\r\n                    Object.entries(modalConfig.buttons).forEach(function([key, value]) {\r\n                        modal.setButtonText(key, value);\r\n                    });\r\n                }\r\n\r\n                if (isLarge) {\r\n                    modal.setLarge();\r\n                }\r\n\r\n                if (typeof modalConfig.removeOnClose !== 'undefined') {\r\n                    // If configured remove the modal when hiding it.\r\n                    modal.setRemoveOnClose(modalConfig.removeOnClose);\r\n                }\r\n\r\n                modal.setScrollable(isScrollable);\r\n                pendingModalPromise.resolve();\r\n                return modal;\r\n            });\r\n\r\n        if (typeof triggerElement != 'undefined') {\r\n            setUpTrigger(modalPromise, triggerElement, modalConfig);\r\n        }\r\n\r\n        return modalPromise;\r\n    };\r\n\r\n    return {\r\n        create: create,\r\n        types: TYPES,\r\n    };\r\n});\r\n"],"names":["define","$","ModalEvents","ModalRegistry","Modal","ModalSaveCancel","ModalDeleteCancel","ModalCancel","ModalAlert","Templates","Notification","CustomEvents","Pending","TEMPLATES","TYPES","DEFAULT","SAVE_CANCEL","DELETE_CANCEL","CANCEL","ALERT","register","createFromType","registryConf","templateContext","templateName","template","modalPromise","render","then","html","modalElement","Module","module","createFromElement","fail","exception","create","modalConfig","triggerElement","type","isLarge","large","isScrollable","hasOwnProperty","scrollable","get","message","pendingModalPromise","modal","title","setTitle","body","setBody","footer","setFooter","buttons","Object","entries","forEach","key","value","setButtonText","setLarge","removeOnClose","setRemoveOnClose","setScrollable","resolve","actualTriggerElement","hasPreShowCallback","preShowCallback","triggeredCallback","e","data","pendingPromise","currentTarget","show","originalEvent","preventDefault","Array","isArray","selector","events","activate","on","getRoot","hidden","focus","setUpTrigger","types"],"mappings":"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"}