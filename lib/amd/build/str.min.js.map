{"version":3,"file":"str.min.js","sources":["../src/str.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Fetch and return language strings.\r\n *\r\n * @module     core/str\r\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      2.9\r\n *\r\n */\r\nimport $ from 'jquery';\r\nimport Ajax from 'core/ajax';\r\nimport LocalStorage from 'core/localstorage';\r\n\r\n// Module cache for the promises so that we don't make multiple\r\n// unnecessary requests.\r\nlet promiseCache = [];\r\n\r\n/* eslint-disable no-restricted-properties */\r\n\r\n/**\r\n * Return a Promise that resolves to a string.\r\n *\r\n * If the string has previously been cached, then the Promise will be resolved immediately, otherwise it will be fetched\r\n * from the server and resolved when available.\r\n *\r\n * @method get_string\r\n * @param {string} key The language string key\r\n * @param {string} component The language string component\r\n * @param {string} param The param for variable expansion in the string.\r\n * @param {string} lang The users language - if not passed it is deduced.\r\n * @return {Promise}\r\n *\r\n * @example <caption>Fetching a string</caption>\r\n *\r\n * import {get_string as getString} from 'core/str';\r\n * get_string('cannotfindteacher', 'error')\r\n * .then(str => {\r\n *     window.console.log(str); // Cannot find teacher\r\n * })\r\n * .catch();\r\n */\r\n// eslint-disable-next-line camelcase\r\nexport const get_string = (key, component, param, lang) => {\r\n    return get_strings([{key, component, param, lang}])\r\n        .then(results => results[0]);\r\n};\r\n\r\n/**\r\n * Make a batch request to load a set of strings.\r\n *\r\n * Any missing string will be fetched from the server.\r\n * The Promise will only be resolved once all strings are available, or an attempt has been made to fetch them.\r\n *\r\n * @method get_strings\r\n * @param {Object[]} requests List of strings to fetch\r\n * @param {string} requests.key The string identifer to fetch\r\n * @param {string} [requests.component='core'] The componet to fetch from\r\n * @param {string} [requests.lang] The language to fetch a string for. Defaults to current page language.\r\n * @param {object|string} [requests.param] The param for variable expansion in the string.\r\n * @return {Promise[]}\r\n *\r\n * @example <caption>Fetching a set of strings</caption>\r\n *\r\n * import {get_strings as getStrings} from 'core/str';\r\n * get_strings([\r\n *     {\r\n *         key: 'cannotfindteacher',\r\n *         component: 'error',\r\n *     },\r\n *     {\r\n *         key: 'yes',\r\n *         component: 'core',\r\n *     },\r\n *     {\r\n *         key: 'no',\r\n *         component: 'core',\r\n *     },\r\n * ])\r\n * .then((cannotFindTeacher, yes, no) => {\r\n *     window.console.log(cannotFindTeacher); // Cannot find teacher\r\n *     window.console.log(yes); // Yes\r\n *     window.console.log(no); // No\r\n * })\r\n * .catch();\r\n */\r\n// eslint-disable-next-line camelcase\r\nexport const get_strings = (requests) => {\r\n    let requestData = [];\r\n    const pageLang = $('html').attr('lang').replace(/-/g, '_');\r\n\r\n    // Helper function to construct the cache key.\r\n    const getCacheKey = ({key, component, lang = pageLang}) => `core_str/${key}/${component}/${lang}`;\r\n\r\n    const stringPromises = requests.map((request) => {\r\n        let {component, key, param, lang = pageLang} = request;\r\n        if (!component) {\r\n            component = 'core';\r\n        }\r\n\r\n        const cacheKey = getCacheKey({key, component, lang});\r\n\r\n        // Helper function to add the promise to cache.\r\n        const buildReturn = (promise) => {\r\n            // Make sure the promise cache contains our promise.\r\n            promiseCache[cacheKey] = promise;\r\n            return promise;\r\n        };\r\n\r\n        // Check if we can serve the string straight from M.str.\r\n        if (component in M.str && key in M.str[component]) {\r\n            return buildReturn(new Promise((resolve) => {\r\n                resolve(M.util.get_string(key, component, param, lang));\r\n            }));\r\n        }\r\n\r\n        // Check if the string is in the browser's local storage.\r\n        const cached = LocalStorage.get(cacheKey);\r\n        if (cached) {\r\n            M.str[component] = {...M.str[component], [key]: cached};\r\n            return buildReturn(new Promise((resolve) => {\r\n                resolve(M.util.get_string(key, component, param, lang));\r\n            }));\r\n        }\r\n\r\n        // Check if we've already loaded this string from the server.\r\n        if (cacheKey in promiseCache) {\r\n            return buildReturn(promiseCache[cacheKey]).then(() => {\r\n                return M.util.get_string(key, component, param, lang);\r\n            });\r\n        } else {\r\n            // We're going to have to ask the server for the string so\r\n            // add this string to the list of requests to be sent.\r\n            return buildReturn(new Promise((resolve, reject) => {\r\n                requestData.push({\r\n                    methodname: 'core_get_string',\r\n                    args: {\r\n                        stringid: key,\r\n                        stringparams: [],\r\n                        component,\r\n                        lang,\r\n                    },\r\n                    done: (str) => {\r\n                        // When we get the response from the server\r\n                        // we should update M.str and the browser's\r\n                        // local storage before resolving this promise.\r\n                        M.str[component] = {...M.str[component], [key]: str};\r\n                        LocalStorage.set(cacheKey, str);\r\n                        resolve(M.util.get_string(key, component, param, lang));\r\n                    },\r\n                    fail: reject\r\n                });\r\n            }));\r\n        }\r\n    });\r\n\r\n    if (requestData.length) {\r\n        // If we need to load any strings from the server then send\r\n        // off the request.\r\n        Ajax.call(requestData, true, false, false, 0, M.cfg.langrev);\r\n    }\r\n\r\n    // We need to use jQuery here because some calling code uses the\r\n    // .done handler instead of the .then handler.\r\n    return $.when.apply($, stringPromises)\r\n        .then((...strings) => strings);\r\n};\r\n\r\n/**\r\n * Add a list of strings to the caches.\r\n *\r\n * This function should typically only be called from core APIs to pre-cache values.\r\n *\r\n * @method cache_strings\r\n * @protected\r\n * @param {Object[]} strings List of strings to fetch\r\n * @param {string} strings.key The string identifer to fetch\r\n * @param {string} strings.value The string value\r\n * @param {string} [strings.component='core'] The componet to fetch from\r\n * @param {string} [strings.lang] The language to fetch a string for. Defaults to current page language.\r\n */\r\n// eslint-disable-next-line camelcase\r\nexport const cache_strings = (strings) => {\r\n    const defaultLang = $('html').attr('lang').replace(/-/g, '_');\r\n\r\n    strings.forEach(({key, component, value, lang = defaultLang}) => {\r\n        const cacheKey = ['core_str', key, component, lang].join('/');\r\n\r\n        // Check M.str caching.\r\n        if (!(component in M.str) || !(key in M.str[component])) {\r\n            if (!(component in M.str)) {\r\n                M.str[component] = {};\r\n            }\r\n\r\n            M.str[component][key] = value;\r\n        }\r\n\r\n        // Check local storage.\r\n        if (!LocalStorage.get(cacheKey)) {\r\n            LocalStorage.set(cacheKey, value);\r\n        }\r\n\r\n        // Check the promises cache.\r\n        if (!(cacheKey in promiseCache)) {\r\n            promiseCache[cacheKey] = $.Deferred().resolve(value).promise();\r\n        }\r\n    });\r\n};\r\n/* eslint-enable no-restricted-properties */\r\n"],"names":["promiseCache","key","component","param","lang","get_strings","then","results","requests","requestData","pageLang","attr","replace","stringPromises","map","request","cacheKey","_ref","getCacheKey","buildReturn","promise","M","str","Promise","resolve","util","get_string","cached","LocalStorage","get","reject","push","methodname","args","stringid","stringparams","done","set","fail","length","call","cfg","langrev","$","when","apply","strings","defaultLang","forEach","_ref2","value","join","Deferred"],"mappings":";;;;;;;;;wQA8BIA,aAAe,uBA2BO,CAACC,IAAKC,UAAWC,MAAOC,OACvCC,YAAY,CAAC,CAACJ,IAAAA,IAAKC,UAAAA,UAAWC,MAAAA,MAAOC,KAAAA,QACvCE,MAAKC,SAAWA,QAAQ,WA0CpBF,YAAeG,eACpBC,YAAc,SACZC,UAAW,mBAAE,QAAQC,KAAK,QAAQC,QAAQ,KAAM,KAKhDC,eAAiBL,SAASM,KAAKC,cAC7Bb,UAACA,UAADD,IAAYA,IAAZE,MAAiBA,MAAjBC,KAAwBA,KAAOM,UAAYK,QAC1Cb,YACDA,UAAY,cAGVc,SARUC,CAAAA,WAAChB,IAACA,IAADC,UAAMA,UAANE,KAAiBA,KAAOM,wCAA0BT,gBAAOC,sBAAaE,OAQtEc,CAAY,CAACjB,IAAAA,IAAKC,UAAAA,UAAWE,KAAAA,OAGxCe,YAAeC,UAEjBpB,aAAagB,UAAYI,QAClBA,YAIPlB,aAAamB,EAAEC,KAAOrB,OAAOoB,EAAEC,IAAIpB,kBAC5BiB,YAAY,IAAII,SAASC,UAC5BA,QAAQH,EAAEI,KAAKC,WAAWzB,IAAKC,UAAWC,MAAOC,iBAKnDuB,OAASC,sBAAaC,IAAIb,iBAC5BW,QACAN,EAAEC,IAAIpB,WAAa,IAAImB,EAAEC,IAAIpB,YAAaD,KAAM0B,QACzCR,YAAY,IAAII,SAASC,UAC5BA,QAAQH,EAAEI,KAAKC,WAAWzB,IAAKC,UAAWC,MAAOC,YAKrDY,YAAYhB,aACLmB,YAAYnB,aAAagB,WAAWV,MAAK,IACrCe,EAAEI,KAAKC,WAAWzB,IAAKC,UAAWC,MAAOC,QAK7Ce,YAAY,IAAII,SAAQ,CAACC,QAASM,UACrCrB,YAAYsB,KAAK,CACbC,WAAY,kBACZC,KAAM,CACFC,SAAUjC,IACVkC,aAAc,GACdjC,UAAAA,UACAE,KAAAA,MAEJgC,KAAOd,MAIHD,EAAEC,IAAIpB,WAAa,IAAImB,EAAEC,IAAIpB,YAAaD,KAAMqB,2BACnCe,IAAIrB,SAAUM,KAC3BE,QAAQH,EAAEI,KAAKC,WAAWzB,IAAKC,UAAWC,MAAOC,QAErDkC,KAAMR,uBAMlBrB,YAAY8B,sBAGPC,KAAK/B,aAAa,GAAM,GAAO,EAAO,EAAGY,EAAEoB,IAAIC,SAKjDC,gBAAEC,KAAKC,MAAMF,gBAAG9B,gBAClBP,MAAK,yCAAIwC,gDAAAA,qCAAYA,oEAiBAA,gBACpBC,aAAc,mBAAE,QAAQpC,KAAK,QAAQC,QAAQ,KAAM,KAEzDkC,QAAQE,SAAQC,YAAChD,IAACA,IAADC,UAAMA,UAANgD,MAAiBA,MAAjB9C,KAAwBA,KAAO2C,yBACtC/B,SAAW,CAAC,WAAYf,IAAKC,UAAWE,MAAM+C,KAAK,KAGnDjD,aAAamB,EAAEC,KAAUrB,OAAOoB,EAAEC,IAAIpB,aAClCA,aAAamB,EAAEC,MACjBD,EAAEC,IAAIpB,WAAa,IAGvBmB,EAAEC,IAAIpB,WAAWD,KAAOiD,OAIvBtB,sBAAaC,IAAIb,iCACLqB,IAAIrB,SAAUkC,OAIzBlC,YAAYhB,eACdA,aAAagB,UAAY2B,gBAAES,WAAW5B,QAAQ0B,OAAO9B"}