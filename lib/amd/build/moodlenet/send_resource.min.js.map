{"version":3,"file":"send_resource.min.js","sources":["../../src/moodlenet/send_resource.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A module to handle Share operations of the MoodleNet.\r\n *\r\n * @module     core/moodlenet/send_resource\r\n * @copyright  2023 Huong Nguyen <huongnv13@gmail.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      4.2\r\n */\r\n\r\nimport Config from 'core/config';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport {alert as displayAlert, addNotification, exception as displayException} from 'core/notification';\r\nimport {get_string as getString} from 'core/str';\r\nimport Prefetch from \"core/prefetch\";\r\nimport * as Templates from 'core/templates';\r\nimport * as MoodleNetService from 'core/moodlenet/service';\r\nimport SendActivityModal from 'core/moodlenet/send_activity_modal';\r\n\r\nconst TYPE_ACTIVITY = \"activity\";\r\n\r\nlet currentModal;\r\nlet siteSupportUrl;\r\nlet issuerId;\r\nlet courseId;\r\nlet cmId;\r\nlet shareFormat;\r\n\r\n/**\r\n * Handle send to MoodleNet.\r\n *\r\n * @param {int} issuerId The OAuth 2 issuer ID.\r\n * @param {int} cmId The course module ID.\r\n * @param {int} shareFormat The share format.\r\n */\r\nconst sendToMoodleNet = (issuerId, cmId, shareFormat) => {\r\n    const $modal = currentModal.getModal();\r\n    const modal = $modal[0];\r\n    modal.querySelector('.modal-header').classList.remove('no-border');\r\n    modal.querySelector('.modal-header').classList.add('no-header-text');\r\n\r\n    currentModal.setBody(Templates.render('core/moodlenet/send_activity_modal_packaging', {}));\r\n    currentModal.hideFooter();\r\n\r\n    MoodleNetService.sendActivity(issuerId, cmId, shareFormat).then(async(data) => {\r\n        const status = data.status;\r\n        const resourceUrl = data.resourceurl;\r\n        return responseFromMoodleNet(status, resourceUrl);\r\n    }).catch(displayException);\r\n};\r\n\r\n/**\r\n * Handle response from MoodleNet.\r\n *\r\n * @param {boolean} status Response status. True if successful.\r\n * @param {String} resourceUrl Resource URL.\r\n */\r\nconst responseFromMoodleNet = (status, resourceUrl = '') => {\r\n    const $modal = currentModal.getModal();\r\n    const modal = $modal[0];\r\n    modal.querySelector('.modal-header').classList.add('no-border');\r\n    currentModal.setBody(Templates.render('core/moodlenet/send_activity_modal_done', {\r\n        success: status,\r\n        sitesupporturl: siteSupportUrl,\r\n    }));\r\n\r\n    if (status) {\r\n        currentModal.setFooter(Templates.render('core/moodlenet/send_activity_modal_footer_view', {\r\n            resourceurl: resourceUrl,\r\n        }));\r\n        currentModal.showFooter();\r\n    }\r\n};\r\n\r\n/**\r\n * Handle authorization with MoodleNet server.\r\n *\r\n * @param {int} issuerId The OAuth 2 issuer ID.\r\n * @return {promise}\r\n */\r\nconst handleAuthorization = (issuerId) => {\r\n    const windowsizewidth = 550;\r\n    const windowsizeheight = 550;\r\n\r\n    // Check if the user is authorized with MoodleNet or not.\r\n    return MoodleNetService.authorizationCheck(issuerId, courseId).then(async(data) => {\r\n        if (!data.status) {\r\n            // Not yet authorized.\r\n            // Declare moodleNetAuthorize variable, so we can call it later in the callback.\r\n            window.moodleNetAuthorize = (error, errorDescription) => {\r\n                // This will be called by the callback after the authorization is successful.\r\n                if (error == '') {\r\n                    handleAuthorization(issuerId);\r\n                } else if (error !== 'access_denied') {\r\n                    displayAlert(\r\n                        'Authorization error',\r\n                        'Error: ' + error + '<br><br>Error description: ' + errorDescription,\r\n                        'Cancel'\r\n                    );\r\n                }\r\n            };\r\n            // Open the login url of the OAuth 2 issuer for user to login into MoodleNet and authorize.\r\n            return window.open(data.loginurl, 'moodlenet_auth',\r\n                `location=0,status=0,width=${windowsizewidth},height=${windowsizeheight},scrollbars=yes`);\r\n        } else {\r\n            // Already authorized.\r\n            return sendToMoodleNet(issuerId, cmId, shareFormat);\r\n        }\r\n    }).catch(displayException);\r\n};\r\n\r\n/**\r\n * Register events.\r\n */\r\nconst registerEventListeners = () => {\r\n    document.addEventListener('click', e => {\r\n        const shareAction = e.target.closest('[data-action=\"sendtomoodlenet\"]');\r\n        const sendAction = e.target.closest('.moodlenet-action-buttons [data-action=\"share\"]');\r\n        if (shareAction) {\r\n            e.preventDefault();\r\n            const type = shareAction.getAttribute('data-type');\r\n            const shareType = shareAction.getAttribute('data-sharetype');\r\n            const cmId = Config.contextInstanceId;\r\n            if (type == TYPE_ACTIVITY) {\r\n                MoodleNetService.getActivityInformation(cmId).then(async(data) => {\r\n                    if (data.status) {\r\n                        siteSupportUrl = data.supportpageurl;\r\n                        issuerId = data.issuerid;\r\n                        const modalPromise = ModalFactory.create({\r\n                            type: SendActivityModal.TYPE,\r\n                            large: true,\r\n                            templateContext: {\r\n                                'activitytype': data.type,\r\n                                'activityname': data.name,\r\n                                'sharetype': await getString('moodlenet:sharetype' + shareType, 'moodle'),\r\n                                'server': data.server,\r\n                            }\r\n                        });\r\n                        return modalPromise.then(modal => {\r\n                            currentModal = modal;\r\n                            modal.show();\r\n                            return modal;\r\n                        }).catch(displayException);\r\n                    } else {\r\n                        return addNotification({\r\n                            message: data.warnings[0].message,\r\n                            type: 'error'\r\n                        });\r\n                    }\r\n                }).catch(displayException);\r\n            }\r\n        }\r\n\r\n        if (sendAction) {\r\n            e.preventDefault();\r\n            courseId = Config.courseId;\r\n            cmId = Config.contextInstanceId;\r\n            shareFormat = 0;\r\n            handleAuthorization(issuerId);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Initialize.\r\n */\r\nexport const init = () => {\r\n    Prefetch.prefetchTemplates([\r\n        'core/moodlenet/send_activity_modal_base',\r\n        'core/moodlenet/send_activity_modal_packaging',\r\n        'core/moodlenet/send_activity_modal_done',\r\n        'core/moodlenet/send_activity_modal_footer_view',\r\n    ]);\r\n    registerEventListeners();\r\n};\r\n"],"names":["currentModal","siteSupportUrl","issuerId","courseId","cmId","shareFormat","responseFromMoodleNet","status","resourceUrl","$modal","getModal","modal","querySelector","classList","add","setBody","Templates","render","success","sitesupporturl","setFooter","resourceurl","showFooter","handleAuthorization","MoodleNetService","authorizationCheck","then","async","data","remove","hideFooter","sendActivity","catch","displayException","sendToMoodleNet","window","moodleNetAuthorize","error","errorDescription","open","loginurl","prefetchTemplates","document","addEventListener","e","shareAction","target","closest","sendAction","preventDefault","type","getAttribute","shareType","Config","contextInstanceId","getActivityInformation","supportpageurl","issuerid","ModalFactory","create","SendActivityModal","TYPE","large","templateContext","name","server","show","message","warnings"],"mappings":";;;;;;;;0YAmCIA,aACAC,eACAC,SACAC,SACAC,KACAC,kBA+BEC,sBAAwB,SAACC,YAAQC,mEAAc,SAC3CC,OAAST,aAAaU,WACtBC,MAAQF,OAAO,GACrBE,MAAMC,cAAc,iBAAiBC,UAAUC,IAAI,aACnDd,aAAae,QAAQC,UAAUC,OAAO,0CAA2C,CAC7EC,QAASX,OACTY,eAAgBlB,kBAGhBM,SACAP,aAAaoB,UAAUJ,UAAUC,OAAO,iDAAkD,CACtFI,YAAab,eAEjBR,aAAasB,eAUfC,oBAAuBrB,UAKlBsB,iBAAiBC,mBAAmBvB,SAAUC,UAAUuB,MAAKC,MAAAA,MAC3DC,KAAKrB,OAnDM,EAACL,SAAUE,KAAMC,qBAE/BM,MADSX,aAAaU,WACP,GACrBC,MAAMC,cAAc,iBAAiBC,UAAUgB,OAAO,aACtDlB,MAAMC,cAAc,iBAAiBC,UAAUC,IAAI,kBAEnDd,aAAae,QAAQC,UAAUC,OAAO,+CAAgD,KACtFjB,aAAa8B,aAEbN,iBAAiBO,aAAa7B,SAAUE,KAAMC,aAAaqB,MAAKC,MAAAA,aACtDpB,OAASqB,KAAKrB,OACdC,YAAcoB,KAAKP,mBAClBf,sBAAsBC,OAAQC,gBACtCwB,MAAMC,0BA0DMC,CAAgBhC,SAAUE,KAAMC,cAjBvC8B,OAAOC,mBAAqB,CAACC,MAAOC,oBAEnB,IAATD,MACAd,oBAAoBrB,UACH,kBAAVmC,+BAEH,sBACA,UAAYA,MAAQ,8BAAgCC,iBACpD,WAKLH,OAAOI,KAAKX,KAAKY,SAAU,qDArBlB,uBACC,2BA0BtBR,MAAMC,uCA0DO,uBACPQ,kBAAkB,CACvB,0CACA,+CACA,0CACA,mDAxDJC,SAASC,iBAAiB,SAASC,UACzBC,YAAcD,EAAEE,OAAOC,QAAQ,mCAC/BC,WAAaJ,EAAEE,OAAOC,QAAQ,sDAChCF,YAAa,CACbD,EAAEK,uBACIC,KAAOL,YAAYM,aAAa,aAChCC,UAAYP,YAAYM,aAAa,kBACrC/C,KAAOiD,gBAAOC,kBAvGV,YAwGNJ,MACA1B,iBAAiB+B,uBAAuBnD,MAAMsB,MAAKC,MAAAA,MAC3CC,KAAKrB,QACLN,eAAiB2B,KAAK4B,eACtBtD,SAAW0B,KAAK6B,SACKC,uBAAaC,OAAO,CACrCT,KAAMU,6BAAkBC,KACxBC,OAAO,EACPC,gBAAiB,cACGnC,KAAKsB,kBACLtB,KAAKoC,qBACF,mBAAU,sBAAwBZ,UAAW,iBACtDxB,KAAKqC,UAGHvC,MAAKf,QACrBX,aAAeW,MACfA,MAAMuD,OACCvD,SACRqB,MAAMC,2BAEF,iCAAgB,CACnBkC,QAASvC,KAAKwC,SAAS,GAAGD,QAC1BjB,KAAM,YAGflB,MAAMC,yBAIbe,aACAJ,EAAEK,iBACF9C,SAAWkD,gBAAOlD,SAClBC,KAAOiD,gBAAOC,kBACdjD,YAAc,EACdkB,oBAAoBrB"}