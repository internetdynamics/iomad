{"version":3,"file":"drawer.min.js","sources":["../src/drawer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Controls the drawer.\r\n *\r\n * @module     core/drawer\r\n * @copyright  2019 Jun Pataleta <jun@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport $ from 'jquery';\r\nimport * as PubSub from 'core/pubsub';\r\nimport * as Aria from 'core/aria';\r\nimport DrawerEvents from 'core/drawer_events';\r\n\r\n/**\r\n * Show the drawer.\r\n *\r\n * @param {Object} root The drawer container.\r\n */\r\nconst show = root => {\r\n    // Ensure that it is a jQuery.\r\n    root = $(root);\r\n\r\n    Aria.unhide(root.get());\r\n    root.removeClass('hidden');\r\n    root.attr('aria-expanded', true);\r\n    root.focus();\r\n\r\n    PubSub.publish(DrawerEvents.DRAWER_SHOWN, root);\r\n};\r\n\r\n/**\r\n * Hide the drawer.\r\n *\r\n * @param {Object} root The drawer container.\r\n */\r\nconst hide = root => {\r\n    // Ensure that it is a jQuery.\r\n    root = $(root);\r\n\r\n    root.addClass('hidden');\r\n    root.attr('aria-expanded', false);\r\n    Aria.hide(root.get());\r\n\r\n    PubSub.publish(DrawerEvents.DRAWER_HIDDEN, root);\r\n};\r\n\r\n/**\r\n * Check if the drawer is visible.\r\n *\r\n * @param {Object} root The drawer container.\r\n * @return {boolean}\r\n */\r\nconst isVisible = (root) => {\r\n    let isHidden = root.hasClass('hidden');\r\n    return !isHidden;\r\n};\r\n\r\n/**\r\n * Toggle the drawer visibility.\r\n *\r\n * @param {Object} root The drawer container.\r\n */\r\nconst toggle = (root) => {\r\n    if (isVisible(root)) {\r\n        hide(root);\r\n    } else {\r\n        show(root);\r\n    }\r\n};\r\n\r\n/**\r\n * Add event listeners to toggle the drawer.\r\n *\r\n * @param {Object} root The drawer container.\r\n * @param {Object} toggleElements The toggle elements.\r\n */\r\nconst registerToggles = (root, toggleElements) => {\r\n    let openTrigger = null;\r\n    toggleElements.attr('aria-expanded', isVisible(root));\r\n\r\n    toggleElements.on('click', (e) => {\r\n        e.preventDefault();\r\n        const wasVisible = isVisible(root);\r\n        toggle(root);\r\n        toggleElements.attr('aria-expanded', !wasVisible);\r\n\r\n        if (!wasVisible) {\r\n            // Remember which trigger element opened the drawer.\r\n            openTrigger = toggleElements.filter((index, element) => {\r\n                return element == e.target || element.contains(e.target);\r\n            });\r\n        } else if (openTrigger) {\r\n            // The drawer has gone from open to close so we need to set the focus back\r\n            // to the element that openend it.\r\n            openTrigger.focus();\r\n            openTrigger = null;\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Find the root element of the drawer based on the using the drawer content root's ID.\r\n *\r\n * @param {Object} contentRoot The drawer content's root element.\r\n * @returns {*|jQuery}\r\n */\r\nconst getDrawerRoot = (contentRoot) => {\r\n    contentRoot = $(contentRoot);\r\n    return contentRoot.closest('[data-region=\"right-hand-drawer\"]');\r\n};\r\n\r\nexport default {\r\n    hide: hide,\r\n    show: show,\r\n    isVisible: isVisible,\r\n    toggle: toggle,\r\n    registerToggles: registerToggles,\r\n    getDrawerRoot: getDrawerRoot\r\n};\r\n"],"names":["show","root","Aria","unhide","get","removeClass","attr","focus","PubSub","publish","DrawerEvents","DRAWER_SHOWN","hide","addClass","DRAWER_HIDDEN","isVisible","hasClass","toggle","registerToggles","toggleElements","openTrigger","on","e","preventDefault","wasVisible","filter","index","element","target","contains","getDrawerRoot","contentRoot","closest"],"mappings":";;;;;;;mQAgCMA,KAAOC,OAETA,MAAO,mBAAEA,MAETC,KAAKC,OAAOF,KAAKG,OACjBH,KAAKI,YAAY,UACjBJ,KAAKK,KAAK,iBAAiB,GAC3BL,KAAKM,QAELC,OAAOC,QAAQC,uBAAaC,aAAcV,OAQxCW,KAAOX,QAETA,MAAO,mBAAEA,OAEJY,SAAS,UACdZ,KAAKK,KAAK,iBAAiB,GAC3BJ,KAAKU,KAAKX,KAAKG,OAEfI,OAAOC,QAAQC,uBAAaI,cAAeb,OASzCc,UAAad,OACAA,KAAKe,SAAS,UAS3BC,OAAUhB,OACRc,UAAUd,MACVW,KAAKX,MAELD,KAAKC,oBA6CE,CACXW,KAAMA,KACNZ,KAAMA,KACNe,UAAWA,UACXE,OAAQA,OACRC,gBAxCoB,CAACjB,KAAMkB,sBACvBC,YAAc,KAClBD,eAAeb,KAAK,gBAAiBS,UAAUd,OAE/CkB,eAAeE,GAAG,SAAUC,IACxBA,EAAEC,uBACIC,WAAaT,UAAUd,MAC7BgB,OAAOhB,MACPkB,eAAeb,KAAK,iBAAkBkB,YAEjCA,WAKMJ,cAGPA,YAAYb,QACZa,YAAc,MAPdA,YAAcD,eAAeM,QAAO,CAACC,MAAOC,UACjCA,SAAWL,EAAEM,QAAUD,QAAQE,SAASP,EAAEM,cA4B7DE,cAXmBC,cACnBA,aAAc,mBAAEA,cACGC,QAAQ"}