{"version":3,"file":"events.min.js","sources":["../../../src/local/inplace_editable/events.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Inplace editable module events\r\n *\r\n * @module      core/local/inplace_editable/events\r\n * @copyright   2021 Paul Holden <paulh@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\n\r\n/**\r\n * Module events\r\n *\r\n * @constant\r\n * @property {String} elementUpdated See {@link event:core/inplace_editable:updated}\r\n * @property {String} elementUpdateFailed See {@link event:core/inplace_editable:updateFailed}\r\n */\r\nexport const eventTypes = {\r\n\r\n    /**\r\n     * Event triggered when an element has been updated\r\n     *\r\n     * @event core/inplace_editable:updated\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The element that was updated\r\n     * @property {Object} detail\r\n     * @property {Object} detail.ajaxreturn The data returned from the update AJAX request\r\n     * @property {String} detail.oldvalue The previous value of the element\r\n     */\r\n    elementUpdated: 'core/inplace_editable:updated',\r\n\r\n    /**\r\n     * Event triggered when an element update has failed\r\n     *\r\n     * @event core/inplace_editable:updateFailed\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The element that failed to update\r\n     * @property {Object} detail\r\n     * @property {Object} detail.exception The raised exception\r\n     * @property {String} detail.newvalue The intended value of the element\r\n     */\r\n    elementUpdateFailed: 'core/inplace_editable:updateFailed',\r\n};\r\n\r\n/**\r\n * Notify element of successful update\r\n *\r\n * @method\r\n * @param {HTMLElement} element The element that was updated\r\n * @param {Object} ajaxreturn The data returned from the update AJAX request\r\n * @param {String} oldvalue The previous value of the element\r\n * @returns {CustomEvent}\r\n * @fires event:core/inplace_editable:updated\r\n */\r\nexport const notifyElementUpdated = (element, ajaxreturn, oldvalue) => dispatchEvent(\r\n    eventTypes.elementUpdated,\r\n    {\r\n        ajaxreturn,\r\n        oldvalue,\r\n    },\r\n    element\r\n);\r\n\r\n/**\r\n * Notify element of failed update\r\n *\r\n * @method\r\n * @param {HTMLElement} element The element that failed to update\r\n * @param {Object} exception The raised exception\r\n * @param {String} newvalue The intended value of the element\r\n * @returns {CustomEvent}\r\n * @fires event:core/inplace_editable:updateFailed\r\n */\r\nexport const notifyElementUpdateFailed = (element, exception, newvalue) => dispatchEvent(\r\n    eventTypes.elementUpdateFailed,\r\n    {\r\n        exception,\r\n        newvalue,\r\n    },\r\n    element,\r\n    {\r\n        cancelable: true\r\n    }\r\n);\r\n\r\nlet legacyEventsRegistered = false;\r\nif (!legacyEventsRegistered) {\r\n    // The following event triggers are legacy and will be removed in the future.\r\n    // The following approach provides a backwards-compatability layer for the new events.\r\n    // Code should be updated to make use of native events.\r\n\r\n    // Listen for the new native elementUpdated event, and trigger the legacy jQuery event.\r\n    document.addEventListener(eventTypes.elementUpdated, event => {\r\n        const legacyEvent = $.Event('updated', event.detail);\r\n        $(event.target).trigger(legacyEvent);\r\n    });\r\n\r\n    // Listen for the new native elementUpdateFailed event, and trigger the legacy jQuery event.\r\n    document.addEventListener(eventTypes.elementUpdateFailed, event => {\r\n        const legacyEvent = $.Event('updatefailed', event.detail);\r\n        $(event.target).trigger(legacyEvent);\r\n\r\n        // If the legacy event is cancelled, so should the native event.\r\n        if (legacyEvent.isDefaultPrevented()) {\r\n            event.preventDefault();\r\n        }\r\n    });\r\n\r\n    legacyEventsRegistered = true;\r\n}\r\n"],"names":["eventTypes","elementUpdated","elementUpdateFailed","element","ajaxreturn","oldvalue","exception","newvalue","cancelable","legacyEventsRegistered","document","addEventListener","event","legacyEvent","$","Event","detail","target","trigger","isDefaultPrevented","preventDefault"],"mappings":";;;;;;;uNAiCaA,WAAa,CAYtBC,eAAgB,gCAYhBC,oBAAqB,mGAaW,CAACC,QAASC,WAAYC,YAAa,mCACnEL,WAAWC,eACX,CACIG,WAAAA,WACAC,SAAAA,UAEJF,4CAaqC,CAACA,QAASG,UAAWC,YAAa,mCACvEP,WAAWE,oBACX,CACII,UAAAA,UACAC,SAAAA,UAEJJ,QACA,CACIK,YAAY,QAIhBC,wBAAyB,EACxBA,yBAMDC,SAASC,iBAAiBX,WAAWC,gBAAgBW,cAC3CC,YAAcC,gBAAEC,MAAM,UAAWH,MAAMI,4BAC3CJ,MAAMK,QAAQC,QAAQL,gBAI5BH,SAASC,iBAAiBX,WAAWE,qBAAqBU,cAChDC,YAAcC,gBAAEC,MAAM,eAAgBH,MAAMI,4BAChDJ,MAAMK,QAAQC,QAAQL,aAGpBA,YAAYM,sBACZP,MAAMQ,oBAIdX,wBAAyB"}