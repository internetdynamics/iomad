{"version":3,"file":"overlay.min.js","sources":["../../../src/local/reactive/overlay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Element overlay methods.\r\n *\r\n * This module is used to create overlay information on components. For example\r\n * to generate or destroy file drop-zones.\r\n *\r\n * @module     core/local/reactive/overlay\r\n * @copyright  2022 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Templates from 'core/templates';\r\nimport Prefetch from 'core/prefetch';\r\n\r\n// Prefetch the overlay html.\r\nconst overlayTemplate = 'core/local/reactive/overlay';\r\nPrefetch.prefetchTemplate(overlayTemplate);\r\n\r\n/**\r\n * @var {boolean} isInitialized if the module is capturing the proper page events.\r\n */\r\nlet isInitialized = false;\r\n\r\n/**\r\n * @var {Object} isInitialized if the module is capturing the proper page events.\r\n */\r\nconst selectors = {\r\n    OVERLAY: \"[data-overlay]\",\r\n    REPOSITION: \"[data-overlay-dynamic]\",\r\n    NAVBAR: \"nav.navbar.fixed-top\",\r\n};\r\n\r\n/**\r\n * Adds an overlay to a specific page element.\r\n *\r\n * @param {Object} definition the overlay definition.\r\n * @param {String|Promise} definition.content an optional overlay content.\r\n * @param {String|Promise} definition.icon an optional icon content.\r\n * @param {String} definition.classes an optional CSS classes\r\n * @param {HTMLElement} parent the parent object\r\n * @return {HTMLElement|undefined} the new page element.\r\n */\r\nexport const addOverlay = async(definition, parent) => {\r\n    // Validate non of the passed params is a promise.\r\n    if (definition.content && typeof definition.content !== 'string') {\r\n        definition.content = await definition.content;\r\n    }\r\n    if (definition.icon && typeof definition.icon !== 'string') {\r\n        definition.icon = await definition.icon;\r\n    }\r\n    const data = {\r\n        content: definition.content,\r\n        css: definition.classes ?? 'file-drop-zone',\r\n    };\r\n    let overlay;\r\n    try {\r\n        const {html, js} = await Templates.renderForPromise(overlayTemplate, data);\r\n        Templates.appendNodeContents(parent, html, js);\r\n        overlay = parent.querySelector(selectors.OVERLAY);\r\n        rePositionPreviewInfoElement(overlay);\r\n        init();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n    return overlay;\r\n};\r\n\r\n/**\r\n * Adds an overlay to a specific page element.\r\n *\r\n * @param {HTMLElement} overlay the parent object\r\n */\r\nexport const removeOverlay = (overlay) => {\r\n    if (!overlay || !overlay.parentNode) {\r\n        return;\r\n    }\r\n    // Remove any forced parentNode position.\r\n    if (overlay.dataset?.overlayPosition) {\r\n        delete overlay.parentNode.style.position;\r\n    }\r\n    overlay.parentNode.removeChild(overlay);\r\n};\r\n\r\nexport const removeAllOverlays = () => {\r\n    document.querySelectorAll(selectors.OVERLAY).forEach(\r\n        (overlay) => {\r\n            removeOverlay(overlay);\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * Re-position the preview information element by calculating the section position.\r\n *\r\n * @param {Object} overlay the overlay element.\r\n */\r\nconst rePositionPreviewInfoElement = function(overlay) {\r\n    if (!overlay) {\r\n        throw new Error('Inexistent overlay element');\r\n    }\r\n    // Add relative position to the parent object.\r\n    if (!overlay.parentNode?.style?.position) {\r\n        overlay.parentNode.style.position = 'relative';\r\n        overlay.dataset.overlayPosition = \"true\";\r\n    }\r\n    // Get the element to reposition.\r\n    const target = overlay.querySelector(selectors.REPOSITION);\r\n    if (!target) {\r\n        return;\r\n    }\r\n    // Get the new bounds.\r\n    const rect = overlay.getBoundingClientRect();\r\n    const sectionHeight = parseInt(window.getComputedStyle(overlay).height, 10);\r\n    const sectionOffset = rect.top;\r\n    const previewHeight = parseInt(window.getComputedStyle(target).height, 10) +\r\n        (2 * parseInt(window.getComputedStyle(target).padding, 10));\r\n    // Calculate the new target position.\r\n    let top, bottom;\r\n    if (sectionOffset < 0) {\r\n        if (sectionHeight + sectionOffset >= previewHeight) {\r\n            // We have enough space here, just stick the preview to the top.\r\n            let offSetTop = 0 - sectionOffset;\r\n            const navBar = document.querySelector(selectors.NAVBAR);\r\n            if (navBar) {\r\n                offSetTop = offSetTop + navBar.offsetHeight;\r\n            }\r\n            top = offSetTop + 'px';\r\n            bottom = 'unset';\r\n        } else {\r\n            // We do not have enough space here, just stick the preview to the bottom.\r\n            top = 'unset';\r\n            bottom = 0;\r\n        }\r\n    } else {\r\n        top = 0;\r\n        bottom = 'unset';\r\n    }\r\n\r\n    target.style.top = top;\r\n    target.style.bottom = bottom;\r\n};\r\n\r\n// Update overlays when the page scrolls.\r\nconst init = () => {\r\n    if (isInitialized) {\r\n        return;\r\n    }\r\n    // Add scroll events.\r\n    document.addEventListener('scroll', () => {\r\n        document.querySelectorAll(selectors.OVERLAY).forEach(\r\n            (overlay) => {\r\n                rePositionPreviewInfoElement(overlay);\r\n            }\r\n        );\r\n    }, true);\r\n};\r\n"],"names":["prefetchTemplate","selectors","async","definition","parent","content","icon","data","css","classes","overlay","html","js","Templates","renderForPromise","appendNodeContents","querySelector","rePositionPreviewInfoElement","init","error","removeOverlay","parentNode","dataset","_overlay$dataset","overlayPosition","style","position","removeChild","document","querySelectorAll","forEach","Error","_overlay$parentNode","_overlay$parentNode$s","target","rect","getBoundingClientRect","sectionHeight","parseInt","window","getComputedStyle","height","sectionOffset","top","previewHeight","padding","bottom","offSetTop","navBar","offsetHeight","addEventListener"],"mappings":";;;;;;;;;;sPA+BSA,iBADe,qCAWlBC,kBACO,iBADPA,qBAEU,yBAFVA,iBAGM,2CAacC,MAAMC,WAAYC,kCAEpCD,WAAWE,SAAyC,iBAAvBF,WAAWE,UACxCF,WAAWE,cAAgBF,WAAWE,SAEtCF,WAAWG,MAAmC,iBAApBH,WAAWG,OACrCH,WAAWG,WAAaH,WAAWG,YAEjCC,KAAO,CACTF,QAASF,WAAWE,QACpBG,gCAAKL,WAAWM,2DAAW,sBAE3BC,kBAEMC,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAzCnB,8BAyCqDP,yBAC3DQ,mBAAmBX,OAAQO,KAAMC,IAC3CF,QAAUN,OAAOY,cAAcf,mBAC/BgB,6BAA6BP,SAC7BQ,OACF,MAAOC,aACCA,aAEHT,eAQEU,cAAiBV,+BACrBA,SAAYA,QAAQW,sCAIrBX,QAAQY,qCAARC,iBAAiBC,wBACVd,QAAQW,WAAWI,MAAMC,SAEpChB,QAAQW,WAAWM,YAAYjB,2EAGF,KAC7BkB,SAASC,iBAAiB5B,mBAAmB6B,SACxCpB,UACGU,cAAcV,mBAUpBO,6BAA+B,SAASP,2DACrCA,cACK,IAAIqB,MAAM,0DAGfrB,QAAQW,yEAARW,oBAAoBP,wCAApBQ,sBAA2BP,WAC5BhB,QAAQW,WAAWI,MAAMC,SAAW,WACpChB,QAAQY,QAAQE,gBAAkB,cAGhCU,OAASxB,QAAQM,cAAcf,0BAChCiC,oBAICC,KAAOzB,QAAQ0B,wBACfC,cAAgBC,SAASC,OAAOC,iBAAiB9B,SAAS+B,OAAQ,IAClEC,cAAgBP,KAAKQ,IACrBC,cAAgBN,SAASC,OAAOC,iBAAiBN,QAAQO,OAAQ,IAClE,EAAIH,SAASC,OAAOC,iBAAiBN,QAAQW,QAAS,QAEvDF,IAAKG,UACLJ,cAAgB,KACZL,cAAgBK,eAAiBE,cAAe,KAE5CG,UAAY,EAAIL,oBACdM,OAASpB,SAASZ,cAAcf,kBAClC+C,SACAD,WAAwBC,OAAOC,cAEnCN,IAAMI,UAAY,KAClBD,OAAS,aAGTH,IAAM,QACNG,OAAS,OAGbH,IAAM,EACNG,OAAS,QAGbZ,OAAOT,MAAMkB,IAAMA,IACnBT,OAAOT,MAAMqB,OAASA,QAIpB5B,KAAO,KAKTU,SAASsB,iBAAiB,UAAU,KAChCtB,SAASC,iBAAiB5B,mBAAmB6B,SACxCpB,UACGO,6BAA6BP,eAGtC"}