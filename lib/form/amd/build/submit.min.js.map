{"version":3,"file":"submit.min.js","sources":["../src/submit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Submit button JavaScript. All submit buttons will be automatically disabled once the form is\r\n * submitted, unless that submission results in an error/cancelling the submit.\r\n *\r\n * @module core_form/submit\r\n * @copyright 2019 The Open University\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since 3.8\r\n */\r\n\r\nimport {eventTypes} from 'core_form/events';\r\n\r\n/** @property {number} ID for setInterval used when polling for download cookie */\r\nlet cookieListener = 0;\r\n\r\n/** @property {Array} Array of buttons that need re-enabling if we get a download cookie */\r\nconst cookieListeningButtons = [];\r\n\r\n/** @property {number} Number of files uploading. */\r\nlet currentUploadCount = 0;\r\n\r\n/** @property {Array} Array of buttons that need re-enabling if we get a upload process. */\r\nconst uploadListeningButtons = [];\r\n\r\n/** @property {Boolean} Is upload listeners registered? */\r\nlet uploadListenersRegistered = false;\r\n\r\n/**\r\n * Listens in case a download cookie is provided.\r\n *\r\n * This function is used to detect file downloads. If there is a file download then we get a\r\n * beforeunload event, but the page is never unloaded and when the file download completes we\r\n * should re-enable the buttons. We detect this by watching for a specific cookie.\r\n *\r\n * PHP function \\core_form\\util::form_download_complete() can be used to send this cookie.\r\n *\r\n * @param {HTMLElement} button Button to re-enable\r\n */\r\nconst listenForDownloadCookie = (button) => {\r\n    cookieListeningButtons.push(button);\r\n    if (!cookieListener) {\r\n        cookieListener = setInterval(() => {\r\n            // Look for cookie.\r\n            const parts = document.cookie.split(getCookieName() + '=');\r\n            if (parts.length == 2) {\r\n                // We found the cookie, so the file is ready. Expire the cookie and cancel polling.\r\n                clearDownloadCookie();\r\n                clearInterval(cookieListener);\r\n                cookieListener = 0;\r\n\r\n                // Re-enable all the buttons.\r\n                cookieListeningButtons.forEach((button) => {\r\n                    button.disabled = false;\r\n                });\r\n            }\r\n        }, 500);\r\n    }\r\n};\r\n\r\n/**\r\n * Gets a unique name for the download cookie.\r\n *\r\n * @returns {string} Cookie name\r\n */\r\nconst getCookieName = () => {\r\n    return 'moodledownload_' + M.cfg.sesskey;\r\n};\r\n\r\n/**\r\n * Clears the download cookie if there is one.\r\n */\r\nconst clearDownloadCookie = () => {\r\n    document.cookie = encodeURIComponent(getCookieName()) + '=deleted; expires=' + new Date(0).toUTCString();\r\n};\r\n\r\n/**\r\n * Enable submit buttons when all files are uploaded.\r\n */\r\nconst checkUploadCount = () => {\r\n    if (currentUploadCount) {\r\n        uploadListeningButtons.forEach(button => {\r\n            button.disabled = true;\r\n        });\r\n    } else {\r\n        uploadListeningButtons.forEach(button => {\r\n            button.disabled = false;\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Initialises submit buttons.\r\n *\r\n * @param {String} elementId Form button element\r\n * @listens event:uploadStarted\r\n * @listens event:uploadCompleted\r\n */\r\nexport const init = (elementId) => {\r\n    const button = document.getElementById(elementId);\r\n    if (button === null) {\r\n        // Exit early if invalid element id passed.\r\n        return;\r\n    }\r\n\r\n    // If buttons are disabled by default, we do not enable them when file upload completed event is fired.\r\n    if (!button.disabled) {\r\n        uploadListeningButtons.push(button);\r\n    }\r\n\r\n    if (!uploadListenersRegistered) {\r\n        // Add event listener for file upload start.\r\n        document.addEventListener(eventTypes.uploadStarted, () => {\r\n            currentUploadCount++;\r\n            checkUploadCount();\r\n        });\r\n\r\n        // Add event listener for file upload complete.\r\n        document.addEventListener(eventTypes.uploadCompleted, () => {\r\n            currentUploadCount--;\r\n            checkUploadCount();\r\n        });\r\n        uploadListenersRegistered = true;\r\n    }\r\n\r\n    // If the form has double submit protection disabled, do nothing.\r\n    if (button.form.dataset.doubleSubmitProtection === 'off') {\r\n        return;\r\n    }\r\n    button.form.addEventListener('submit', function(event) {\r\n        // Only disable it if the browser is really going to another page as a result of the\r\n        // submit.\r\n        const disableAction = function() {\r\n            // If the submit was cancelled, or the button is already disabled, don't do anything.\r\n            if (event.defaultPrevented || button.disabled) {\r\n                return;\r\n            }\r\n\r\n            button.disabled = true;\r\n            clearDownloadCookie();\r\n            listenForDownloadCookie(button);\r\n        };\r\n        window.addEventListener('beforeunload', disableAction);\r\n        // If there is no beforeunload event as a result of this form submit, then the form\r\n        // submit must have been cancelled, so don't disable the button if the page is\r\n        // unloaded later.\r\n        setTimeout(function() {\r\n            window.removeEventListener('beforeunload', disableAction);\r\n        }, 0);\r\n    }, false);\r\n};\r\n"],"names":["cookieListener","cookieListeningButtons","currentUploadCount","uploadListeningButtons","uploadListenersRegistered","getCookieName","M","cfg","sesskey","clearDownloadCookie","document","cookie","encodeURIComponent","Date","toUTCString","checkUploadCount","forEach","button","disabled","elementId","getElementById","push","addEventListener","eventTypes","uploadStarted","uploadCompleted","form","dataset","doubleSubmitProtection","event","disableAction","defaultPrevented","setInterval","split","length","clearInterval","listenForDownloadCookie","window","setTimeout","removeEventListener"],"mappings":";;;;;;;;;;IA4BIA,eAAiB,QAGfC,uBAAyB,OAG3BC,mBAAqB,QAGnBC,uBAAyB,OAG3BC,2BAA4B,QAuC1BC,cAAgB,IACX,kBAAoBC,EAAEC,IAAIC,QAM/BC,oBAAsB,KACxBC,SAASC,OAASC,mBAAmBP,iBAAmB,qBAAuB,IAAIQ,KAAK,GAAGC,eAMzFC,iBAAmB,KACjBb,mBACAC,uBAAuBa,SAAQC,SAC3BA,OAAOC,UAAW,KAGtBf,uBAAuBa,SAAQC,SAC3BA,OAAOC,UAAW,oBAYTC,kBACXF,OAASP,SAASU,eAAeD,WACxB,OAAXF,SAMCA,OAAOC,UACRf,uBAAuBkB,KAAKJ,QAG3Bb,4BAEDM,SAASY,iBAAiBC,mBAAWC,eAAe,KAChDtB,qBACAa,sBAIJL,SAASY,iBAAiBC,mBAAWE,iBAAiB,KAClDvB,qBACAa,sBAEJX,2BAA4B,GAImB,QAA/Ca,OAAOS,KAAKC,QAAQC,wBAGxBX,OAAOS,KAAKJ,iBAAiB,UAAU,SAASO,aAGtCC,cAAgB,WAEdD,MAAME,kBAAoBd,OAAOC,WAIrCD,OAAOC,UAAW,EAClBT,sBApGqBQ,CAAAA,SAC7BhB,uBAAuBoB,KAAKJ,QACvBjB,iBACDA,eAAiBgC,aAAY,KAGL,GADNtB,SAASC,OAAOsB,MAAM5B,gBAAkB,KAC5C6B,SAENzB,sBACA0B,cAAcnC,gBACdA,eAAiB,EAGjBC,uBAAuBe,SAASC,SAC5BA,OAAOC,UAAW,QAG3B,OAoFCkB,CAAwBnB,UAE5BoB,OAAOf,iBAAiB,eAAgBQ,eAIxCQ,YAAW,WACPD,OAAOE,oBAAoB,eAAgBT,iBAC5C,MACJ"}