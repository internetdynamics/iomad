{"version":3,"file":"events.min.js","sources":["../src/events.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript events for the `core_form` subsystem.\r\n *\r\n * @module core_form/events\r\n * @copyright 2021 Huong Nguyen <huongnv13@gmail.com>\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since 3.10\r\n *\r\n * @example <caption>Example of listening to a form event.</caption>\r\n * import {eventTypes as formEventTypes} from 'core_form/events';\r\n *\r\n * document.addEventListener(formEventTypes.formSubmittedByJavascript, e => {\r\n *     window.console.log(e.target); // The form that was submitted.\r\n *     window.console.log(e.detail.skipValidation); // Whether form validation was skipped.\r\n * });\r\n */\r\n\r\nimport {get_string as getString} from 'core/str';\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\n\r\nlet changesMadeString;\r\n\r\n/**\r\n * Prevent user navigate away when upload progress still running.\r\n * @param {Event} e The event\r\n */\r\nconst changesMadeCheck = e => {\r\n    if (e) {\r\n        e.returnValue = changesMadeString;\r\n    }\r\n};\r\n\r\n/**\r\n * Events for `core_form`.\r\n *\r\n * @constant\r\n * @property {String} formError See {@link event:core_form/error}\r\n * @property {String} formFieldValidationFailed See {@link event:core_form/fieldValidationFailed}\r\n * @property {String} formSubmittedByJavascript See {@link event:core_form/submittedByJavascript}\r\n * @property {String} uploadChanged See {@link event:core_form/uploadChanged}\r\n */\r\nexport const eventTypes = {\r\n    /**\r\n     * An event triggered when a form contains an error\r\n     *\r\n     * @event formError\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The form field which errored\r\n     */\r\n    formError: 'core_form/error',\r\n\r\n    /**\r\n     * An event triggered when an mform is about to be submitted via javascript.\r\n     *\r\n     * @event core_form/submittedByJavascript\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The form that was submitted\r\n     * @property {object} detail\r\n     * @property {boolean} detail.skipValidation Whether the form was submitted without validation (i.e. via a Cancel button)\r\n     * @property {boolean} detail.fallbackHandled Whether the legacy YUI event has been handled\r\n     */\r\n    formSubmittedByJavascript: 'core_form/submittedByJavascript',\r\n\r\n    /**\r\n     * An event triggered upon form field validation failure.\r\n     *\r\n     * @event core_form/fieldValidationFailed\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The field that failed validation\r\n     * @property {object} detail\r\n     * @property {String} detail.message The message displayed upon failure\r\n     */\r\n    formFieldValidationFailed: 'core_form/fieldValidationFailed',\r\n\r\n    /**\r\n     * An event triggered when an upload is started\r\n     *\r\n     * @event core_form/uploadStarted\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The location where the upload began\r\n     */\r\n    uploadStarted: 'core_form/uploadStarted',\r\n\r\n    /**\r\n     * An event triggered when an upload completes\r\n     *\r\n     * @event core_form/uploadCompleted\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The location where the upload completed\r\n     */\r\n    uploadCompleted: 'core_form/uploadCompleted',\r\n\r\n    /**\r\n     * An event triggered when a file upload field has been changed.\r\n     *\r\n     * @event core_form/uploadChanged\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The form field which was changed\r\n     */\r\n    uploadChanged: 'core_form/uploadChanged',\r\n};\r\n\r\n// These are only imported for legacy.\r\nimport jQuery from 'jquery';\r\nimport Y from 'core/yui';\r\n\r\n/**\r\n * Trigger an event to indicate that a form field contained an error.\r\n *\r\n * @method notifyFormError\r\n * @param {HTMLElement} field The form field causing the error\r\n * @returns {CustomEvent}\r\n * @fires formError\r\n */\r\nexport const notifyFormError = field => dispatchEvent(eventTypes.formError, {}, field);\r\n\r\n/**\r\n * Trigger an event to indiciate that a form was submitted by Javascript.\r\n *\r\n * @method\r\n * @param {HTMLElement} form The form that was submitted\r\n * @param {Boolean} skipValidation Submit the form without validation. E.g. \"Cancel\".\r\n * @param {Boolean} fallbackHandled The legacy YUI event has been handled\r\n * @returns {CustomEvent}\r\n * @fires formSubmittedByJavascript\r\n */\r\nexport const notifyFormSubmittedByJavascript = (form, skipValidation = false, fallbackHandled = false) => {\r\n    if (skipValidation) {\r\n        window.skipClientValidation = true;\r\n    }\r\n\r\n    const customEvent = dispatchEvent(\r\n        eventTypes.formSubmittedByJavascript,\r\n        {\r\n            skipValidation,\r\n            fallbackHandled,\r\n        },\r\n        form\r\n    );\r\n\r\n    if (skipValidation) {\r\n        window.skipClientValidation = false;\r\n    }\r\n\r\n    return customEvent;\r\n};\r\n\r\n/**\r\n * Trigger an event to indicate that a form field contained an error.\r\n *\r\n * @method notifyFieldValidationFailure\r\n * @param {HTMLElement} field The field which failed validation\r\n * @param {String} message The message displayed\r\n * @returns {CustomEvent}\r\n * @fires formFieldValidationFailed\r\n */\r\nexport const notifyFieldValidationFailure = (field, message) => dispatchEvent(\r\n    eventTypes.formFieldValidationFailed,\r\n    {\r\n        message,\r\n    },\r\n    field,\r\n    {\r\n        cancelable: true\r\n    }\r\n);\r\n\r\n/**\r\n * Trigger an event to indicate that an upload was started.\r\n *\r\n * @method\r\n * @param {String} elementId The element which was uploaded to\r\n * @returns {CustomEvent}\r\n * @fires uploadStarted\r\n */\r\nexport const notifyUploadStarted = async elementId => {\r\n    // Add an additional check for changes made.\r\n    changesMadeString = await getString('changesmadereallygoaway', 'moodle');\r\n    window.addEventListener('beforeunload', changesMadeCheck);\r\n\r\n    return dispatchEvent(\r\n        eventTypes.uploadStarted,\r\n        {},\r\n        document.getElementById(elementId),\r\n        {\r\n            bubbles: true,\r\n            cancellable: false,\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * Trigger an event to indicate that an upload was completed.\r\n *\r\n * @method\r\n * @param {String} elementId The element which was uploaded to\r\n * @returns {CustomEvent}\r\n * @fires uploadCompleted\r\n */\r\nexport const notifyUploadCompleted = elementId => {\r\n    // Remove the additional check for changes made.\r\n    window.removeEventListener('beforeunload', changesMadeCheck);\r\n\r\n    return dispatchEvent(\r\n        eventTypes.uploadCompleted,\r\n        {},\r\n        document.getElementById(elementId),\r\n        {\r\n            bubbles: true,\r\n            cancellable: false,\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * Trigger upload start event.\r\n *\r\n * @method\r\n * @param {String} elementId\r\n * @returns {CustomEvent}\r\n * @fires uploadStarted\r\n * @deprecated Since Moodle 4.0 See {@link module:core_form/events.notifyUploadStarted notifyUploadStarted}\r\n */\r\nexport const triggerUploadStarted = notifyUploadStarted;\r\n\r\n/**\r\n * Trigger upload complete event.\r\n *\r\n * @method\r\n * @param {String} elementId\r\n * @returns {CustomEvent}\r\n * @fires uploadCompleted\r\n * @deprecated Since Moodle 4.0 See {@link module:core_form/events.notifyUploadCompleted notifyUploadCompleted}\r\n */\r\nexport const triggerUploadCompleted = notifyUploadCompleted;\r\n\r\n/**\r\n * List of the events.\r\n *\r\n * @deprecated since Moodle 4.0. See {@link module:core_form/events.eventTypes eventTypes} instead.\r\n **/\r\nexport const types = {\r\n    uploadStarted: 'core_form/uploadStarted',\r\n    uploadCompleted: 'core_form/uploadCompleted',\r\n};\r\n\r\nlet legacyEventsRegistered = false;\r\nif (!legacyEventsRegistered) {\r\n    // The following event triggers are legacy and will be removed in the future.\r\n    // The following approach provides a backwards-compatability layer for the new events.\r\n    // Code should be updated to make use of native events.\r\n    Y.use('event', 'moodle-core-event', () => {\r\n\r\n        // Watch for the new native formError event, and trigger the legacy YUI event.\r\n        document.addEventListener(eventTypes.formError, e => {\r\n            const element = Y.one(e.target);\r\n            const formElement = Y.one(e.target.closest('form'));\r\n\r\n            Y.Global.fire(\r\n                M.core.globalEvents.FORM_ERROR,\r\n                {\r\n                    formid: formElement.generateID(),\r\n                    elementid: element.generateID(),\r\n                }\r\n            );\r\n        });\r\n\r\n        // Watch for the new native formSubmittedByJavascript event, and trigger the legacy YUI event.\r\n        document.addEventListener(eventTypes.formSubmittedByJavascript, e => {\r\n            if (e.detail.fallbackHandled) {\r\n                // This event was originally generated by a YUI event.\r\n                // Do not generate another as this will recurse.\r\n                return;\r\n            }\r\n\r\n            if (e.skipValidation) {\r\n                window.skipClientValidation = true;\r\n            }\r\n\r\n            // Trigger the legacy YUI event.\r\n            const form = Y.one(e.target);\r\n            form.fire(\r\n                M.core.event.FORM_SUBMIT_AJAX,\r\n                {\r\n                    currentTarget: form,\r\n                    fallbackHandled: true,\r\n                }\r\n            );\r\n\r\n            if (e.skipValidation) {\r\n                window.skipClientValidation = false;\r\n            }\r\n        });\r\n    });\r\n\r\n    // Watch for the new native formFieldValidationFailed event, and trigger the legacy jQuery event.\r\n    document.addEventListener(eventTypes.formFieldValidationFailed, e => {\r\n        // Note: The \"core_form-field-validation\" event is hard-coded in core/event.\r\n        // This is not included to prevent cyclic module dependencies.\r\n        const legacyEvent = jQuery.Event(\"core_form-field-validation\");\r\n\r\n        jQuery(e.target).trigger(legacyEvent, e.detail.message);\r\n    });\r\n\r\n    legacyEventsRegistered = true;\r\n}\r\n\r\n/**\r\n * Trigger an event to notify the file upload field has been changed.\r\n *\r\n * @method\r\n * @param {string} elementId The element which was changed\r\n * @returns {CustomEvent}\r\n * @fires uploadChanged\r\n */\r\nexport const notifyUploadChanged = elementId => dispatchEvent(\r\n    eventTypes.uploadChanged,\r\n    {},\r\n    document.getElementById(elementId),\r\n    {\r\n        bubbles: true,\r\n        cancellable: false,\r\n    }\r\n);\r\n"],"names":["changesMadeString","changesMadeCheck","e","returnValue","eventTypes","formError","formSubmittedByJavascript","formFieldValidationFailed","uploadStarted","uploadCompleted","uploadChanged","field","form","skipValidation","fallbackHandled","window","skipClientValidation","customEvent","message","cancelable","notifyUploadStarted","async","addEventListener","document","getElementById","elementId","bubbles","cancellable","notifyUploadCompleted","removeEventListener","triggerUploadStarted","triggerUploadCompleted","legacyEventsRegistered","use","element","Y","one","target","formElement","closest","Global","fire","M","core","globalEvents","FORM_ERROR","formid","generateID","elementid","detail","event","FORM_SUBMIT_AJAX","currentTarget","legacyEvent","jQuery","Event","trigger"],"mappings":";;;;;;;;;;;;;;;;SAmCIA,mcAMEC,iBAAmBC,IACjBA,IACAA,EAAEC,YAAcH,oBAaXI,WAAa,CAQtBC,UAAW,kBAYXC,0BAA2B,kCAW3BC,0BAA2B,kCAS3BC,cAAe,0BASfC,gBAAiB,4BASjBC,cAAe,mFAeYC,QAAS,mCAAcP,WAAWC,UAAW,GAAIM,gDAYjC,SAACC,UAAMC,uEAAwBC,wEACtED,iBACAE,OAAOC,sBAAuB,SAG5BC,aAAc,mCAChBb,WAAWE,0BACX,CACIO,eAAAA,eACAC,gBAAAA,iBAEJF,aAGAC,iBACAE,OAAOC,sBAAuB,GAG3BC,mDAYiC,CAACN,MAAOO,WAAY,mCAC5Dd,WAAWG,0BACX,CACIW,QAAAA,SAEJP,MACA,CACIQ,YAAY,UAYPC,oBAAsBC,MAAAA,YAE/BrB,wBAA0B,mBAAU,0BAA2B,UAC/De,OAAOO,iBAAiB,eAAgBrB,mBAEjC,mCACHG,WAAWI,cACX,GACAe,SAASC,eAAeC,WACxB,CACIC,SAAS,EACTC,aAAa,4DAaZC,sBAAwBH,YAEjCV,OAAOc,oBAAoB,eAAgB5B,mBAEpC,mCACHG,WAAWK,gBACX,GACAc,SAASC,eAAeC,WACxB,CACIC,SAAS,EACTC,aAAa,gEAcZG,qBAAuBV,6EAWvBW,uBAAyBH,4FAOjB,CACjBpB,cAAe,0BACfC,gBAAiB,iCAGjBuB,wBAAyB,EACxBA,sCAICC,IAAI,QAAS,qBAAqB,KAGhCV,SAASD,iBAAiBlB,WAAWC,WAAWH,UACtCgC,QAAUC,aAAEC,IAAIlC,EAAEmC,QAClBC,YAAcH,aAAEC,IAAIlC,EAAEmC,OAAOE,QAAQ,sBAEzCC,OAAOC,KACLC,EAAEC,KAAKC,aAAaC,WACpB,CACIC,OAAQR,YAAYS,aACpBC,UAAWd,QAAQa,kBAM/BxB,SAASD,iBAAiBlB,WAAWE,2BAA2BJ,OACxDA,EAAE+C,OAAOnC,uBAMTZ,EAAEW,iBACFE,OAAOC,sBAAuB,SAI5BJ,KAAOuB,aAAEC,IAAIlC,EAAEmC,QACrBzB,KAAK6B,KACDC,EAAEC,KAAKO,MAAMC,iBACb,CACIC,cAAexC,KACfE,iBAAiB,IAIrBZ,EAAEW,iBACFE,OAAOC,sBAAuB,SAM1CO,SAASD,iBAAiBlB,WAAWG,2BAA2BL,UAGtDmD,YAAcC,gBAAOC,MAAM,kDAE1BrD,EAAEmC,QAAQmB,QAAQH,YAAanD,EAAE+C,OAAO/B,YAGnDc,wBAAyB,gCAWMP,YAAa,mCAC5CrB,WAAWM,cACX,GACAa,SAASC,eAAeC,WACxB,CACIC,SAAS,EACTC,aAAa"}