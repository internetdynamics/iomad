{"version":3,"file":"collapsesections.min.js","sources":["../src/collapsesections.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Collapse or expand all form sections on clicking the expand all / collapse al link.\r\n *\r\n * @module core_form/collapsesections\r\n * @copyright 2021 Bas Brands\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since 4.0\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport Pending from 'core/pending';\r\n\r\nconst SELECTORS = {\r\n    FORM: '.mform',\r\n    FORMHEADER: '.fheader',\r\n    FORMCONTAINER: 'fieldset > .fcontainer',\r\n};\r\n\r\nconst CLASSES = {\r\n    SHOW: 'show',\r\n    COLLAPSED: 'collapsed'\r\n};\r\n\r\n/**\r\n * Initialises the form section collapse / expand action.\r\n *\r\n * @param {string} collapsesections the collapse/expand link id.\r\n */\r\nexport const init = collapsesections => {\r\n    // All jQuery in this code can be replaced when MDL-71979 is integrated (move to Bootstrap 5).\r\n    const pendingPromise = new Pending('core_form/collapsesections');\r\n    const collapsemenu = document.querySelector(collapsesections);\r\n\r\n    const formParent = collapsemenu.closest(SELECTORS.FORM);\r\n    const formContainers = formParent.querySelectorAll(SELECTORS.FORMCONTAINER);\r\n\r\n    collapsemenu.addEventListener('keydown', e => {\r\n        if (e.key === 'Enter' || e.key === ' ') {\r\n            e.preventDefault();\r\n            collapsemenu.click();\r\n        }\r\n    });\r\n\r\n    // Override default collapse class if all containers are expanded on page load\r\n    let expandedcount = 0;\r\n    const formcontainercount = $(SELECTORS.FORMCONTAINER).length;\r\n    formContainers.forEach(container => {\r\n        if (container.classList.contains(CLASSES.SHOW)) {\r\n            expandedcount++;\r\n        }\r\n    });\r\n\r\n    if (formcontainercount === expandedcount) {\r\n        collapsemenu.classList.remove(CLASSES.COLLAPSED);\r\n        collapsemenu.setAttribute('aria-expanded', true);\r\n    }\r\n\r\n    // When the collapse menu is toggled, update each form container to match.\r\n    collapsemenu.addEventListener('click', () => {\r\n        let action = 'hide';\r\n        if (collapsemenu.classList.contains(CLASSES.COLLAPSED)) {\r\n            action = 'show';\r\n        }\r\n\r\n        formContainers.forEach(container => $(container).collapse(action));\r\n    });\r\n\r\n    // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\r\n    const collapseElements = formParent.querySelectorAll(SELECTORS.FORMHEADER);\r\n    const collapseElementIds = [...collapseElements].map((element, index) => {\r\n        element.id = element.id || `collapseElement-${index}`;\r\n        return element.id;\r\n    });\r\n    collapsemenu.setAttribute('aria-controls', collapseElementIds.join(' '));\r\n\r\n    // When any form container is toggled, re-calculate collapse menu state.\r\n    $(SELECTORS.FORMCONTAINER).on('hidden.bs.collapse', () => {\r\n        const allCollapsed = [...formContainers].every(container => !container.classList.contains(CLASSES.SHOW));\r\n        if (allCollapsed) {\r\n            collapsemenu.classList.add(CLASSES.COLLAPSED);\r\n            collapsemenu.setAttribute('aria-expanded', false);\r\n        }\r\n    });\r\n    $(SELECTORS.FORMCONTAINER).on('shown.bs.collapse', () => {\r\n        const allExpanded = [...formContainers].every(container => container.classList.contains(CLASSES.SHOW));\r\n        if (allExpanded) {\r\n            collapsemenu.classList.remove(CLASSES.COLLAPSED);\r\n            collapsemenu.setAttribute('aria-expanded', true);\r\n        }\r\n    });\r\n    pendingPromise.resolve();\r\n};\r\n"],"names":["SELECTORS","CLASSES","collapsesections","pendingPromise","Pending","collapsemenu","document","querySelector","formParent","closest","formContainers","querySelectorAll","addEventListener","e","key","preventDefault","click","expandedcount","formcontainercount","length","forEach","container","classList","contains","remove","setAttribute","action","collapse","collapseElementIds","map","element","index","id","join","on","every","add","resolve"],"mappings":";;;;;;;;0KA2BMA,eACI,SADJA,qBAEU,WAFVA,wBAGa,yBAGbC,aACI,OADJA,kBAES,0BAQKC,yBAEVC,eAAiB,IAAIC,iBAAQ,8BAC7BC,aAAeC,SAASC,cAAcL,kBAEtCM,WAAaH,aAAaI,QAAQT,gBAClCU,eAAiBF,WAAWG,iBAAiBX,yBAEnDK,aAAaO,iBAAiB,WAAWC,IACvB,UAAVA,EAAEC,KAA6B,MAAVD,EAAEC,MACvBD,EAAEE,iBACFV,aAAaW,gBAKjBC,cAAgB,QACdC,oBAAqB,mBAAElB,yBAAyBmB,OACtDT,eAAeU,SAAQC,YACfA,UAAUC,UAAUC,SAAStB,eAC7BgB,mBAIJC,qBAAuBD,gBACvBZ,aAAaiB,UAAUE,OAAOvB,mBAC9BI,aAAaoB,aAAa,iBAAiB,IAI/CpB,aAAaO,iBAAiB,SAAS,SAC/Bc,OAAS,OACTrB,aAAaiB,UAAUC,SAAStB,qBAChCyB,OAAS,QAGbhB,eAAeU,SAAQC,YAAa,mBAAEA,WAAWM,SAASD,mBAKxDE,mBAAqB,IADFpB,WAAWG,iBAAiBX,uBACJ6B,KAAI,CAACC,QAASC,SAC3DD,QAAQE,GAAKF,QAAQE,8BAAyBD,OACvCD,QAAQE,MAEnB3B,aAAaoB,aAAa,gBAAiBG,mBAAmBK,KAAK,0BAGjEjC,yBAAyBkC,GAAG,sBAAsB,KAC3B,IAAIxB,gBAAgByB,OAAMd,YAAcA,UAAUC,UAAUC,SAAStB,kBAEtFI,aAAaiB,UAAUc,IAAInC,mBAC3BI,aAAaoB,aAAa,iBAAiB,2BAGjDzB,yBAAyBkC,GAAG,qBAAqB,KAC3B,IAAIxB,gBAAgByB,OAAMd,WAAaA,UAAUC,UAAUC,SAAStB,kBAEpFI,aAAaiB,UAAUE,OAAOvB,mBAC9BI,aAAaoB,aAAa,iBAAiB,OAGnDtB,eAAekC"}