{"version":3,"file":"editor.min.js","sources":["../src/editor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * TinyMCE Editor Manager.\r\n *\r\n * @module editor_tiny/editor\r\n * @copyright  2022 Andrew Lyons <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport jQuery from 'jquery';\r\nimport Pending from 'core/pending';\r\nimport {getDefaultConfiguration} from './defaults';\r\nimport {getTinyMCE, baseUrl} from './loader';\r\nimport * as Options from './options';\r\nimport {addToolbarButton, addToolbarButtons, addToolbarSection,\r\n    removeToolbarButton, removeSubmenuItem} from './utils';\r\n\r\n/**\r\n * Storage for the TinyMCE instances on the page.\r\n * @type {Map}\r\n */\r\nconst instanceMap = new Map();\r\n\r\n/**\r\n * The default editor configuration.\r\n * @type {Object}\r\n */\r\nlet defaultOptions = {};\r\n\r\n/**\r\n * Require the modules for the named set of TinyMCE plugins.\r\n *\r\n * @param {string[]} pluginList The list of plugins\r\n * @return {Promise[]} A matching set of Promises relating to the requested plugins\r\n */\r\nconst importPluginList = async(pluginList) => {\r\n    // Fetch all of the plugins from the list of plugins.\r\n    // If a plugin contains a '/' then it is assumed to be a Moodle AMD module to import.\r\n    const pluginHandlers = await Promise.all(pluginList.map(pluginPath => {\r\n        if (pluginPath.indexOf('/') === -1) {\r\n            // A standard TinyMCE Plugin.\r\n            return Promise.resolve(pluginPath);\r\n        }\r\n\r\n        return import(pluginPath);\r\n    }));\r\n\r\n    // Normalise the plugin data to a list of plugin names.\r\n    // Two formats are supported:\r\n    // - a string; and\r\n    // - an array whose first element is the plugin name, and the second element is the plugin configuration.\r\n    const pluginNames = pluginHandlers.map((pluginConfig) => {\r\n        if (typeof pluginConfig === 'string') {\r\n            return pluginConfig;\r\n        }\r\n        if (Array.isArray(pluginConfig)) {\r\n            return pluginConfig[0];\r\n        }\r\n        return null;\r\n    }).filter((value) => value);\r\n\r\n    // Fetch the list of pluginConfig handlers.\r\n    const pluginConfig = pluginHandlers.map((pluginConfig) => {\r\n        if (Array.isArray(pluginConfig)) {\r\n            return pluginConfig[1];\r\n        }\r\n        return null;\r\n    }).filter((value) => value);\r\n\r\n    return {\r\n        pluginNames,\r\n        pluginConfig,\r\n    };\r\n};\r\n\r\n/**\r\n * Fetch the language data for the specified language.\r\n *\r\n * @param {string} language The language identifier\r\n * @returns {object}\r\n */\r\nconst fetchLanguage = (language) => fetch(\r\n    `${M.cfg.wwwroot}/lib/editor/tiny/lang.php/${M.cfg.langrev}/${language}`\r\n).then(response => response.json());\r\n\r\n/**\r\n * Get a list of all Editors in a Map, keyed by the DOM Node that the Editor is associated with.\r\n *\r\n * @returns {Map<Node, Editor>}\r\n */\r\nexport const getAllInstances = () => new Map(instanceMap.entries());\r\n\r\n/**\r\n * Get the TinyMCE instance for the specified Node ID.\r\n *\r\n * @param {string} elementId\r\n * @returns {TinyMCE|undefined}\r\n */\r\nexport const getInstanceForElementId = elementId => getInstanceForElement(document.getElementById(elementId));\r\n\r\n/*\r\n * Get the TinyMCE instance for the specified HTMLElement.\r\n *\r\n * @param {HTMLElement} element\r\n * @returns {TinyMCE|undefined}\r\n */\r\nexport const getInstanceForElement = element => {\r\n    const instance = instanceMap.get(element);\r\n    if (instance && instance.removed) {\r\n        instanceMap.remove(element);\r\n        return undefined;\r\n    }\r\n    return instance;\r\n};\r\n\r\n/**\r\n * Set up TinyMCE for the selector at the specified HTML Node id.\r\n *\r\n * @param {object} config The configuration required to setup the editor\r\n * @param {string} config.elementId The HTML Node ID\r\n * @param {Object} config.options The editor plugin configuration\r\n * @return {Promise<TinyMCE>} The TinyMCE instance\r\n */\r\nexport const setupForElementId = ({elementId, options}) => {\r\n    const target = document.getElementById(elementId);\r\n    return setupForTarget(target, options);\r\n};\r\n\r\n/**\r\n * Initialise the page with standard TinyMCE requirements.\r\n *\r\n * Currently this includes the language taken from the HTML lang property.\r\n */\r\nconst initialisePage = async() => {\r\n    const lang = document.querySelector('html').lang;\r\n\r\n    const [tinyMCE, langData] = await Promise.all([getTinyMCE(), fetchLanguage(lang)]);\r\n    tinyMCE.addI18n(lang, langData);\r\n};\r\ninitialisePage();\r\n\r\n/**\r\n * Get the list of plugins to load for the specified configuration.\r\n *\r\n * If the specified configuration does not include a plugin configuration, then return the default configuration.\r\n *\r\n * @param {object} options\r\n * @param {array} [options.plugins=null] The plugin list\r\n * @returns {object}\r\n */\r\nconst getPlugins = ({plugins = null} = {}) => {\r\n    if (plugins) {\r\n        return plugins;\r\n    }\r\n\r\n    if (defaultOptions.plugins) {\r\n        return defaultOptions.plugins;\r\n    }\r\n\r\n    return {};\r\n};\r\n\r\n/**\r\n * Nest the dropdown menu inside the parent DOM.\r\n *\r\n * The TinyMCE menu has a significant issue with the Overflow style,\r\n * and the Boost theme heavily uses Overflow for drawer navigation.\r\n * Moving the menu container into the parent editor container makes it work correctly.\r\n *\r\n * @param {object} editor\r\n */\r\n const nestMenu = (editor) => {\r\n    const container = editor.getContainer();\r\n    const menuContainer = document.querySelector('body > .tox.tox-tinymce-aux');\r\n    container.parentNode.appendChild(menuContainer);\r\n};\r\n\r\n/**\r\n * Fix the Tiny menu position if the editor is in fullscreen mode on the Boost theme.\r\n *\r\n * The boost theme makes the TinyMCE editor rendered in a scrollable container,\r\n * scrolling the editorâ€™s container will cause TinyMCE UI elements to be detached from the anchor.\r\n * Therefore, to keep the tinyMCE menu in the correct position,\r\n * adjustments must be made on the page drawers style.\r\n *\r\n * @param {object}  params\r\n * @param {Boolean} params.open True if editor in fullscreen mode, otherwise false.\r\n */\r\nconst fixMenuPositionIfInFullsreen = (params) => {\r\n    if (params.open) {\r\n        // Keep the menu remains visible and properly aligned.\r\n        document.querySelector('.tox-fullscreen').style.overflow = 'unset';\r\n    }\r\n\r\n    const pageWithDrawers = document.querySelector('#page.drawers');\r\n    if (pageWithDrawers) {\r\n        pageWithDrawers.style.overflow = params.open ? \"unset\" : \"\";\r\n    }\r\n};\r\n\r\n/**\r\n * Fix the dialogue window positioning issue of TinyMCE editor in Safari browsers.\r\n *\r\n * When using TinyMCE editor in Safari browsers, a problem may occur where the dialogue\r\n * windows (such as modal dialogs) overlap with page drawers due to a specific behavior\r\n * in Safari's rendering. This function addresses the issue by adjusting the CSS overflow\r\n * property of the page drawers, ensuring they do not obscure the dialogue windows.\r\n *\r\n * @param {object}  params\r\n * @param {object}  params.browser Browser environment.\r\n * @param {object}  params.fsplugin Fullscreen plugin.\r\n * @param {Boolean} params.open True if the dialogue window opens, otherwise false.\r\n */\r\nconst fixDialoguePositionIfOpen = (params) => {\r\n    // To avoid modification the existing overflow value that has been set fixMenuPositionIfInFullsreen(),\r\n    // the fix only applied if the editor not in fullscreen mode.\r\n    if (params.browser.isSafari() && !params.fsplugin.isFullscreen()) {\r\n        const pageWithDrawers = document.querySelector('#page.drawers');\r\n        if (pageWithDrawers) {\r\n            pageWithDrawers.style.overflow = params.open ? \"unset\" : \"\";\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Adjust the editor size base on the target element.\r\n *\r\n * @param {TinyMCE} editor TinyMCE editor\r\n * @param {Node} target Target element\r\n */\r\nconst adjustEditorSize = (editor, target) => {\r\n    let expectedEditingAreaHeight = 0;\r\n    if (target.clientHeight) {\r\n        expectedEditingAreaHeight = target.clientHeight;\r\n    } else {\r\n        // If the target element is hidden, we cannot get the lineHeight of the target element.\r\n        // We don't have a proper way to retrieve the general lineHeight of the theme, so we use 22 here, it's equivalent to 1.5em.\r\n        expectedEditingAreaHeight = target.rows * (parseFloat(window.getComputedStyle(target).lineHeight) || 22);\r\n    }\r\n    const currentEditingAreaHeight = editor.getContainer().querySelector('.tox-sidebar-wrap').clientHeight;\r\n    if (currentEditingAreaHeight < expectedEditingAreaHeight) {\r\n        // Change the height based on the target element's height.\r\n        editor.getContainer().querySelector('.tox-sidebar-wrap').style.height = `${expectedEditingAreaHeight}px`;\r\n    }\r\n};\r\n\r\n/**\r\n * Get the standard configuration for the specified options.\r\n *\r\n * @param {Node} target\r\n * @param {tinyMCE} tinyMCE\r\n * @param {object} options\r\n * @param {Array} plugins\r\n * @returns {object}\r\n */\r\nconst getStandardConfig = (target, tinyMCE, options, plugins) => {\r\n    const lang = document.querySelector('html').lang;\r\n\r\n    const config = Object.assign({}, getDefaultConfiguration(), {\r\n        // eslint-disable-next-line camelcase\r\n        base_url: baseUrl,\r\n\r\n        // Set the editor target.\r\n        // https://www.tiny.cloud/docs/tinymce/6/editor-important-options/#target\r\n        target,\r\n\r\n        // https://www.tiny.cloud/docs/tinymce/6/customize-ui/#set-maximum-and-minimum-heights-and-widths\r\n        // Set the minimum height to the smallest height that we can fit the Menu bar, Tool bar, Status bar and the text area.\r\n        // eslint-disable-next-line camelcase\r\n        min_height: 175,\r\n\r\n        // Base the height on the size of the text area.\r\n        // In some cases, E.g.: The target is an advanced element, it will be hidden. We cannot get the height at this time.\r\n        // So set the height to auto, and adjust it later by adjustEditorSize().\r\n        height: target.clientHeight || 'auto',\r\n\r\n        // Set the language.\r\n        // https://www.tiny.cloud/docs/tinymce/6/ui-localization/#language\r\n        // eslint-disable-next-line camelcase\r\n        language: lang,\r\n\r\n        // Load the editor stylesheet into the editor iframe.\r\n        // https://www.tiny.cloud/docs/tinymce/6/add-css-options/\r\n        // eslint-disable-next-line camelcase\r\n        content_css: [\r\n            options.css,\r\n        ],\r\n\r\n        // Do not convert URLs to relative URLs.\r\n        // https://www.tiny.cloud/docs/tinymce/6/url-handling/#convert_urls\r\n        // eslint-disable-next-line camelcase\r\n        convert_urls: false,\r\n\r\n        // Enabled 'advanced' a11y options.\r\n        // This includes allowing role=\"presentation\" from the image uploader.\r\n        // https://www.tiny.cloud/docs/tinymce/6/accessibility/\r\n        // eslint-disable-next-line camelcase\r\n        a11y_advanced_options: true,\r\n\r\n        // Ensure that scripts are recognized as valid elements.\r\n        // eslint-disable-next-line camelcase\r\n        extended_valid_elements: 'script[*]',\r\n\r\n        // Disable XSS Sanitisation.\r\n        // We do this in PHP.\r\n        // https://www.tiny.cloud/docs/tinymce/6/security/#turning-dompurify-off\r\n        // Note: This feature has been backported from TinyMCE 6.4.0.\r\n        // eslint-disable-next-line camelcase\r\n        xss_sanitization: false,\r\n\r\n        // Disable quickbars entirely.\r\n        // The UI is not ideal and we'll wait for it to improve in future before we enable it in Moodle.\r\n        // eslint-disable-next-line camelcase\r\n        quickbars_insert_toolbar: '',\r\n\r\n        // Override the standard block formats property (removing h1 & h2).\r\n        // https://www.tiny.cloud/docs/tinymce/6/user-formatting-options/#block_formats\r\n        // eslint-disable-next-line camelcase\r\n        block_formats: 'Paragraph=p; Heading 3=h3; Heading 4=h4; Heading 5=h5; Heading 6=h6;',\r\n\r\n        // The list of plugins to include in the instance.\r\n        // https://www.tiny.cloud/docs/tinymce/6/editor-important-options/#plugins\r\n        plugins: [\r\n            ...plugins,\r\n        ],\r\n\r\n        // Skins\r\n        skin: 'oxide',\r\n\r\n        // Remove the \"Upgrade\" link for Tiny.\r\n        // https://www.tiny.cloud/docs/tinymce/6/editor-premium-upgrade-promotion/\r\n        promotion: false,\r\n\r\n        // Allow the administrator to disable branding.\r\n        // https://www.tiny.cloud/docs/tinymce/6/statusbar-configuration-options/#branding\r\n        branding: options.branding,\r\n\r\n        // Put th cells in a thead element.\r\n        // https://www.tiny.cloud/docs/tinymce/6/table-options/#table_header_type\r\n        // eslint-disable-next-line camelcase\r\n        table_header_type: 'sectionCells',\r\n\r\n        // Stored text in non-entity form.\r\n        // https://www.tiny.cloud/docs/tinymce/6/content-filtering/#entity_encoding\r\n        // eslint-disable-next-line camelcase\r\n        entity_encoding: \"raw\",\r\n\r\n        setup: (editor) => {\r\n            Options.register(editor, options);\r\n\r\n            editor.on('PreInit', function() {\r\n                // Work around a bug in TinyMCE with Firefox.\r\n                // When an editor is removed, and replaced with an identically attributed editor (same ID),\r\n                // and the Firefox window is freshly opened (e.g. Behat, Private browsing), the wrong contentWindow\r\n                // is assigned to the editor instance leading to an NS_ERROR_UNEXPECTED error in Firefox.\r\n                // This is a workaround for that issue.\r\n                this.contentWindow = this.iframeElement.contentWindow;\r\n            });\r\n            editor.on('init', function() {\r\n                // Hide justify alignment sub-menu.\r\n                removeSubmenuItem(editor, 'align', 'tiny:justify');\r\n                // Adjust the editor size.\r\n                adjustEditorSize(editor, target);\r\n            });\r\n\r\n            editor.on('PostRender', function() {\r\n                // Nest menu if set.\r\n                if (options.nestedmenu) {\r\n                    nestMenu(editor);\r\n                }\r\n            });\r\n\r\n            // The Boost and Classic theme cause issues if editor is in fullscreen mode.\r\n            // The problem was resolved by changing the overflow value to related elements.\r\n            editor.on('FullscreenStateChanged', function(e) {\r\n                fixMenuPositionIfInFullsreen({\r\n                    open: e.state\r\n                });\r\n            });\r\n\r\n            // The Boost theme uses Overflow=auto in the course index drawer,\r\n            // it causes the dialogue window to be not correctly displayed in Safari browser.\r\n            // The problem was resolved by changing the overflow value to the drawer.\r\n            editor.on('OpenWindow CloseWindow', function(e) {\r\n                fixDialoguePositionIfOpen({\r\n                    browser: tinyMCE.Env.browser,\r\n                    fsplugin: editor.plugins.fullscreen,\r\n                    open: e.type == \"openwindow\"\r\n                });\r\n            });\r\n        },\r\n    });\r\n\r\n    config.toolbar = addToolbarSection(config.toolbar, 'content', 'formatting', true);\r\n    config.toolbar = addToolbarButton(config.toolbar, 'content', 'link');\r\n\r\n    // Add directionality plugins, always.\r\n    config.toolbar = addToolbarSection(config.toolbar, 'directionality', 'alignment', true);\r\n    config.toolbar = addToolbarButtons(config.toolbar, 'directionality', ['ltr', 'rtl']);\r\n\r\n    // Remove the align justify button from the toolbar.\r\n    config.toolbar = removeToolbarButton(config.toolbar, 'alignment', 'alignjustify');\r\n\r\n    return config;\r\n};\r\n\r\n/**\r\n * Fetch the TinyMCE configuration for this editor instance.\r\n *\r\n * @param {HTMLElement} target\r\n * @param {TinyMCE} tinyMCE The TinyMCE API\r\n * @param {Object} options The editor plugin configuration\r\n * @param {object} pluginValues\r\n * @param {object} pluginValues.pluginConfig The list of plugin configuration\r\n * @param {object} pluginValues.pluginNames The list of plugins to load\r\n * @returns {object} The TinyMCE Configuration\r\n */\r\nconst getEditorConfiguration = (target, tinyMCE, options, pluginValues) => {\r\n    const {\r\n        pluginNames,\r\n        pluginConfig,\r\n    } = pluginValues;\r\n\r\n    // Allow plugins to modify the configuration.\r\n    // This seems a little strange, but we must double-process the config slightly.\r\n\r\n    // First we fetch the standard configuration.\r\n    const instanceConfig = getStandardConfig(target, tinyMCE, options, pluginNames);\r\n\r\n    // Next we make any standard changes.\r\n    // Here we remove the file menu, as it doesn't offer any useful functionality.\r\n    // We only empty the items list so that a plugin may choose to add to it themselves later if they wish.\r\n    if (instanceConfig.menu.file) {\r\n        instanceConfig.menu.file.items = '';\r\n    }\r\n\r\n    // We disable the styles, backcolor, and forecolor plugins from the format menu.\r\n    // These are not useful for Moodle and we don't want to encourage their use.\r\n    if (instanceConfig.menu.format) {\r\n        instanceConfig.menu.format.items = instanceConfig.menu.format.items\r\n            // Remove forecolor and backcolor.\r\n            .replace(/forecolor ?/, '')\r\n            .replace(/backcolor ?/, '')\r\n\r\n            // Remove fontfamily for now.\r\n            .replace(/fontfamily ?/, '')\r\n\r\n            // Remove fontsize for now.\r\n            .replace(/fontsize ?/, '')\r\n\r\n            // Remove styles - it just duplicates the format menu in a way which does not respect configuration\r\n            .replace(/styles ?/, '')\r\n\r\n            // Remove any duplicate separators.\r\n            .replaceAll(/\\| *\\|/g, '|');\r\n    }\r\n\r\n    // eslint-disable-next-line camelcase\r\n    instanceConfig.quickbars_selection_toolbar = instanceConfig.quickbars_selection_toolbar.replace('h2 h3', 'h3 h4 h5 h6');\r\n\r\n    // Next we call the `configure` function for any plugin which defines it.\r\n    // We pass the current instanceConfig in here, to allow them to make certain changes to the global configuration.\r\n    // For example, to add themselves to any menu, toolbar, and so on.\r\n    // Any plugin which wishes to have configuration options must register those options here.\r\n    pluginConfig.filter((pluginConfig) => typeof pluginConfig.configure === 'function').forEach((pluginConfig) => {\r\n        const pluginInstanceOverride = pluginConfig.configure(instanceConfig, options);\r\n        Object.assign(instanceConfig, pluginInstanceOverride);\r\n    });\r\n\r\n    // Next we convert the plugin configuration into a format that TinyMCE understands.\r\n    Object.assign(instanceConfig, Options.getInitialPluginConfiguration(options));\r\n\r\n    return instanceConfig;\r\n};\r\n\r\n/**\r\n * Set up TinyMCE for the HTML Element.\r\n *\r\n * @param {HTMLElement} target\r\n * @param {Object} [options={}] The editor plugin configuration\r\n * @return {Promise<TinyMCE>} The TinyMCE instance\r\n */\r\nexport const setupForTarget = async(target, options = {}) => {\r\n    const instance = getInstanceForElement(target);\r\n    if (instance) {\r\n        return Promise.resolve(instance);\r\n    }\r\n\r\n    // Register a new pending promise to ensure that Behat waits for the editor setup to complete before continuing.\r\n    const pendingPromise = new Pending('editor_tiny/editor:setupForTarget');\r\n\r\n    // Get the list of plugins.\r\n    const plugins = getPlugins(options);\r\n\r\n    // Fetch the tinyMCE API, and instantiate the plugins.\r\n    const [tinyMCE, pluginValues] = await Promise.all([\r\n        getTinyMCE(),\r\n        importPluginList(Object.keys(plugins)),\r\n    ]);\r\n\r\n    // TinyMCE uses the element ID as a map key internally, even if the target has changed.\r\n    // In the case where we have an editor in a modal form which has been detached from the DOM, but the editor not removed,\r\n    // we need to manually destroy the editor.\r\n    // We could theoretically do this with a Mutation Observer, but in some cases the Node may be moved,\r\n    // or added back elsewhere in the DOM.\r\n\r\n    // First remove any detached editors.\r\n    tinyMCE.get().filter((editor) => !editor.getElement().isConnected).forEach((editor) => {\r\n        editor.remove();\r\n    });\r\n\r\n    // Now check for any existing editor which shares the same ID.\r\n    const existingEditor = tinyMCE.EditorManager.get(target.id);\r\n    if (existingEditor) {\r\n        if (existingEditor.getElement() === target) {\r\n            pendingPromise.resolve();\r\n            return Promise.resolve(existingEditor);\r\n        } else {\r\n            pendingPromise.resolve();\r\n            throw new Error('TinyMCE instance already exists for different target with same ID');\r\n        }\r\n    }\r\n\r\n    // Get the editor configuration for this editor.\r\n    const instanceConfig = getEditorConfiguration(target, tinyMCE, options, pluginValues);\r\n\r\n    // Initialise the editor instance for the given configuration.\r\n    // At this point any plugin which has configuration options registered will have them applied for this instance.\r\n    const [editor] = await tinyMCE.init(instanceConfig);\r\n\r\n    // Update the textarea when the editor to set the field type for Behat.\r\n    target.dataset.fieldtype = 'editor';\r\n\r\n    // Store the editor instance in the instanceMap and register a listener on removal to remove it from the map.\r\n    instanceMap.set(target, editor);\r\n    editor.on('remove', ({target}) => {\r\n        // Handle removal of the editor from the map on destruction.\r\n        instanceMap.delete(target.targetElm);\r\n        target.targetElm.dataset.fieldtype = null;\r\n    });\r\n\r\n    // If the editor is part of a form, also listen to the jQuery submit event.\r\n    // The jQuery submit event will not trigger the native submit event, and therefore the content will not be saved.\r\n    // We cannot rely on listening to the bubbled submit event on the document because other events on child nodes may\r\n    // consume the data before it is saved.\r\n    if (target.form) {\r\n        jQuery(target.form).on('submit', () => {\r\n            editor.save();\r\n        });\r\n    }\r\n\r\n    // Save the editor content to the textarea when the editor is blurred.\r\n    editor.on('blur', () => {\r\n        editor.save();\r\n    });\r\n\r\n    pendingPromise.resolve();\r\n    return editor;\r\n};\r\n\r\n/**\r\n * Set the default editor configuration.\r\n *\r\n * This configuration is used when an editor is initialised without any configuration.\r\n *\r\n * @param {object} [options={}]\r\n */\r\nexport const configureDefaultEditor = (options = {}) => {\r\n    defaultOptions = options;\r\n};\r\n"],"names":["instanceMap","Map","defaultOptions","importPluginList","async","pluginHandlers","Promise","all","pluginList","map","pluginPath","indexOf","resolve","pluginNames","pluginConfig","Array","isArray","filter","value","entries","elementId","getInstanceForElement","document","getElementById","element","instance","get","removed","remove","_ref","options","target","setupForTarget","lang","querySelector","tinyMCE","langData","language","fetch","M","cfg","wwwroot","langrev","then","response","json","addI18n","initialisePage","getPlugins","plugins","getStandardConfig","config","Object","assign","base_url","baseUrl","min_height","height","clientHeight","content_css","css","convert_urls","a11y_advanced_options","extended_valid_elements","xss_sanitization","quickbars_insert_toolbar","block_formats","skin","promotion","branding","table_header_type","entity_encoding","setup","editor","Options","register","on","contentWindow","this","iframeElement","expectedEditingAreaHeight","rows","parseFloat","window","getComputedStyle","lineHeight","getContainer","style","adjustEditorSize","nestedmenu","container","menuContainer","parentNode","appendChild","nestMenu","e","params","open","overflow","pageWithDrawers","fixMenuPositionIfInFullsreen","state","browser","isSafari","fsplugin","isFullscreen","fixDialoguePositionIfOpen","Env","fullscreen","type","toolbar","getEditorConfiguration","pluginValues","instanceConfig","menu","file","items","format","replace","replaceAll","quickbars_selection_toolbar","configure","forEach","pluginInstanceOverride","getInitialPluginConfiguration","pendingPromise","Pending","keys","getElement","isConnected","existingEditor","EditorManager","id","Error","init","dataset","fieldtype","set","_ref2","delete","targetElm","form","save"],"mappings":"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"}