{"version":3,"file":"image.min.js","sources":["../src/image.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny Media plugin Image class for Moodle.\r\n *\r\n * @module      tiny_media/image\r\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Templates from 'core/templates';\r\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\r\nimport * as ModalFactory from 'core/modal_factory';\r\nimport Pending from 'core/pending';\r\nimport {displayFilepicker} from 'editor_tiny/utils';\r\nimport Selectors from './selectors';\r\nimport Modal from './imagemodal';\r\nimport {getImagePermissions} from './options';\r\nimport {component} from \"./common\";\r\n\r\nexport const MediaImage = class {\r\n\r\n    DEFAULTS = {\r\n        WIDTH: 160,\r\n        HEIGHT: 160,\r\n    };\r\n\r\n    form = null;\r\n    rawImageDimensions = null;\r\n    canShowFilePicker = false;\r\n    editor = null;\r\n    currentModal = null;\r\n    selectedImage = null;\r\n    imageAlignment = null;\r\n\r\n    constructor(editor) {\r\n        const permissions = getImagePermissions(editor);\r\n        this.canShowFilePicker = permissions.filepicker;\r\n        this.editor = editor;\r\n    }\r\n\r\n    async displayDialogue() {\r\n        // Reset the image dimensions.\r\n        this.rawImageDimensions = null;\r\n\r\n        const currentImageData = await this.getCurrentImageData();\r\n        const modal = await ModalFactory.create({\r\n            type: Modal.TYPE,\r\n            title: getString('imageproperties', 'tiny_media'),\r\n            templateContext: await this.getTemplateContext(currentImageData),\r\n            removeOnClose: true,\r\n            large: true,\r\n        });\r\n\r\n        this.currentModal = modal;\r\n        if (currentImageData && currentImageData.src) {\r\n            this.loadPreviewImage(currentImageData.src);\r\n        }\r\n\r\n        await this.registerEventListeners(modal);\r\n        modal.show();\r\n    }\r\n\r\n    async getAlignmentTitles() {\r\n        if (!this.alignmentTitles) {\r\n            const [top, middle, bottom] = await getStrings([\r\n                'alignment_top',\r\n                'alignment_middle',\r\n                'alignment_bottom',\r\n            ].map((key) => ({key, component})));\r\n\r\n            this.alignmentTitles = {\r\n                top,\r\n                middle,\r\n                bottom,\r\n            };\r\n        }\r\n\r\n        return this.alignmentTitles;\r\n    }\r\n\r\n    async getImageAlignment(selected = '') {\r\n        const titles = await this.getAlignmentTitles();\r\n        const alignments = [\r\n            {\r\n                text: titles.top,\r\n                value: 'align-top',\r\n            },\r\n            {\r\n                text: titles.middle,\r\n                value: 'align-middle',\r\n            },\r\n            {\r\n                text: titles.bottom,\r\n                value: 'align-bottom',\r\n            },\r\n        ];\r\n\r\n        if (selected) {\r\n            alignments.forEach((alignment, index, array) => {\r\n                if (alignment.value === selected) {\r\n                    array[index].selected = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        return alignments;\r\n    }\r\n\r\n    async getTemplateContext(data) {\r\n        return {\r\n            elementid: this.editor.id,\r\n            showfilepicker: this.canShowFilePicker,\r\n            alignoptions: await this.getImageAlignment(),\r\n            ...data,\r\n        };\r\n    }\r\n\r\n    async getCurrentImageData() {\r\n        const selectedImageProperties = this.getSelectedImageProperties();\r\n        if (!selectedImageProperties) {\r\n            return {};\r\n        }\r\n\r\n        const properties = {...selectedImageProperties};\r\n        if (properties.align) {\r\n            properties.alignoptions = await this.getImageAlignment(properties.align);\r\n        }\r\n\r\n        if (properties.src) {\r\n            properties.haspreview = true;\r\n        }\r\n\r\n        if (!properties.alt) {\r\n            properties.presentation = true;\r\n        }\r\n\r\n        return properties;\r\n    }\r\n\r\n    filePickerCallback(params, self) {\r\n        if (params.url) {\r\n            const input = self.form.querySelector(Selectors.IMAGE.elements.url);\r\n            input.value = params.url;\r\n\r\n            // Auto set the width and height.\r\n            self.form.querySelector(Selectors.IMAGE.elements.width).value = '';\r\n            self.form.querySelector(Selectors.IMAGE.elements.height).value = '';\r\n\r\n            // Load the preview image.\r\n            self.loadPreviewImage(params.url);\r\n        }\r\n    }\r\n\r\n    storeImageDimensions(image) {\r\n        // Store dimensions of the raw image, falling back to defaults for images without dimensions (e.g. SVG).\r\n        this.rawImageDimensions = {\r\n            width: image.width || this.DEFAULTS.WIDTH,\r\n            height: image.height || this.DEFAULTS.HEIGHT,\r\n        };\r\n\r\n        const getCurrentWidth = (element) => {\r\n            if (element.value === '') {\r\n                element.value = this.rawImageDimensions.width;\r\n            }\r\n            return element.value;\r\n        };\r\n        const getCurrentHeight = (element) => {\r\n            if (element.value === '') {\r\n                element.value = this.rawImageDimensions.height;\r\n            }\r\n            return element.value;\r\n        };\r\n\r\n        const widthInput = this.form.querySelector(Selectors.IMAGE.elements.width);\r\n        const currentWidth = getCurrentWidth(widthInput);\r\n\r\n        const heightInput = this.form.querySelector(Selectors.IMAGE.elements.height);\r\n        const currentHeight = getCurrentHeight(heightInput);\r\n\r\n        const preview = this.form.querySelector(Selectors.IMAGE.elements.preview);\r\n        preview.setAttribute('src', image.src);\r\n        preview.style.display = 'inline';\r\n\r\n        const constrain = this.form.querySelector(Selectors.IMAGE.elements.constrain);\r\n        if (this.isPercentageValue(currentWidth) && this.isPercentageValue(currentHeight)) {\r\n            constrain.checked = currentWidth === currentHeight;\r\n        } else if (image.width === 0 || image.height === 0) {\r\n            // If we don't have both dimensions of the image, we can't auto-size it, so disable control.\r\n            constrain.disabled = 'disabled';\r\n        } else {\r\n            // This is the same as comparing to 3 decimal places.\r\n            const widthRatio = Math.round(1000 * parseInt(currentWidth, 10) / image.width);\r\n            const heightRatio = Math.round(1000 * parseInt(currentHeight, 10) / image.height);\r\n            constrain.checked = widthRatio === heightRatio;\r\n        }\r\n    }\r\n\r\n    loadPreviewImage(url) {\r\n        const image = new Image();\r\n\r\n        image.addEventListener('error', () => {\r\n            const preview = this.form.querySelector(Selectors.IMAGE.elements.preview);\r\n            preview.style.display = 'none';\r\n        });\r\n        image.addEventListener('load', () => {\r\n            this.storeImageDimensions(image);\r\n            this.autoAdjustSize();\r\n        });\r\n\r\n        image.src = url;\r\n    }\r\n\r\n    urlChanged() {\r\n        const input = this.form.querySelector(Selectors.IMAGE.elements.url);\r\n\r\n        if (input.value) {\r\n            // Load the preview image.\r\n            this.loadPreviewImage(input.value);\r\n        }\r\n    }\r\n\r\n    hasErrorUrlField() {\r\n        const url = this.form.querySelector(Selectors.IMAGE.elements.url).value;\r\n        const urlError = url === '';\r\n        this.toggleVisibility(Selectors.IMAGE.elements.urlWarning, urlError);\r\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.url], urlError);\r\n\r\n        return urlError;\r\n    }\r\n\r\n    hasErrorAltField() {\r\n        const alt = this.form.querySelector(Selectors.IMAGE.elements.alt).value;\r\n        const presentation = this.form.querySelector(Selectors.IMAGE.elements.presentation).checked;\r\n        const imageAltError = alt === '' && !presentation;\r\n        this.toggleVisibility(Selectors.IMAGE.elements.altWarning, imageAltError);\r\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.alt, Selectors.IMAGE.elements.presentation], imageAltError);\r\n\r\n        return imageAltError;\r\n    }\r\n\r\n    toggleVisibility(selector, predicate) {\r\n        const elements = this.form.querySelectorAll(selector);\r\n        elements.forEach((element) => {\r\n            element.style.display = predicate ? 'block' : 'none';\r\n        });\r\n    }\r\n\r\n    toggleAriaInvalid(selectors, predicate) {\r\n        selectors.forEach((selector) => {\r\n            const elements = this.form.querySelectorAll(selector);\r\n            elements.forEach((element) => element.setAttribute('aria-invalid', predicate));\r\n        });\r\n    }\r\n\r\n    getAlignmentClass(alignment) {\r\n        return alignment;\r\n    }\r\n\r\n    updateWarning() {\r\n        const urlError = this.hasErrorUrlField();\r\n        const imageAltError = this.hasErrorAltField();\r\n\r\n        return urlError || imageAltError;\r\n    }\r\n\r\n    getImageContext() {\r\n        // Check if there are any accessibility issues.\r\n        if (this.updateWarning()) {\r\n            return null;\r\n        }\r\n\r\n        const classList = [];\r\n\r\n        const constrain = this.form.querySelector(Selectors.IMAGE.elements.constrain).value;\r\n        if (constrain) {\r\n            classList.push(Selectors.IMAGE.styles.responsive);\r\n        }\r\n\r\n        // Add the alignment class for the image.\r\n        const alignment = this.getAlignmentClass(this.form.querySelector(Selectors.IMAGE.elements.alignment).value);\r\n        classList.push(alignment);\r\n\r\n        return {\r\n            url: this.form.querySelector(Selectors.IMAGE.elements.url).value,\r\n            alt: this.form.querySelector(Selectors.IMAGE.elements.alt).value,\r\n            width: this.form.querySelector(Selectors.IMAGE.elements.width).value,\r\n            height: this.form.querySelector(Selectors.IMAGE.elements.height).value,\r\n            presentation: this.form.querySelector(Selectors.IMAGE.elements.presentation).checked,\r\n            customStyle: this.form.querySelector(Selectors.IMAGE.elements.customStyle).value,\r\n            classlist: classList.join(' '),\r\n        };\r\n    }\r\n\r\n    setImage() {\r\n        const pendingPromise = new Pending('tiny_media:setImage');\r\n        const url = this.form.querySelector(Selectors.IMAGE.elements.url).value;\r\n        if (url === '') {\r\n            return;\r\n        }\r\n\r\n        // Check if there are any accessibility issues.\r\n        if (this.updateWarning()) {\r\n            pendingPromise.resolve();\r\n            return;\r\n        }\r\n\r\n        // Check for invalid width or height.\r\n        const width = this.form.querySelector(Selectors.IMAGE.elements.width).value;\r\n        if (!this.isPercentageValue(width) && isNaN(parseInt(width, 10))) {\r\n            this.form.querySelector(Selectors.IMAGE.elements.width).focus();\r\n            pendingPromise.resolve();\r\n            return;\r\n        }\r\n\r\n        const height = this.form.querySelector(Selectors.IMAGE.elements.height).value;\r\n        if (!this.isPercentageValue(height) && isNaN(parseInt(height, 10))) {\r\n            this.form.querySelector(Selectors.IMAGE.elements.height).focus();\r\n            pendingPromise.resolve();\r\n            return;\r\n        }\r\n\r\n        Templates.render('tiny_media/image', this.getImageContext())\r\n        .then((html) => {\r\n            this.editor.insertContent(html);\r\n            this.currentModal.destroy();\r\n            pendingPromise.resolve();\r\n\r\n            return html;\r\n        })\r\n        .catch();\r\n    }\r\n\r\n    handleKeyupCharacterCount() {\r\n        const alt = this.form.querySelector(Selectors.IMAGE.elements.alt).value;\r\n        const current = this.form.querySelector('#currentcount');\r\n        current.innerHTML = alt.length;\r\n    }\r\n\r\n    autoAdjustSize(forceHeight = false) {\r\n        // If we do not know the image size, do not do anything.\r\n        if (!this.rawImageDimensions) {\r\n            return;\r\n        }\r\n\r\n        const widthField = this.form.querySelector(Selectors.IMAGE.elements.width);\r\n        const heightField = this.form.querySelector(Selectors.IMAGE.elements.height);\r\n        const normalizeFieldData = (fieldData) => {\r\n            fieldData.isPercentageValue = !!this.isPercentageValue(fieldData.field.value);\r\n            if (fieldData.isPercentageValue) {\r\n                fieldData.percentValue = parseInt(fieldData.field.value, 10);\r\n                fieldData.pixelSize = this.rawImageDimensions[fieldData.type] / 100 * fieldData.percentValue;\r\n            } else {\r\n                fieldData.pixelSize = parseInt(fieldData.field.value, 10);\r\n                fieldData.percentValue = fieldData.pixelSize / this.rawImageDimensions[fieldData.type] * 100;\r\n            }\r\n\r\n            return fieldData;\r\n        };\r\n\r\n        const getKeyField = () => {\r\n            const getValue = () => {\r\n                if (forceHeight) {\r\n                    return {\r\n                        field: heightField,\r\n                        type: 'height',\r\n                    };\r\n                } else {\r\n                    return {\r\n                        field: widthField,\r\n                        type: 'width',\r\n                    };\r\n                }\r\n            };\r\n\r\n            const currentValue = getValue();\r\n            if (currentValue.field.value === '') {\r\n                currentValue.field.value = this.rawImageDimensions[currentValue.type];\r\n            }\r\n\r\n            return normalizeFieldData(currentValue);\r\n        };\r\n\r\n        const getRelativeField = () => {\r\n            if (forceHeight) {\r\n                return normalizeFieldData({\r\n                    field: widthField,\r\n                    type: 'width',\r\n                });\r\n            } else {\r\n                return normalizeFieldData({\r\n                    field: heightField,\r\n                    type: 'height',\r\n                });\r\n            }\r\n        };\r\n\r\n\r\n        const setImageDimensions = (image, keyField, relativeField, forceHeight = false) => {\r\n            const getStyleValue = (field) => field.isPercentageValue ? `${field.percentValue}%` : `${field.pixelSize}px`;\r\n\r\n            // If the values are constrained, then only update the width.\r\n            if (forceHeight) {\r\n                if (keyField.type === 'width') {\r\n                    image.style.width = getStyleValue(keyField);\r\n                } else {\r\n                    image.style.width = getStyleValue(relativeField);\r\n                }\r\n            } else {\r\n                image.style[keyField.type] = getStyleValue(keyField);\r\n                image.style[relativeField.type] = getStyleValue(relativeField);\r\n            }\r\n        };\r\n\r\n        const imagePreview = this.form.querySelector(Selectors.IMAGE.elements.preview);\r\n        // Clear the existing preview sizes.\r\n        imagePreview.style.width = '';\r\n        imagePreview.style.height = '';\r\n\r\n        // Now update with the new values.\r\n        const constrainField = this.form.querySelector(Selectors.IMAGE.elements.constrain);\r\n        const keyField = getKeyField();\r\n        const relativeField = getRelativeField();\r\n        if (constrainField.checked) {\r\n            // We are keeping the image in proportion.\r\n            // Calculate the size for the relative field.\r\n            if (keyField.isPercentageValue) {\r\n                // In proportion, so the percentages are the same.\r\n                relativeField.field.value = keyField.field.value;\r\n                relativeField.percentValue = keyField.percentValue;\r\n            } else {\r\n                relativeField.pixelSize = Math.round(\r\n                    keyField.pixelSize / this.rawImageDimensions[keyField.type] * this.rawImageDimensions[relativeField.type]\r\n                );\r\n                relativeField.field.value = relativeField.pixelSize;\r\n            }\r\n        }\r\n        setImageDimensions(imagePreview, keyField, relativeField, !!constrainField.checked);\r\n    }\r\n\r\n    getSelectedImageProperties() {\r\n        const image = this.getSelectedImage();\r\n        if (!image) {\r\n            this.selectedImage = null;\r\n            return null;\r\n        }\r\n\r\n        const properties = {\r\n            src: null,\r\n            alt: null,\r\n            width: null,\r\n            height: null,\r\n            align: '',\r\n            presentation: false,\r\n        };\r\n\r\n        const getImageHeight = (image) => {\r\n            if (!this.isPercentageValue(String(image.height))) {\r\n                return parseInt(image.height, 10);\r\n            }\r\n\r\n            return image.height;\r\n        };\r\n\r\n        const getImageWidth = (image) => {\r\n            if (!this.isPercentageValue(String(image.width))) {\r\n                return parseInt(image.width, 10);\r\n            }\r\n\r\n            return image.width;\r\n        };\r\n\r\n        // Get the current selection.\r\n        this.removeLegacyAlignment(image);\r\n        this.selectedImage = image;\r\n\r\n        properties.customStyle = image.style.cssText;\r\n\r\n        const width = getImageWidth(image);\r\n        if (width !== 0) {\r\n            properties.width = width;\r\n        }\r\n\r\n        const height = getImageHeight(image);\r\n        if (height !== 0) {\r\n            properties.height = height;\r\n        }\r\n\r\n        const alignment = this.getAlignmentProperties(image, properties);\r\n        if (alignment) {\r\n            properties.align = alignment.value;\r\n        }\r\n\r\n        properties.src = image.getAttribute('src');\r\n        properties.alt = image.getAttribute('alt') || '';\r\n        properties.presentation = (image.getAttribute('role') === 'presentation');\r\n\r\n        return properties;\r\n    }\r\n\r\n    removeLegacyAlignment(imageNode) {\r\n        if (!imageNode.style.margin) {\r\n            // There is no margin therefore this cannot match any known alignments.\r\n            return imageNode;\r\n        }\r\n\r\n        Selectors.IMAGE.alignments.some(alignment => {\r\n            if (imageNode.style[alignment.name] !== alignment.value) {\r\n                // The name/value do not match. Skip.\r\n                return false;\r\n            }\r\n            const normalisedNode = document.createElement('div');\r\n            normalisedNode.style.margin = alignment.margin;\r\n            if (imageNode.style.margin !== normalisedNode.style.margin) {\r\n                // The margin does not match.\r\n                return false;\r\n            }\r\n\r\n            imageNode.classList.add(this.getAlignmentClass(alignment.value));\r\n            imageNode.style[alignment.name] = null;\r\n            imageNode.style.margin = null;\r\n\r\n            return true;\r\n        });\r\n\r\n        return imageNode;\r\n    }\r\n\r\n    getAlignmentProperties(image) {\r\n        const currentAlignment = Selectors.IMAGE.alignments.find((alignment) => {\r\n            if (image.classList.contains(this.getAlignmentClass(alignment.value))) {\r\n                return true;\r\n            }\r\n\r\n            if (alignment.legacyValues) {\r\n                return alignment.legacyValues.some((legacyValue) => image.classList.contains(legacyValue));\r\n            }\r\n\r\n            return false;\r\n        });\r\n        if (currentAlignment) {\r\n            return currentAlignment;\r\n        }\r\n\r\n        return Selectors.IMAGE.alignments.find((alignment) => alignment.isDefault);\r\n    }\r\n\r\n    getSelectedImage() {\r\n        const imgElm = this.editor.selection.getNode();\r\n        const figureElm = this.editor.dom.getParent(imgElm, 'figure.image');\r\n        if (figureElm) {\r\n            return this.editor.dom.select('img', figureElm)[0];\r\n        }\r\n\r\n        if (imgElm && (imgElm.nodeName.toUpperCase() !== 'IMG' || this.isPlaceholderImage(imgElm))) {\r\n            return null;\r\n        }\r\n        return imgElm;\r\n    }\r\n\r\n    isPlaceholderImage(imgElm) {\r\n        if (imgElm.nodeName.toUpperCase() !== 'IMG') {\r\n            return false;\r\n        }\r\n\r\n        return (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\r\n    }\r\n\r\n    isPercentageValue(value) {\r\n        return value.match(/\\d+%/);\r\n    }\r\n\r\n    async registerEventListeners(modal) {\r\n        await modal.getBody();\r\n        const root = modal.getRoot()[0];\r\n\r\n        this.form = root.querySelector(Selectors.IMAGE.elements.form);\r\n        root.addEventListener('click', (e) => {\r\n            const submitAction = e.target.closest(Selectors.IMAGE.actions.submit);\r\n            const imageBrowserAction = e.target.closest(Selectors.IMAGE.actions.imageBrowser);\r\n            if (submitAction) {\r\n                e.preventDefault();\r\n                this.setImage();\r\n            }\r\n            if (imageBrowserAction && this.canShowFilePicker) {\r\n                e.preventDefault();\r\n                displayFilepicker(this.editor, 'image').then((params) => {\r\n                    const self = this;\r\n                    this.filePickerCallback(params, self);\r\n\r\n                    return;\r\n                }).catch();\r\n            }\r\n        });\r\n\r\n        root.addEventListener('change', (e) => {\r\n            const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\r\n            if (urlEle) {\r\n                this.hasErrorUrlField();\r\n            }\r\n\r\n            const presentationEle = e.target.closest(Selectors.IMAGE.elements.presentation);\r\n            if (presentationEle) {\r\n                this.hasErrorAltField();\r\n            }\r\n\r\n            const constrainEle = e.target.closest(Selectors.IMAGE.elements.constrain);\r\n            if (constrainEle) {\r\n                this.autoAdjustSize(true);\r\n            }\r\n        });\r\n\r\n        root.addEventListener('blur', (e) => {\r\n            if (e.target.nodeType === Node.ELEMENT_NODE) {\r\n                const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\r\n                if (urlEle) {\r\n                    this.urlChanged();\r\n                }\r\n\r\n                const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\r\n                if (altEle) {\r\n                    this.hasErrorAltField();\r\n                }\r\n\r\n                const widthEle = e.target.closest(Selectors.IMAGE.elements.width);\r\n                if (widthEle) {\r\n                    this.autoAdjustSize();\r\n                }\r\n\r\n                const heightEle = e.target.closest(Selectors.IMAGE.elements.height);\r\n                if (heightEle) {\r\n                    this.autoAdjustSize(true);\r\n                }\r\n            }\r\n        }, true);\r\n\r\n        // Character count.\r\n        root.addEventListener('keyup', (e) => {\r\n            const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\r\n            if (altEle) {\r\n                this.handleKeyupCharacterCount();\r\n            }\r\n        });\r\n    }\r\n};\r\n"],"names":["constructor","editor","WIDTH","HEIGHT","permissions","canShowFilePicker","filepicker","rawImageDimensions","currentImageData","this","getCurrentImageData","modal","ModalFactory","create","type","Modal","TYPE","title","templateContext","getTemplateContext","removeOnClose","large","currentModal","src","loadPreviewImage","registerEventListeners","show","alignmentTitles","top","middle","bottom","map","key","component","selected","titles","getAlignmentTitles","alignments","text","value","forEach","alignment","index","array","data","elementid","id","showfilepicker","alignoptions","getImageAlignment","selectedImageProperties","getSelectedImageProperties","properties","align","haspreview","alt","presentation","filePickerCallback","params","self","url","form","querySelector","Selectors","IMAGE","elements","width","height","storeImageDimensions","image","DEFAULTS","currentWidth","element","getCurrentWidth","currentHeight","getCurrentHeight","preview","setAttribute","style","display","constrain","isPercentageValue","checked","disabled","widthRatio","Math","round","parseInt","heightRatio","Image","addEventListener","autoAdjustSize","urlChanged","input","hasErrorUrlField","urlError","toggleVisibility","urlWarning","toggleAriaInvalid","hasErrorAltField","imageAltError","altWarning","selector","predicate","querySelectorAll","selectors","getAlignmentClass","updateWarning","getImageContext","classList","push","styles","responsive","customStyle","classlist","join","setImage","pendingPromise","Pending","resolve","isNaN","focus","render","then","html","insertContent","destroy","catch","handleKeyupCharacterCount","innerHTML","length","forceHeight","widthField","heightField","normalizeFieldData","fieldData","field","percentValue","pixelSize","imagePreview","constrainField","keyField","currentValue","getKeyField","relativeField","getStyleValue","setImageDimensions","getSelectedImage","selectedImage","removeLegacyAlignment","cssText","String","getImageWidth","getImageHeight","getAlignmentProperties","getAttribute","imageNode","margin","some","name","normalisedNode","document","createElement","add","currentAlignment","find","contains","legacyValues","legacyValue","isDefault","imgElm","selection","getNode","figureElm","dom","getParent","select","nodeName","toUpperCase","isPlaceholderImage","hasAttribute","match","getBody","root","getRoot","e","submitAction","target","closest","actions","submit","imageBrowserAction","imageBrowser","preventDefault","nodeType","Node","ELEMENT_NODE"],"mappings":"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"}