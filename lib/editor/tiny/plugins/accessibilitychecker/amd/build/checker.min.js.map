{"version":3,"file":"checker.min.js","sources":["../src/checker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * @package    tiny_accessibilitychecker\r\n * @copyright  2022, Stevani Andolo  <stevani@hotmail.com.au>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Templates from 'core/templates';\r\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\r\nimport {component} from './common';\r\nimport * as Modal from 'core/modal_factory';\r\nimport * as ModalEvents from 'core/modal_events';\r\nimport ColorBase from './colorbase';\r\nimport {getPlaceholderSelectors} from 'editor_tiny/options';\r\n\r\n/**\r\n * @typedef ProblemDetail\r\n * @type {object}\r\n * @param {string} description The description of the problem\r\n * @param {ProblemNode[]} problemNodes The list of affected nodes\r\n */\r\n\r\n/**\r\n * @typedef ProblemNode\r\n * @type {object}\r\n * @param {string} nodeName The node name for the affected node\r\n * @param {string} nodeIndex The indexd of the node\r\n * @param {string} text A description of the issue\r\n * @param {string} src The source of the image\r\n */\r\n\r\nexport default class {\r\n\r\n    constructor(editor) {\r\n        this.editor = editor;\r\n        this.colorBase = new ColorBase();\r\n        this.modal = null;\r\n        this.placeholderSelectors = null;\r\n        const placeholders = getPlaceholderSelectors(this.editor);\r\n        if (placeholders.length) {\r\n            this.placeholderSelectors = placeholders.join(', ');\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        delete this.editor;\r\n        delete this.colorBase;\r\n\r\n        this.modal.destroy();\r\n        delete this.modal;\r\n    }\r\n\r\n    async displayDialogue() {\r\n        this.modal = await Modal.create({\r\n            type: Modal.types.DEFAULT,\r\n            large: true,\r\n            title: getString('pluginname', component),\r\n            body: this.getDialogueContent()\r\n        });\r\n\r\n        // Destroy the class when hiding the modal.\r\n        this.modal.getRoot().on(ModalEvents.hidden, () => this.destroy());\r\n\r\n        this.modal.getRoot()[0].addEventListener('click', (event) => {\r\n            const faultLink = event.target.closest('[data-action=\"highlightfault\"]');\r\n            if (!faultLink) {\r\n                return;\r\n            }\r\n\r\n            event.preventDefault();\r\n\r\n            const nodeName = faultLink.dataset.nodeName;\r\n            let selectedNode = null;\r\n            if (nodeName) {\r\n                if (nodeName.includes(',') || nodeName === 'body') {\r\n                    selectedNode = this.editor.dom.select('body')[0];\r\n                } else {\r\n                    const nodeIndex = faultLink.dataset.nodeIndex ?? 0;\r\n                    selectedNode = this.editor.dom.select(nodeName)[nodeIndex];\r\n                }\r\n            }\r\n\r\n            if (selectedNode && selectedNode.nodeName.toUpperCase() !== 'BODY') {\r\n                this.selectAndScroll(selectedNode);\r\n            }\r\n\r\n            this.modal.hide();\r\n        });\r\n\r\n        this.modal.show();\r\n    }\r\n\r\n    async getAllWarningStrings() {\r\n        const keys = [\r\n            'emptytext',\r\n            'entiredocument',\r\n            'imagesmissingalt',\r\n            'needsmorecontrast',\r\n            'needsmoreheadings',\r\n            'tablesmissingcaption',\r\n            'tablesmissingheaders',\r\n            'tableswithmergedcells',\r\n        ];\r\n\r\n        const stringValues = await getStrings(keys.map((key) => ({key, component})));\r\n        return new Map(keys.map((key, index) => ([key, stringValues[index]])));\r\n    }\r\n\r\n    /**\r\n     * Return the dialogue content.\r\n     *\r\n     * @return {Promise<Array>} A template promise containing the rendered dialogue content.\r\n     */\r\n     async getDialogueContent() {\r\n        const langStrings = await this.getAllWarningStrings();\r\n\r\n        // Translate langstrings into real strings.\r\n        const warnings = this.getWarnings().map((warning) => {\r\n            if (warning.description) {\r\n                if (warning.description.type === 'langstring') {\r\n                    warning.description = langStrings.get(warning.description.value);\r\n                } else {\r\n                    warning.description = warning.description.value;\r\n                }\r\n            }\r\n\r\n            warning.nodeData = warning.nodeData.map((problemNode) => {\r\n                if (problemNode.text) {\r\n                    if (problemNode.text.type === 'langstring') {\r\n                        problemNode.text = langStrings.get(problemNode.text.value);\r\n                    } else {\r\n                        problemNode.text = problemNode.text.value;\r\n                    }\r\n                }\r\n\r\n                return problemNode;\r\n            });\r\n\r\n            return warning;\r\n        });\r\n\r\n        return Templates.render('tiny_accessibilitychecker/warning_content', {\r\n            warnings\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the selection and scroll to the selected element.\r\n     *\r\n     * @param {node} node\r\n     */\r\n    selectAndScroll(node) {\r\n        this.editor.selection.select(node).scrollIntoView({\r\n            behavior: 'smooth',\r\n            block: 'nearest'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Find all problems with the content editable region.\r\n     *\r\n     * @return {ProblemDetail[]} A complete list of all warnings and problems.\r\n     */\r\n    getWarnings() {\r\n        const warnings = [];\r\n\r\n        // Check Images with no alt text or dodgy alt text.\r\n        warnings.push(this.createWarnings('imagesmissingalt', this.checkImage(), true));\r\n        warnings.push(this.createWarnings('needsmorecontrast', this.checkOtherElements(), false));\r\n\r\n        // Check for no headings.\r\n        if (this.editor.getContent({format: 'text'}).length > 1000 && this.editor.dom.select('h3,h4,h5').length < 1) {\r\n            warnings.push(this.createWarnings('needsmoreheadings', [this.editor], false));\r\n        }\r\n\r\n        // Check for tables with no captions.\r\n        warnings.push(this.createWarnings('tablesmissingcaption', this.checkTableCaption(), false));\r\n\r\n        // Check for tables with merged cells.\r\n        warnings.push(this.createWarnings('tableswithmergedcells', this.checkTableMergedCells(), false));\r\n\r\n        // Check for tables with no row/col headers.\r\n        warnings.push(this.createWarnings('tablesmissingheaders', this.checkTableHeaders(), false));\r\n\r\n        return warnings.filter((warning) => warning.nodeData.length > 0);\r\n    }\r\n\r\n    /**\r\n     * Generate the data that describes the issues found.\r\n     *\r\n     * @param {String} description Description of this failure.\r\n     * @param {HTMLElement[]} nodes An array of failing nodes.\r\n     * @param {boolean} isImageType Whether the warnings are related to image type checks\r\n     * @return {ProblemDetail[]} A set of problem details\r\n     */\r\n    createWarnings(description, nodes, isImageType) {\r\n        const getTextValue = (node) => {\r\n            if (node === this.editor) {\r\n                return {\r\n                    type: 'langstring',\r\n                    value: 'entiredocument',\r\n                };\r\n            }\r\n\r\n            const emptyStringValue = {\r\n                type: 'langstring',\r\n                value: 'emptytext',\r\n            };\r\n            if ('innerText' in node) {\r\n                const value = node.innerText.trim();\r\n                return value.length ? {type: 'raw', value} : emptyStringValue;\r\n            } else if ('textContent' in node) {\r\n                const value = node.textContent.trim();\r\n                return value.length ? {type: 'raw', value} : emptyStringValue;\r\n            }\r\n\r\n            return {type: 'raw', value: node.nodeName};\r\n        };\r\n\r\n        const getEventualNode = (node) => {\r\n            if (node !== this.editor) {\r\n                return node;\r\n            }\r\n            const childNodes = node.dom.select('body')[0].childNodes;\r\n            if (childNodes.length) {\r\n                return document.body;\r\n            } else {\r\n                return childNodes;\r\n            }\r\n        };\r\n\r\n        const warning = {\r\n            description: {\r\n                type: 'langstring',\r\n                value: description,\r\n            },\r\n            nodeData: [],\r\n        };\r\n\r\n        warning.nodeData = [...nodes].filter((node) => {\r\n            // If the failed node is a placeholder element. We should remove it from the list.\r\n            if (node !== this.editor && this.placeholderSelectors) {\r\n                return node.matches(this.placeholderSelectors) === false;\r\n            }\r\n\r\n            return node;\r\n        }).map((node) => {\r\n            const describedNode = getEventualNode(node);\r\n\r\n            // Find the index of the node within the type of node.\r\n            // This is used to select the correct node when the user selects it.\r\n            const nodeIndex = this.editor.dom.select(describedNode.nodeName).indexOf(describedNode);\r\n            const warning = {\r\n                src: null,\r\n                text: null,\r\n                nodeName: describedNode.nodeName,\r\n                nodeIndex,\r\n            };\r\n\r\n            if (isImageType) {\r\n                warning.src = node.getAttribute('src');\r\n            } else {\r\n                warning.text = getTextValue(node);\r\n            }\r\n\r\n            return warning;\r\n        });\r\n\r\n        return warning;\r\n    }\r\n\r\n    /**\r\n     * Check accessiblity issue only for img type.\r\n     *\r\n     * @return {Node} A complete list of all warnings and problems.\r\n     */\r\n    checkImage() {\r\n        const problemNodes = [];\r\n        this.editor.dom.select('img').forEach((img) => {\r\n            const alt = img.getAttribute('alt');\r\n            if (!alt && img.getAttribute('role') !== 'presentation') {\r\n                problemNodes.push(img);\r\n            }\r\n        });\r\n        return problemNodes;\r\n    }\r\n\r\n    /**\r\n     * Look for any table without a caption.\r\n     *\r\n     * @return {Node} A complete list of all warnings and problems.\r\n     */\r\n    checkTableCaption() {\r\n        const problemNodes = [];\r\n        this.editor.dom.select('table').forEach((table) => {\r\n            const caption = table.querySelector('caption');\r\n            if (!caption?.textContent.trim()) {\r\n                problemNodes.push(table);\r\n            }\r\n        });\r\n\r\n        return problemNodes;\r\n    }\r\n\r\n    /**\r\n     * Check accessiblity issue for not img and table only.\r\n     *\r\n     * @return {Node} A complete list of all warnings and problems.\r\n     * @private\r\n     */\r\n    checkOtherElements() {\r\n        const problemNodes = [];\r\n\r\n        const getRatio = (lum1, lum2) => {\r\n            // Algorithm from \"http://www.w3.org/TR/WCAG20-GENERAL/G18.html\".\r\n            if (lum1 > lum2) {\r\n                return (lum1 + 0.05) / (lum2 + 0.05);\r\n            } else {\r\n                return (lum2 + 0.05) / (lum1 + 0.05);\r\n            }\r\n        };\r\n\r\n        this.editor.dom.select('body *')\r\n            .filter((node) => node.hasChildNodes() && node.childNodes[0].nodeValue !== null)\r\n            .forEach((node) => {\r\n                const foreground = this.colorBase.fromArray(\r\n                    this.getComputedBackgroundColor(\r\n                        node,\r\n                        window.getComputedStyle(node, null).getPropertyValue('color')\r\n                    ),\r\n                    this.colorBase.TYPES.RGBA\r\n                );\r\n                const background = this.colorBase.fromArray(\r\n                    this.getComputedBackgroundColor(\r\n                        node\r\n                    ),\r\n                    this.colorBase.TYPES.RGBA\r\n                );\r\n\r\n                const lum1 = this.getLuminanceFromCssColor(foreground);\r\n                const lum2 = this.getLuminanceFromCssColor(background);\r\n                const ratio = getRatio(lum1, lum2);\r\n\r\n                if (ratio <= 4.5) {\r\n                    window.console.log(`\r\n                        Contrast ratio is too low: ${ratio}\r\n                        Colour 1: ${foreground}\r\n                        Colour 2: ${background}\r\n                        Luminance 1: ${lum1}\r\n                        Luminance 2: ${lum2}\r\n                    `);\r\n\r\n                    // We only want the highest node with dodgy contrast reported.\r\n                    if (!problemNodes.find((existingProblemNode) => existingProblemNode.contains(node))) {\r\n                        problemNodes.push(node);\r\n                    }\r\n                }\r\n            });\r\n        return problemNodes;\r\n    }\r\n\r\n    /**\r\n     * Check accessiblity issue only for table with merged cells.\r\n     *\r\n     * @return {Node} A complete list of all warnings and problems.\r\n     * @private\r\n     */\r\n    checkTableMergedCells() {\r\n        const problemNodes = [];\r\n        this.editor.dom.select('table').forEach((table) => {\r\n            const rowcolspan = table.querySelectorAll('[colspan], [rowspan]');\r\n            if (rowcolspan.length) {\r\n                problemNodes.push(table);\r\n            }\r\n        });\r\n        return problemNodes;\r\n    }\r\n\r\n    /**\r\n     * Check accessiblity issue only for table with no headers.\r\n     *\r\n     * @return {Node} A complete list of all warnings and problems.\r\n     * @private\r\n     */\r\n    checkTableHeaders() {\r\n        const problemNodes = [];\r\n\r\n        this.editor.dom.select('table').forEach((table) => {\r\n            if (table.querySelector('tr').querySelector('td')) {\r\n                // The first row has a non-header cell, so all rows must have at least one header.\r\n                const missingHeader = [...table.querySelectorAll('tr')].some((row) => {\r\n                    const header = row.querySelector('th');\r\n                    if (!header) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (!header.textContent.trim()) {\r\n                        return true;\r\n                    }\r\n\r\n                    return false;\r\n                });\r\n                if (missingHeader) {\r\n                    // At least one row is missing the header, or it is empty.\r\n                    problemNodes.push(table);\r\n                }\r\n            } else {\r\n                // Every header must have some content.\r\n                if ([...table.querySelectorAll('tr th')].some((header) => !header.textContent.trim())) {\r\n                    problemNodes.push(table);\r\n                }\r\n            }\r\n        });\r\n        return problemNodes;\r\n    }\r\n\r\n    /**\r\n     * Convert a CSS color to a luminance value.\r\n     *\r\n     * @param {String} colortext The Hex value for the colour\r\n     * @return {Number} The luminance value.\r\n     * @private\r\n     */\r\n    getLuminanceFromCssColor(colortext) {\r\n        if (colortext === 'transparent') {\r\n            colortext = '#ffffff';\r\n        }\r\n        const color = this.colorBase.toArray(this.colorBase.toRGB(colortext));\r\n\r\n        // Algorithm from \"http://www.w3.org/TR/WCAG20-GENERAL/G18.html\".\r\n        const part1 = (a) => {\r\n            a = parseInt(a, 10) / 255.0;\r\n            if (a <= 0.03928) {\r\n                a = a / 12.92;\r\n            } else {\r\n                a = Math.pow(((a + 0.055) / 1.055), 2.4);\r\n            }\r\n            return a;\r\n        };\r\n\r\n        const r1 = part1(color[0]);\r\n        const g1 = part1(color[1]);\r\n        const b1 = part1(color[2]);\r\n\r\n        return 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1;\r\n    }\r\n\r\n    /**\r\n     * Get the computed RGB converted to full alpha value, considering the node hierarchy.\r\n     *\r\n     * @param {Node} node\r\n     * @param {String} color The initial colour. If not specified, fetches the backgroundColor from the node.\r\n     * @return {Array} Colour in Array form (RGBA)\r\n     * @private\r\n     */\r\n    getComputedBackgroundColor(node, color) {\r\n        if (!node.parentNode) {\r\n            // This is the document node and has no colour.\r\n            // We cannot use window.getComputedStyle on the document.\r\n            // If we got here, then the document has no background colour. Fall back to white.\r\n            return this.colorBase.toArray('rgba(255, 255, 255, 1)');\r\n        }\r\n        color = color ? color : window.getComputedStyle(node, null).getPropertyValue('background-color');\r\n\r\n        if (color.toLowerCase() === 'rgba(0, 0, 0, 0)' || color.toLowerCase() === 'transparent') {\r\n            color = 'rgba(1, 1, 1, 0)';\r\n        }\r\n\r\n        // Convert the colour to its constituent parts in RGBA format, then fetch the alpha.\r\n        const colorParts = this.colorBase.toArray(color);\r\n        const alpha = colorParts[3];\r\n\r\n        if (alpha === 1) {\r\n            // If the alpha of the background is already 1, then the parent background colour does not change anything.\r\n            return colorParts;\r\n        }\r\n\r\n        // Fetch the computed background colour of the parent and use it to calculate the RGB of this item.\r\n        const parentColor = this.getComputedBackgroundColor(node.parentNode);\r\n        return [\r\n            // RGB = (alpha * R|G|B) + (1 - alpha * solid parent colour).\r\n            (1 - alpha) * parentColor[0] + alpha * colorParts[0],\r\n            (1 - alpha) * parentColor[1] + alpha * colorParts[1],\r\n            (1 - alpha) * parentColor[2] + alpha * colorParts[2],\r\n            // We always return a colour with full alpha.\r\n            1\r\n        ];\r\n    }\r\n}\r\n"],"names":["constructor","editor","colorBase","ColorBase","modal","placeholderSelectors","placeholders","this","length","join","destroy","Modal","create","type","types","DEFAULT","large","title","component","body","getDialogueContent","getRoot","on","ModalEvents","hidden","addEventListener","event","faultLink","target","closest","preventDefault","nodeName","dataset","selectedNode","includes","dom","select","nodeIndex","toUpperCase","selectAndScroll","hide","show","keys","stringValues","map","key","Map","index","langStrings","getAllWarningStrings","warnings","getWarnings","warning","description","get","value","nodeData","problemNode","text","Templates","render","node","selection","scrollIntoView","behavior","block","push","createWarnings","checkImage","checkOtherElements","getContent","format","checkTableCaption","checkTableMergedCells","checkTableHeaders","filter","nodes","isImageType","getTextValue","emptyStringValue","innerText","trim","textContent","getEventualNode","childNodes","document","matches","describedNode","indexOf","src","getAttribute","problemNodes","forEach","img","table","caption","querySelector","hasChildNodes","nodeValue","foreground","fromArray","getComputedBackgroundColor","window","getComputedStyle","getPropertyValue","TYPES","RGBA","background","lum1","getLuminanceFromCssColor","lum2","ratio","getRatio","console","log","find","existingProblemNode","contains","querySelectorAll","some","row","header","colortext","color","toArray","toRGB","part1","a","parseInt","Math","pow","parentNode","toLowerCase","colorParts","alpha","parentColor"],"mappings":";;;;;qSA+CIA,YAAYC,aACHA,OAASA,YACTC,UAAY,IAAIC,wBAChBC,MAAQ,UACRC,qBAAuB,WACtBC,cAAe,oCAAwBC,KAAKN,QAC9CK,aAAaE,cACRH,qBAAuBC,aAAaG,KAAK,OAItDC,iBACWH,KAAKN,cACLM,KAAKL,eAEPE,MAAMM,iBACJH,KAAKH,mCAIPA,YAAcO,MAAMC,OAAO,CAC5BC,KAAMF,MAAMG,MAAMC,QAClBC,OAAO,EACPC,OAAO,mBAAU,aAAcC,mBAC/BC,KAAMZ,KAAKa,4BAIVhB,MAAMiB,UAAUC,GAAGC,YAAYC,QAAQ,IAAMjB,KAAKG,iBAElDN,MAAMiB,UAAU,GAAGI,iBAAiB,SAAUC,cACzCC,UAAYD,MAAME,OAAOC,QAAQ,sCAClCF,iBAILD,MAAMI,uBAEAC,SAAWJ,UAAUK,QAAQD,aAC/BE,aAAe,QACfF,YACIA,SAASG,SAAS,MAAqB,SAAbH,SAC1BE,aAAe1B,KAAKN,OAAOkC,IAAIC,OAAO,QAAQ,OAC3C,iCACGC,wCAAYV,UAAUK,QAAQK,iEAAa,EACjDJ,aAAe1B,KAAKN,OAAOkC,IAAIC,OAAOL,UAAUM,WAIpDJ,cAAwD,SAAxCA,aAAaF,SAASO,oBACjCC,gBAAgBN,mBAGpB7B,MAAMoC,eAGVpC,MAAMqC,0CAILC,KAAO,CACT,YACA,iBACA,mBACA,oBACA,oBACA,uBACA,uBACA,yBAGEC,mBAAqB,oBAAWD,KAAKE,KAAKC,OAAUA,IAAAA,IAAK3B,UAAAA,8BACxD,IAAI4B,IAAIJ,KAAKE,KAAI,CAACC,IAAKE,QAAW,CAACF,IAAKF,aAAaI,4CAStDC,kBAAoBzC,KAAK0C,uBAGzBC,SAAW3C,KAAK4C,cAAcP,KAAKQ,UACjCA,QAAQC,cACyB,eAA7BD,QAAQC,YAAYxC,KACpBuC,QAAQC,YAAcL,YAAYM,IAAIF,QAAQC,YAAYE,OAE1DH,QAAQC,YAAcD,QAAQC,YAAYE,OAIlDH,QAAQI,SAAWJ,QAAQI,SAASZ,KAAKa,cACjCA,YAAYC,OACkB,eAA1BD,YAAYC,KAAK7C,KACjB4C,YAAYC,KAAOV,YAAYM,IAAIG,YAAYC,KAAKH,OAEpDE,YAAYC,KAAOD,YAAYC,KAAKH,OAIrCE,eAGJL,kBAGJO,mBAAUC,OAAO,4CAA6C,CACjEV,SAAAA,WASRX,gBAAgBsB,WACP5D,OAAO6D,UAAU1B,OAAOyB,MAAME,eAAe,CAC9CC,SAAU,SACVC,MAAO,YASfd,oBACUD,SAAW,UAGjBA,SAASgB,KAAK3D,KAAK4D,eAAe,mBAAoB5D,KAAK6D,cAAc,IACzElB,SAASgB,KAAK3D,KAAK4D,eAAe,oBAAqB5D,KAAK8D,sBAAsB,IAG9E9D,KAAKN,OAAOqE,WAAW,CAACC,OAAQ,SAAS/D,OAAS,KAAQD,KAAKN,OAAOkC,IAAIC,OAAO,YAAY5B,OAAS,GACtG0C,SAASgB,KAAK3D,KAAK4D,eAAe,oBAAqB,CAAC5D,KAAKN,SAAS,IAI1EiD,SAASgB,KAAK3D,KAAK4D,eAAe,uBAAwB5D,KAAKiE,qBAAqB,IAGpFtB,SAASgB,KAAK3D,KAAK4D,eAAe,wBAAyB5D,KAAKkE,yBAAyB,IAGzFvB,SAASgB,KAAK3D,KAAK4D,eAAe,uBAAwB5D,KAAKmE,qBAAqB,IAE7ExB,SAASyB,QAAQvB,SAAYA,QAAQI,SAAShD,OAAS,IAWlE2D,eAAed,YAAauB,MAAOC,mBACzBC,aAAgBjB,UACdA,OAAStD,KAAKN,aACP,CACHY,KAAM,aACN0C,MAAO,wBAITwB,iBAAmB,CACrBlE,KAAM,aACN0C,MAAO,gBAEP,cAAeM,KAAM,OACfN,MAAQM,KAAKmB,UAAUC,cACtB1B,MAAM/C,OAAS,CAACK,KAAM,MAAO0C,MAAAA,OAASwB,iBAC1C,GAAI,gBAAiBlB,KAAM,OACxBN,MAAQM,KAAKqB,YAAYD,cACxB1B,MAAM/C,OAAS,CAACK,KAAM,MAAO0C,MAAAA,OAASwB,uBAG1C,CAAClE,KAAM,MAAO0C,MAAOM,KAAK9B,WAG/BoD,gBAAmBtB,UACjBA,OAAStD,KAAKN,cACP4D,WAELuB,WAAavB,KAAK1B,IAAIC,OAAO,QAAQ,GAAGgD,kBAC1CA,WAAW5E,OACJ6E,SAASlE,KAETiE,YAIThC,QAAU,CACZC,YAAa,CACTxC,KAAM,aACN0C,MAAOF,aAEXG,SAAU,WAGdJ,QAAQI,SAAW,IAAIoB,OAAOD,QAAQd,MAE9BA,OAAStD,KAAKN,QAAUM,KAAKF,sBACsB,IAA5CwD,KAAKyB,QAAQ/E,KAAKF,sBAGtBwD,OACRjB,KAAKiB,aACE0B,cAAgBJ,gBAAgBtB,MAIhCxB,UAAY9B,KAAKN,OAAOkC,IAAIC,OAAOmD,cAAcxD,UAAUyD,QAAQD,eACnEnC,QAAU,CACZqC,IAAK,KACL/B,KAAM,KACN3B,SAAUwD,cAAcxD,SACxBM,UAAAA,kBAGAwC,YACAzB,QAAQqC,IAAM5B,KAAK6B,aAAa,OAEhCtC,QAAQM,KAAOoB,aAAajB,MAGzBT,WAGJA,QAQXgB,mBACUuB,aAAe,eAChB1F,OAAOkC,IAAIC,OAAO,OAAOwD,SAASC,MACvBA,IAAIH,aAAa,QACY,iBAA7BG,IAAIH,aAAa,SACzBC,aAAazB,KAAK2B,QAGnBF,aAQXnB,0BACUmB,aAAe,eAChB1F,OAAOkC,IAAIC,OAAO,SAASwD,SAASE,cAC/BC,QAAUD,MAAME,cAAc,WAC/BD,MAAAA,SAAAA,QAASb,YAAYD,QACtBU,aAAazB,KAAK4B,UAInBH,aASXtB,2BACUsB,aAAe,eAWhB1F,OAAOkC,IAAIC,OAAO,UAClBuC,QAAQd,MAASA,KAAKoC,iBAAoD,OAAjCpC,KAAKuB,WAAW,GAAGc,YAC5DN,SAAS/B,aACAsC,WAAa5F,KAAKL,UAAUkG,UAC9B7F,KAAK8F,2BACDxC,KACAyC,OAAOC,iBAAiB1C,KAAM,MAAM2C,iBAAiB,UAEzDjG,KAAKL,UAAUuG,MAAMC,MAEnBC,WAAapG,KAAKL,UAAUkG,UAC9B7F,KAAK8F,2BACDxC,MAEJtD,KAAKL,UAAUuG,MAAMC,MAGnBE,KAAOrG,KAAKsG,yBAAyBV,YACrCW,KAAOvG,KAAKsG,yBAAyBF,YACrCI,MA5BG,EAACH,KAAME,OAEhBF,KAAOE,MACCF,KAAO,MAASE,KAAO,MAEvBA,KAAO,MAASF,KAAO,KAuBjBI,CAASJ,KAAME,MAEzBC,OAAS,MACTT,OAAOW,QAAQC,mEACkBH,qDACjBZ,0DACAQ,6DACGC,uDACAE,gCAIdnB,aAAawB,MAAMC,qBAAwBA,oBAAoBC,SAASxD,SACzE8B,aAAazB,KAAKL,UAI3B8B,aASXlB,8BACUkB,aAAe,eAChB1F,OAAOkC,IAAIC,OAAO,SAASwD,SAASE,QAClBA,MAAMwB,iBAAiB,wBAC3B9G,QACXmF,aAAazB,KAAK4B,UAGnBH,aASXjB,0BACUiB,aAAe,eAEhB1F,OAAOkC,IAAIC,OAAO,SAASwD,SAASE,WACjCA,MAAME,cAAc,MAAMA,cAAc,MAAO,CAEzB,IAAIF,MAAMwB,iBAAiB,OAAOC,MAAMC,YACpDC,OAASD,IAAIxB,cAAc,aAC5ByB,SAIAA,OAAOvC,YAAYD,WAQxBU,aAAazB,KAAK4B,WAIlB,IAAIA,MAAMwB,iBAAiB,UAAUC,MAAME,SAAYA,OAAOvC,YAAYD,UAC1EU,aAAazB,KAAK4B,UAIvBH,aAUXkB,yBAAyBa,WACH,gBAAdA,YACAA,UAAY,iBAEVC,MAAQpH,KAAKL,UAAU0H,QAAQrH,KAAKL,UAAU2H,MAAMH,YAGpDI,MAASC,KACXA,EAAIC,SAASD,EAAG,IAAM,MACb,OACLA,GAAQ,MAERA,EAAIE,KAAKC,KAAMH,EAAI,MAAS,MAAQ,KAEjCA,SAOJ,MAJID,MAAMH,MAAM,IAIF,MAHVG,MAAMH,MAAM,IAGY,MAFxBG,MAAMH,MAAM,IAa3BtB,2BAA2BxC,KAAM8D,WACxB9D,KAAKsE,kBAIC5H,KAAKL,UAAU0H,QAAQ,0BAIN,sBAF5BD,MAAQA,OAAgBrB,OAAOC,iBAAiB1C,KAAM,MAAM2C,iBAAiB,qBAEnE4B,eAAgE,gBAAxBT,MAAMS,gBACpDT,MAAQ,0BAINU,WAAa9H,KAAKL,UAAU0H,QAAQD,OACpCW,MAAQD,WAAW,MAEX,IAAVC,aAEOD,iBAILE,YAAchI,KAAK8F,2BAA2BxC,KAAKsE,kBAClD,EAEF,EAAIG,OAASC,YAAY,GAAKD,MAAQD,WAAW,IACjD,EAAIC,OAASC,YAAY,GAAKD,MAAQD,WAAW,IACjD,EAAIC,OAASC,YAAY,GAAKD,MAAQD,WAAW,GAElD"}