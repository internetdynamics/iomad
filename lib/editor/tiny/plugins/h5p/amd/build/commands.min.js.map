{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny H5P Content configuration.\r\n *\r\n * @module      tiny_h5p/commands\r\n * @copyright   2022 Andrew Lyons <andrew@nicols.co.uk>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {getButtonImage} from 'editor_tiny/utils';\r\nimport {handleAction} from './ui';\r\nimport {get_string as getString} from 'core/str';\r\nimport {\r\n    component,\r\n    buttonName,\r\n    icon,\r\n} from './common';\r\nimport {hasAnyH5PPermission} from './options';\r\n\r\nexport const getSetup = async() => {\r\n    const [\r\n        buttonText,\r\n        buttonImage,\r\n    ] = await Promise.all([\r\n        getString('buttontitle', component),\r\n        getButtonImage('icon', component),\r\n    ]);\r\n\r\n    return (editor) => {\r\n        if (!hasAnyH5PPermission(editor)) {\r\n            return;\r\n        }\r\n        // Register the H5P Icon.\r\n        editor.ui.registry.addIcon(icon, buttonImage.html);\r\n\r\n        // Register the Menu Button as a toggle.\r\n        // This means that when highlighted over an existing H5P element it will show as toggled on.\r\n        editor.ui.registry.addToggleButton(buttonName, {\r\n            icon,\r\n            tooltip: buttonText,\r\n            onAction: () => handleAction(editor),\r\n            onSetup: (api) => {\r\n                // Set the button to be active if the current selection matches the h5p formatter registered above during PreInit.\r\n                api.setActive(editor.formatter.match('h5p'));\r\n                const changed = editor.formatter.formatChanged('h5p', (state) => api.setActive(state));\r\n                return () => changed.unbind();\r\n            },\r\n        });\r\n\r\n        // Add the H5P Menu Item.\r\n        // This allows it to be added to a standard menu, or a context menu.\r\n        editor.ui.registry.addMenuItem(buttonName, {\r\n            icon,\r\n            text: buttonText,\r\n            onAction: () => handleAction(editor),\r\n        });\r\n    };\r\n};\r\n"],"names":["async","buttonText","buttonImage","Promise","all","component","editor","ui","registry","addIcon","icon","html","addToggleButton","buttonName","tooltip","onAction","onSetup","api","setActive","formatter","match","changed","formatChanged","state","unbind","addMenuItem","text"],"mappings":"4PAiCwBA,gBAEhBC,WACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,cAAeC,oBACzB,yBAAe,OAAQA,4BAGnBC,UACC,gCAAoBA,UAIzBA,OAAOC,GAAGC,SAASC,QAAQC,aAAMR,YAAYS,MAI7CL,OAAOC,GAAGC,SAASI,gBAAgBC,mBAAY,CAC3CH,KAAAA,aACAI,QAASb,WACTc,SAAU,KAAM,oBAAaT,QAC7BU,QAAUC,MAENA,IAAIC,UAAUZ,OAAOa,UAAUC,MAAM,cAC/BC,QAAUf,OAAOa,UAAUG,cAAc,OAAQC,OAAUN,IAAIC,UAAUK,eACxE,IAAMF,QAAQG,YAM7BlB,OAAOC,GAAGC,SAASiB,YAAYZ,mBAAY,CACvCH,KAAAA,aACAgB,KAAMzB,WACNc,SAAU,KAAM,oBAAaT"}