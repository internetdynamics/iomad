{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Repository helper for the Moodle Tiny Autosave plugin.\r\n *\r\n * @module      tiny_autosave/repository\r\n * @copyright   2022 Andrew Lyons <andrew@nicols.co.uk>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {call} from 'core/ajax';\r\nimport * as config from 'core/config';\r\nimport * as Options from './options';\r\nimport Pending from 'core/pending';\r\nimport {ensureEditorIsValid} from 'editor_tiny/utils';\r\n\r\nconst fetchOne = (methodname, args) => call([{\r\n    methodname,\r\n    args,\r\n}])[0];\r\n\r\n/**\r\n * Resume an Autosave session.\r\n *\r\n * @param {TinyMCE} editor The TinyMCE editor instance\r\n * @returns {Promise<AutosaveSession>} The Autosave session\r\n */\r\nexport const resumeAutosaveSession = (editor) => {\r\n    if (!ensureEditorIsValid(editor)) {\r\n        return Promise.reject('Invalid editor');\r\n    }\r\n    const pendingPromise = new Pending('tiny_autosave/repository:resumeAutosaveSession');\r\n    return fetchOne('tiny_autosave_resume_session', {\r\n        contextid: Options.getContextId(editor),\r\n        pagehash: Options.getPageHash(editor),\r\n        pageinstance: Options.getPageInstance(editor),\r\n        elementid: editor.targetElm.id,\r\n        draftid: Options.getDraftItemId(editor),\r\n    })\r\n    .then((result) => {\r\n        pendingPromise.resolve();\r\n        return result;\r\n    });\r\n};\r\n\r\n/**\r\n * Update the content of the Autosave session.\r\n *\r\n * @param {TinyMCE} editor The TinyMCE editor instance\r\n * @returns {Promise<AutosaveSession>} The Autosave session\r\n */\r\nexport const updateAutosaveSession = (editor) => {\r\n    if (!ensureEditorIsValid(editor)) {\r\n        return Promise.reject('Invalid editor');\r\n    }\r\n    if (Options.hasAutosaveHasReset(editor)) {\r\n        return Promise.reject('Skipping store of autosave content - content has been reset');\r\n    }\r\n\r\n    const pendingPromise = new Pending('tiny_autosave/repository:updateAutosaveSession');\r\n\r\n    return fetchOne('tiny_autosave_update_session', {\r\n        contextid: Options.getContextId(editor),\r\n        pagehash: Options.getPageHash(editor),\r\n        pageinstance: Options.getPageInstance(editor),\r\n        elementid: editor.targetElm.id,\r\n        drafttext: editor.getContent(),\r\n    })\r\n    .then((result) => {\r\n        pendingPromise.resolve();\r\n        return result;\r\n    });\r\n};\r\n\r\n/**\r\n * Remove the Autosave session.\r\n *\r\n * @param {TinyMCE} editor The TinyMCE editor instance\r\n */\r\nexport const removeAutosaveSession = (editor) => {\r\n    if (!ensureEditorIsValid(editor)) {\r\n        throw new Error('Invalid editor');\r\n    }\r\n    Options.setAutosaveHasReset(editor);\r\n\r\n    // Please note that we must use a Beacon send here.\r\n    // The XHR is not guaranteed because it will be aborted on page transition.\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API\r\n    // Note: Moodle does not currently have a sendBeacon API endpoint.\r\n    const requestUrl = new URL(`${config.wwwroot}/lib/ajax/service.php`);\r\n    requestUrl.searchParams.set('sesskey', config.sesskey);\r\n\r\n    const args = {\r\n        contextid: Options.getContextId(editor),\r\n        pagehash: Options.getPageHash(editor),\r\n        pageinstance: Options.getPageInstance(editor),\r\n        elementid: editor.targetElm.id,\r\n    };\r\n    navigator.sendBeacon(requestUrl, JSON.stringify([{\r\n        index: 0,\r\n        methodname: 'tiny_autosave_reset_session',\r\n        args,\r\n    }]));\r\n};\r\n"],"names":["fetchOne","methodname","args","editor","Promise","reject","pendingPromise","Pending","contextid","Options","getContextId","pagehash","getPageHash","pageinstance","getPageInstance","elementid","targetElm","id","draftid","getDraftItemId","then","result","resolve","hasAutosaveHasReset","drafttext","getContent","Error","setAutosaveHasReset","requestUrl","URL","config","wwwroot","searchParams","set","sesskey","navigator","sendBeacon","JSON","stringify","index"],"mappings":";;;;;;;iTA6BMA,SAAW,CAACC,WAAYC,QAAS,cAAK,CAAC,CACzCD,WAAAA,WACAC,KAAAA,QACA,kCAQkCC,cAC7B,8BAAoBA,eACdC,QAAQC,OAAO,wBAEpBC,eAAiB,IAAIC,iBAAQ,yDAC5BP,SAAS,+BAAgC,CAC5CQ,UAAWC,QAAQC,aAAaP,QAChCQ,SAAUF,QAAQG,YAAYT,QAC9BU,aAAcJ,QAAQK,gBAAgBX,QACtCY,UAAWZ,OAAOa,UAAUC,GAC5BC,QAAST,QAAQU,eAAehB,UAEnCiB,MAAMC,SACHf,eAAegB,UACRD,0CAUuBlB,cAC7B,8BAAoBA,eACdC,QAAQC,OAAO,qBAEtBI,QAAQc,oBAAoBpB,eACrBC,QAAQC,OAAO,qEAGpBC,eAAiB,IAAIC,iBAAQ,yDAE5BP,SAAS,+BAAgC,CAC5CQ,UAAWC,QAAQC,aAAaP,QAChCQ,SAAUF,QAAQG,YAAYT,QAC9BU,aAAcJ,QAAQK,gBAAgBX,QACtCY,UAAWZ,OAAOa,UAAUC,GAC5BO,UAAWrB,OAAOsB,eAErBL,MAAMC,SACHf,eAAegB,UACRD,0CASuBlB,cAC7B,8BAAoBA,cACf,IAAIuB,MAAM,kBAEpBjB,QAAQkB,oBAAoBxB,cAMtByB,WAAa,IAAIC,cAAOC,OAAOC,kCACrCH,WAAWI,aAAaC,IAAI,UAAWH,OAAOI,eAExChC,KAAO,CACTM,UAAWC,QAAQC,aAAaP,QAChCQ,SAAUF,QAAQG,YAAYT,QAC9BU,aAAcJ,QAAQK,gBAAgBX,QACtCY,UAAWZ,OAAOa,UAAUC,IAEhCkB,UAAUC,WAAWR,WAAYS,KAAKC,UAAU,CAAC,CAC7CC,MAAO,EACPtC,WAAY,8BACZC,KAAAA"}