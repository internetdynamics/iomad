{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Options helper for the Moodle Tiny Autosave plugin.\r\n *\r\n * @module      tiny_autosave/options\r\n * @copyright   2022 Andrew Lyons <andrew@nicols.co.uk>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {pluginName} from './common';\r\nimport {\r\n    getContextId,\r\n    getDraftItemId,\r\n    getPluginOptionName,\r\n} from 'editor_tiny/options';\r\nimport {ensureEditorIsValid} from 'editor_tiny/utils';\r\n\r\nconst initialisedOptionName = getPluginOptionName(pluginName, 'initialised');\r\nconst pageHashName = getPluginOptionName(pluginName, 'pagehash');\r\nconst pageInstanceName = getPluginOptionName(pluginName, 'pageinstance');\r\nconst backoffTime = getPluginOptionName(pluginName, 'backoffTime');\r\nconst autosaveHasReset = getPluginOptionName(pluginName, 'autosaveHasReset');\r\n\r\nexport const register = (editor) => {\r\n    const registerOption = editor.options.register;\r\n    registerOption(initialisedOptionName, {\r\n        processor: 'boolean',\r\n        \"default\": false,\r\n    });\r\n\r\n    registerOption(pageHashName, {\r\n        processor: 'string',\r\n        \"default\": '',\r\n    });\r\n\r\n    registerOption(pageInstanceName, {\r\n        processor: 'string',\r\n        \"default\": '',\r\n    });\r\n    registerOption(pageInstanceName, {\r\n        processor: 'string',\r\n        \"default\": '',\r\n    });\r\n    registerOption(backoffTime, {\r\n        processor: 'number',\r\n        \"default\": 500,\r\n    });\r\n    registerOption(autosaveHasReset, {\r\n        processor: 'boolean',\r\n        \"default\": false,\r\n    });\r\n};\r\n\r\nexport const isInitialised = (editor) => {\r\n    if (!ensureEditorIsValid(editor)) {\r\n        return false;\r\n    }\r\n\r\n    return editor.options.get(initialisedOptionName);\r\n};\r\nexport const markInitialised = (editor) => editor.options.set(initialisedOptionName, true);\r\nexport const getPageHash = (editor) => editor.options.get(pageHashName);\r\nexport const getPageInstance = (editor) => editor.options.get(pageInstanceName);\r\nexport const getBackoffTime = (editor) => editor.options.get(backoffTime);\r\nexport const setAutosaveHasReset = (editor) => editor.options.set(autosaveHasReset, true);\r\nexport const hasAutosaveHasReset = (editor) => editor.options.get(autosaveHasReset);\r\n\r\nexport {\r\n    getContextId,\r\n    getDraftItemId,\r\n};\r\n"],"names":["initialisedOptionName","pluginName","pageHashName","pageInstanceName","backoffTime","autosaveHasReset","editor","registerOption","options","register","processor","get","set"],"mappings":";;;;;;;;MA+BMA,uBAAwB,gCAAoBC,mBAAY,eACxDC,cAAe,gCAAoBD,mBAAY,YAC/CE,kBAAmB,gCAAoBF,mBAAY,gBACnDG,aAAc,gCAAoBH,mBAAY,eAC9CI,kBAAmB,gCAAoBJ,mBAAY,sCAEhCK,eACfC,eAAiBD,OAAOE,QAAQC,SACtCF,eAAeP,sBAAuB,CAClCU,UAAW,mBACA,IAGfH,eAAeL,aAAc,CACzBQ,UAAW,iBACA,KAGfH,eAAeJ,iBAAkB,CAC7BO,UAAW,iBACA,KAEfH,eAAeJ,iBAAkB,CAC7BO,UAAW,iBACA,KAEfH,eAAeH,YAAa,CACxBM,UAAW,iBACA,MAEfH,eAAeF,iBAAkB,CAC7BK,UAAW,mBACA,4BAIWJ,WACrB,8BAAoBA,SAIlBA,OAAOE,QAAQG,IAAIX,gDAEEM,QAAWA,OAAOE,QAAQI,IAAIZ,uBAAuB,wBACzDM,QAAWA,OAAOE,QAAQG,IAAIT,uCAC1BI,QAAWA,OAAOE,QAAQG,IAAIR,0CAC/BG,QAAWA,OAAOE,QAAQG,IAAIP,0CACzBE,QAAWA,OAAOE,QAAQI,IAAIP,kBAAkB,gCAChDC,QAAWA,OAAOE,QAAQG,IAAIN"}