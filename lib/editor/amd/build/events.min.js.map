{"version":3,"file":"events.min.js","sources":["../src/events.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript events for the `core_editor` subsystem.\r\n *\r\n * @module     core_editor/events\r\n * @copyright  2021 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      4.0\r\n */\r\n\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\nimport jQuery from 'jquery';\r\nimport Y from 'core/yui';\r\n\r\n/**\r\n * Events for the `core_editor` subsystem.\r\n *\r\n * @constant\r\n * @property {String} editorContentRestored See {@link event:editorContentRestored}\r\n */\r\nexport const eventTypes = {\r\n    /**\r\n     * An event triggered when an editor restores auto-saved content.\r\n     *\r\n     * @event editorContentRestored\r\n     */\r\n    editorContentRestored: 'core_editor/contentRestored',\r\n};\r\n\r\n/**\r\n * Trigger an event to indicate that editor content was restored.\r\n *\r\n * @method  notifyEditorContentRestored\r\n * @param   {HTMLElement|null} editor The element that was modified\r\n * @returns {CustomEvent}\r\n * @fires   editorContentRestored\r\n */\r\nexport const notifyEditorContentRestored = editor => {\r\n    if (!editor) {\r\n        window.console.warn(\r\n            `The HTMLElement representing the editor that was modified should be provided to notifyEditorContentRestored.`\r\n        );\r\n    }\r\n    return dispatchEvent(\r\n        eventTypes.editorContentRestored,\r\n        {},\r\n        editor || document\r\n    );\r\n};\r\n\r\nlet legacyEventsRegistered = false;\r\nif (!legacyEventsRegistered) {\r\n    // The following event triggers are legacy and will be removed in the future.\r\n    // The following approach provides a backwards-compatability layer for the new events.\r\n    // Code should be updated to make use of native events.\r\n\r\n    Y.use('event', 'moodle-core-event', () => {\r\n        // Provide a backwards-compatability layer for YUI Events.\r\n        document.addEventListener(eventTypes.editorContentRestored, () => {\r\n            // Trigger a legacy AMD event.\r\n            jQuery(document).trigger(M.core.event.EDITOR_CONTENT_RESTORED);\r\n\r\n            // Trigger a legacy YUI event.\r\n            Y.fire(M.core.event.EDITOR_CONTENT_RESTORED);\r\n        });\r\n    });\r\n\r\n    legacyEventsRegistered = true;\r\n}\r\n"],"names":["eventTypes","editorContentRestored","editor","window","console","warn","document","legacyEventsRegistered","use","addEventListener","trigger","M","core","event","EDITOR_CONTENT_RESTORED","fire"],"mappings":";;;;;;;;6MAiCaA,WAAa,CAMtBC,sBAAuB,mGAWgBC,SAClCA,QACDC,OAAOC,QAAQC,sHAIZ,mCACHL,WAAWC,sBACX,GACAC,QAAUI,eAIdC,wBAAyB,EACxBA,sCAKCC,IAAI,QAAS,qBAAqB,KAEhCF,SAASG,iBAAiBT,WAAWC,uBAAuB,yBAEjDK,UAAUI,QAAQC,EAAEC,KAAKC,MAAMC,sCAGpCC,KAAKJ,EAAEC,KAAKC,MAAMC,+BAI5BP,wBAAyB"}