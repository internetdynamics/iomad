{"version":3,"file":"message_drawer_view_settings.min.js","sources":["../src/message_drawer_view_settings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Controls the settings page in the message drawer.\r\n *\r\n * @module     core_message/message_drawer_view_settings\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n[\r\n    'jquery',\r\n    'core/notification',\r\n    'core/str',\r\n    'core/pubsub',\r\n    'core/templates',\r\n    'core_message/message_repository',\r\n    'core/custom_interaction_events',\r\n    'core_message/message_drawer_events'\r\n],\r\nfunction(\r\n    $,\r\n    Notification,\r\n    Str,\r\n    PubSub,\r\n    Templates,\r\n    Repository,\r\n    CustomEvents,\r\n    MessageDrawerEvents\r\n) {\r\n\r\n    var SELECTORS = {\r\n        CHECKBOX: 'input[type=\"checkbox\"]',\r\n        SETTINGS: '[data-region=\"settings\"]',\r\n        PRIVACY_PREFERENCE: '[data-preference=\"blocknoncontacts\"] input[type=\"radio\"]',\r\n        NOTIFICATIONS_PREFERENCE: '[data-preference=\"notifications\"] input[type=\"checkbox\"]',\r\n        ENTER_TO_SEND_PREFERENCE: '[data-preference=\"entertosend\"] input[type=\"checkbox\"]',\r\n        NOTIFICATION_PREFERENCES_CONTAINER: '[data-region=\"notification-preference-container\"]',\r\n        CONTENT_CONTAINER: '[data-region=\"content-container\"]',\r\n        PLACEHOLDER_CONTAINER: '[data-region=\"placeholder-container\"]'\r\n    };\r\n\r\n    var TEMPLATES = {\r\n        NOTIFICATION_PREFERENCES: 'core_message/message_drawer_view_settings_body_content_notification_preferences'\r\n    };\r\n\r\n    var NOTIFICATION_PREFERENCES_KEY = 'message_provider_moodle_instantmessage';\r\n\r\n    /**\r\n     * Select the correct radio button in the DOM for the privacy preference.\r\n     *\r\n     * @param {Object} body The settings body element.\r\n     * @param {Number} value Which radio button should be set\r\n     */\r\n    var setPrivacyPreference = function(body, value) {\r\n        var inputs = body.find(SELECTORS.PRIVACY_PREFERENCE);\r\n        inputs.each(function(index, input) {\r\n            input = $(input);\r\n            if (input.val() == value) {\r\n                input.prop('checked', true);\r\n            } else {\r\n                input.prop('checked', false);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Set the \"enter to send\" checkbox to the correct value in the DOM.\r\n     *\r\n     * @param {Object} body The settings body element.\r\n     * @param {Bool} value Whether enter to send is enabled or disabled.\r\n     */\r\n    var setEnterToSend = function(body, value) {\r\n        var checkbox = body.find(SELECTORS.ENTER_TO_SEND_PREFERENCE);\r\n\r\n        if (value) {\r\n            checkbox.prop('checked', true);\r\n        } else {\r\n            checkbox.prop('checked', false);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Send a request to the server to save the given preferences. Also publish\r\n     * a preferences updated event for the rest of the message drawer to\r\n     * subscribe to.\r\n     *\r\n     * @param {Number} loggedInUserId The logged in user id.\r\n     * @param {Array} preferences The preferences to set.\r\n     * @return {Object} jQuery promise\r\n     */\r\n    var savePreferences = function(loggedInUserId, preferences) {\r\n        return Repository.savePreferences(loggedInUserId, preferences)\r\n            .then(function() {\r\n                PubSub.publish(MessageDrawerEvents.PREFERENCES_UPDATED, preferences);\r\n                return;\r\n            })\r\n            .catch(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Create all of the event listeners for the message preferences page.\r\n     *\r\n     * @method registerEventListeners\r\n     * @param {Object} body The settings body element.\r\n     * @param {Number} loggedInUserId The logged in user id.\r\n     */\r\n    var registerEventListeners = function(body, loggedInUserId) {\r\n        var settingsContainer = body.find(SELECTORS.SETTINGS);\r\n\r\n        CustomEvents.define(settingsContainer, [\r\n            CustomEvents.events.activate\r\n        ]);\r\n\r\n        settingsContainer.on(CustomEvents.events.activate, SELECTORS.NOTIFICATIONS_PREFERENCE, function(e) {\r\n            var container = $(e.target).closest(SELECTORS.NOTIFICATION_PREFERENCES_CONTAINER);\r\n            var checkboxes = container.find(SELECTORS.CHECKBOX);\r\n            if (!checkboxes.length) {\r\n                return;\r\n            }\r\n            // The preference value is all of the enabled processors, comma separated, so let's\r\n            // see which ones are enabled.\r\n            var values = checkboxes.toArray().reduce(function(carry, checkbox) {\r\n                checkbox = $(checkbox);\r\n                if (checkbox.prop('checked')) {\r\n                    carry.push(checkbox.attr('data-name'));\r\n                }\r\n\r\n                return carry;\r\n            }, []);\r\n            var newValue = values.length ? values.join(',') : 'none';\r\n            var preferences = [\r\n                {\r\n                    type: 'message_provider_moodle_instantmessage_enabled',\r\n                    value: newValue\r\n                }\r\n            ];\r\n\r\n            savePreferences(loggedInUserId, preferences);\r\n        });\r\n\r\n        settingsContainer.on('change', SELECTORS.PRIVACY_PREFERENCE, function(e) {\r\n            var newValue = $(e.target).val();\r\n            var preferences = [\r\n                {\r\n                    type: 'message_blocknoncontacts',\r\n                    value: newValue\r\n                }\r\n            ];\r\n\r\n            savePreferences(loggedInUserId, preferences);\r\n        });\r\n\r\n        settingsContainer.on(CustomEvents.events.activate, SELECTORS.ENTER_TO_SEND_PREFERENCE, function(e) {\r\n            var newValue = $(e.target).prop('checked');\r\n            var preferences = [\r\n                {\r\n                    type: 'message_entertosend',\r\n                    value: newValue\r\n                }\r\n            ];\r\n\r\n            savePreferences(loggedInUserId, preferences);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Initialise the module by loading the user's messaging preferences from the server and\r\n     * rendering them in the settings page.\r\n     *\r\n     * Moodle may have many (or no) message processors enabled to notify the user when they\r\n     * receive messages. We need to dynamically build the settings page based on which processors\r\n     * are configured for the user.\r\n     *\r\n     * @param {Object} body The settings body element.\r\n     * @param {Number} loggedInUserId The logged in user id.\r\n     */\r\n    var init = function(body, loggedInUserId) {\r\n        // Load the message preferences from the server.\r\n        Repository.getUserMessagePreferences(loggedInUserId)\r\n            .then(function(response) {\r\n                // Set the values of the stright forward preferences.\r\n                setPrivacyPreference(body, response.blocknoncontacts);\r\n                setEnterToSend(body, response.entertosend);\r\n\r\n                // Parse the list of other preferences into a more usable format.\r\n                var notificationProcessors = [];\r\n                if (response.preferences.components.length) {\r\n                    response.preferences.components.forEach(function(component) {\r\n                        if (component.notifications.length) {\r\n                            // Filter down to just the notification processors that work on instant\r\n                            // messaging. We don't care about another other ones.\r\n                            var notificationPreferences = component.notifications.filter(function(notification) {\r\n                                return notification.preferencekey == NOTIFICATION_PREFERENCES_KEY;\r\n                            });\r\n\r\n                            if (notificationPreferences.length) {\r\n                                // Messaging only has one config at the moment which is for notifications\r\n                                // on personal messages.\r\n                                var configuration = component.notifications[0];\r\n                                notificationProcessors = configuration.processors.map(function(processor) {\r\n                                    // Consider the the processor enabled if either preference is set. This is\r\n                                    // for backwards compatibility. Going forward they will be treated as one\r\n                                    // setting.\r\n                                    var checked = processor.enabled;\r\n                                    return {\r\n                                        displayname: processor.displayname,\r\n                                        name: processor.name,\r\n                                        checked: checked,\r\n                                        // The admin can force processors to be enabled at a site level so\r\n                                        // we need to check if this processor has been locked by the admin.\r\n                                        locked: processor.locked,\r\n                                        lockedmessage: processor.lockedmessage || null,\r\n                                    };\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                var container = body.find(SELECTORS.NOTIFICATION_PREFERENCES_CONTAINER);\r\n                if (notificationProcessors.length) {\r\n                    // We have processors (i.e. email, mobile, jabber) to show.\r\n                    container.removeClass('hidden');\r\n                    // Render the processor options.\r\n                    return Templates.render(TEMPLATES.NOTIFICATION_PREFERENCES, {processors: notificationProcessors})\r\n                        .then(function(html) {\r\n                            container.append(html);\r\n                            return html;\r\n                        });\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n            .then(function() {\r\n                // We're done loading so hide the loading placeholder and show the settings.\r\n                body.find(SELECTORS.CONTENT_CONTAINER).removeClass('hidden');\r\n                body.find(SELECTORS.PLACEHOLDER_CONTAINER).addClass('hidden');\r\n                // Register the event listers for if the user wants to change the preferences.\r\n                registerEventListeners(body, loggedInUserId);\r\n                return;\r\n            })\r\n            .catch(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Initialise the settings page by adding event listeners to\r\n     * the checkboxes.\r\n     *\r\n     * @param {string} namespace The route namespace.\r\n     * @param {Object} header The settings header element.\r\n     * @param {Object} body The settings body element.\r\n     * @param {Object} footer The footer body element.\r\n     * @param {Number} loggedInUserId The logged in user id.\r\n     * @return {Object} jQuery promise\r\n     */\r\n    var show = function(namespace, header, body, footer, loggedInUserId) {\r\n        if (!body.attr('data-init')) {\r\n            init(body, loggedInUserId);\r\n            body.attr('data-init', true);\r\n        }\r\n\r\n        return $.Deferred().resolve().promise();\r\n    };\r\n\r\n    /**\r\n     * String describing this page used for aria-labels.\r\n     *\r\n     * @return {Object} jQuery promise\r\n     */\r\n    var description = function() {\r\n        return Str.get_string('messagedrawerviewsettings', 'core_message');\r\n    };\r\n\r\n    return {\r\n        show: show,\r\n        description: description,\r\n    };\r\n});\r\n"],"names":["define","$","Notification","Str","PubSub","Templates","Repository","CustomEvents","MessageDrawerEvents","SELECTORS","TEMPLATES","savePreferences","loggedInUserId","preferences","then","publish","PREFERENCES_UPDATED","catch","exception","init","body","getUserMessagePreferences","response","value","find","each","index","input","val","prop","setPrivacyPreference","blocknoncontacts","checkbox","setEnterToSend","entertosend","notificationProcessors","components","length","forEach","component","notifications","filter","notification","preferencekey","configuration","processors","map","processor","checked","enabled","displayname","name","locked","lockedmessage","container","removeClass","render","html","append","addClass","settingsContainer","events","activate","on","e","checkboxes","target","closest","values","toArray","reduce","carry","push","attr","newValue","join","type","registerEventListeners","show","namespace","header","footer","Deferred","resolve","promise","description","get_string"],"mappings":"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"}