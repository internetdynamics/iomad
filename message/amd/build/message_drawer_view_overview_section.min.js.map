{"version":3,"file":"message_drawer_view_overview_section.min.js","sources":["../src/message_drawer_view_overview_section.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Controls a section of the overview page in the message drawer.\r\n *\r\n * @module     core_message/message_drawer_view_overview_section\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n[\r\n    'jquery',\r\n    'core/custom_interaction_events',\r\n    'core/notification',\r\n    'core/pubsub',\r\n    'core/str',\r\n    'core/pending',\r\n    'core/templates',\r\n    'core/user_date',\r\n    'core_message/message_repository',\r\n    'core_message/message_drawer_events',\r\n    'core_message/message_drawer_router',\r\n    'core_message/message_drawer_routes',\r\n    'core_message/message_drawer_lazy_load_list',\r\n    'core_message/message_drawer_view_conversation_constants'\r\n],\r\nfunction(\r\n    $,\r\n    CustomEvents,\r\n    Notification,\r\n    PubSub,\r\n    Str,\r\n    Pending,\r\n    Templates,\r\n    UserDate,\r\n    MessageRepository,\r\n    MessageDrawerEvents,\r\n    MessageDrawerRouter,\r\n    MessageDrawerRoutes,\r\n    LazyLoadList,\r\n    MessageDrawerViewConversationContants\r\n) {\r\n\r\n    var SELECTORS = {\r\n        TOGGLE: '[data-region=\"toggle\"]',\r\n        CONVERSATION: '[data-conversation-id]',\r\n        BLOCKED_ICON_CONTAINER: '[data-region=\"contact-icon-blocked\"]',\r\n        LAST_MESSAGE: '[data-region=\"last-message\"]',\r\n        LAST_MESSAGE_DATE: '[data-region=\"last-message-date\"]',\r\n        MUTED_ICON_CONTAINER: '[data-region=\"muted-icon-container\"]',\r\n        UNREAD_COUNT: '[data-region=\"unread-count\"]',\r\n        SECTION_TOTAL_COUNT: '[data-region=\"section-total-count\"]',\r\n        SECTION_TOTAL_COUNT_CONTAINER: '[data-region=\"section-total-count-container\"]',\r\n        SECTION_UNREAD_COUNT: '[data-region=\"section-unread-count\"]',\r\n        PLACEHOLDER_CONTAINER: '[data-region=\"placeholder-container\"]'\r\n    };\r\n\r\n    var TEMPLATES = {\r\n        CONVERSATIONS_LIST: 'core_message/message_drawer_conversations_list',\r\n        CONVERSATIONS_LIST_ITEMS_PLACEHOLDER: 'core_message/message_drawer_conversations_list_items_placeholder'\r\n    };\r\n\r\n    var LOAD_LIMIT = 50;\r\n    var loadedConversationsById = {};\r\n    var deletedConversationsById = {};\r\n    var loadedTotalCounts = false;\r\n    var loadedUnreadCounts = false;\r\n\r\n    /**\r\n     * Get the section visibility status.\r\n     *\r\n     * @param  {Object} root The section container element.\r\n     * @return {Bool} Is section visible.\r\n     */\r\n    var isVisible = function(root) {\r\n        return LazyLoadList.getRoot(root).hasClass('show');\r\n    };\r\n\r\n    /**\r\n     * Set this section as expanded.\r\n     *\r\n     * @param  {Object} root The section container element.\r\n     */\r\n    var setExpanded = function(root) {\r\n        root.addClass('expanded');\r\n    };\r\n\r\n    /**\r\n     * Set this section as collapsed.\r\n     *\r\n     * @param  {Object} root The section container element.\r\n     */\r\n    var setCollapsed = function(root) {\r\n        root.removeClass('expanded');\r\n    };\r\n\r\n    /**\r\n     * Render the total count value and show it for the user. Also update the placeholder\r\n     * HTML for better visuals.\r\n     *\r\n     * @param {Object} root The section container element.\r\n     * @param {Number} count The total count\r\n     */\r\n    var renderTotalCount = function(root, count) {\r\n        var container = root.find(SELECTORS.SECTION_TOTAL_COUNT_CONTAINER);\r\n        var countElement = container.find(SELECTORS.SECTION_TOTAL_COUNT);\r\n        countElement.text(count);\r\n        container.removeClass('hidden');\r\n        Str.get_string('totalconversations', 'core_message', count).done(function(string) {\r\n            container.attr('aria-label', string);\r\n        });\r\n\r\n        var numPlaceholders = count > 20 ? 20 : count;\r\n        // Array of \"true\" up to the number of placeholders we want.\r\n        var placeholders = Array.apply(null, Array(numPlaceholders)).map(function() {\r\n            return true;\r\n        });\r\n\r\n        // Replace the current placeholder (loading spinner) with some nicer placeholders that\r\n        // better represent the content.\r\n        Templates.render(TEMPLATES.CONVERSATIONS_LIST_ITEMS_PLACEHOLDER, {placeholders: placeholders})\r\n            .then(function(html) {\r\n                var placeholderContainer = root.find(SELECTORS.PLACEHOLDER_CONTAINER);\r\n                placeholderContainer.html(html);\r\n                return;\r\n            })\r\n            .catch(function() {\r\n                // Silently ignore. Doesn't matter if we can't render the placeholders.\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Render the unread count value and show it for the user if it's higher than zero.\r\n     *\r\n     * @param {Object} root The section container element.\r\n     * @param {Number} count The unread count\r\n     */\r\n    var renderUnreadCount = function(root, count) {\r\n        var countElement = root.find(SELECTORS.SECTION_UNREAD_COUNT);\r\n        countElement.text(count);\r\n\r\n        Str.get_string('unreadconversations', 'core_message', count).done(function(string) {\r\n            countElement.attr('aria-label', string);\r\n        });\r\n\r\n        if (count > 0) {\r\n            countElement.removeClass('hidden');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create a formatted conversation object from the the one we get from events. The new object\r\n     * will be in a format that matches what we receive from the server.\r\n     *\r\n     * @param {Object} conversation\r\n     * @return {Object} formatted conversation.\r\n     */\r\n    var formatConversationFromEvent = function(conversation) {\r\n        // Recursively lowercase all of the keys for an object.\r\n        var recursivelyLowercaseKeys = function(object) {\r\n            return Object.keys(object).reduce(function(carry, key) {\r\n                if ($.isArray(object[key])) {\r\n                    carry[key.toLowerCase()] = object[key].map(recursivelyLowercaseKeys);\r\n                } else {\r\n                    carry[key.toLowerCase()] = object[key];\r\n                }\r\n\r\n                return carry;\r\n            }, {});\r\n        };\r\n\r\n        // Recursively lowercase all of the keys for the conversation.\r\n        var formatted = recursivelyLowercaseKeys(conversation);\r\n\r\n        // Make sure all messages have the useridfrom property set.\r\n        formatted.messages = formatted.messages.map(function(message) {\r\n            message.useridfrom = message.userfrom.id;\r\n            return message;\r\n        });\r\n\r\n        return formatted;\r\n    };\r\n\r\n    /**\r\n     * Render the messages in the overview page.\r\n     *\r\n     * @param {Array} conversations List of conversations to render.\r\n     * @param {Number} userId Logged in user id.\r\n     * @return {Object} jQuery promise.\r\n     */\r\n    var render = function(conversations, userId) {\r\n\r\n        // Helper to format the last message for rendering.\r\n        // Returns a promise which resolves to either a string, or null\r\n        // (such as in the event of an empty personal space).\r\n        var pending = new Pending();\r\n\r\n        var formatMessagePreview = async function(lastMessage) {\r\n            if (!lastMessage) {\r\n                return null;\r\n            }\r\n            // Check the message html for a src attribute, indicative of media.\r\n            // Replace <img with <noimg to stop browsers pre-fetching the image as part of tmp element creation.\r\n            var tmpElement = document.createElement(\"element\");\r\n            tmpElement.innerHTML = lastMessage.text.replace(/<img /g, '<noimg ');\r\n            var isMedia = tmpElement.querySelector(\"[src]\") || false;\r\n\r\n            if (!isMedia) {\r\n                // Try to get the text value of the content.\r\n                // If that's not possible, we'll report it under the catch-all 'other media'.\r\n                var messagePreview = $(lastMessage.text).text();\r\n                if (messagePreview) {\r\n                    // The text value of the message must have no html/script tags.\r\n                    if (messagePreview.indexOf('<') == -1) {\r\n                        return messagePreview;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // As a fallback, report unknowns as 'other media' type content.\r\n            var pix = 'i/messagecontentmultimediageneral';\r\n            var label = 'messagecontentmultimediageneral';\r\n\r\n            if (lastMessage.text.includes('<img')) {\r\n                pix = 'i/messagecontentimage';\r\n                label = 'messagecontentimage';\r\n            } else if (lastMessage.text.includes('<video')) {\r\n                pix = 'i/messagecontentvideo';\r\n                label = 'messagecontentvideo';\r\n            } else if (lastMessage.text.includes('<audio')) {\r\n                pix = 'i/messagecontentaudio';\r\n                label = 'messagecontentaudio';\r\n            }\r\n\r\n            try {\r\n                var labelString = await Str.get_string(label, 'core_message');\r\n                var icon = await Templates.renderPix(pix, 'core', labelString);\r\n                return icon + ' ' + labelString;\r\n            } catch (error) {\r\n                Notification.exception(error);\r\n                return null;\r\n            }\r\n        };\r\n\r\n        var mapPromises = conversations.map(function(conversation) {\r\n\r\n            var lastMessage = conversation.messages.length ? conversation.messages[conversation.messages.length - 1] : null;\r\n\r\n            return formatMessagePreview(lastMessage)\r\n                .then(function(messagePreview) {\r\n                    var formattedConversation = {\r\n                        id: conversation.id,\r\n                        imageurl: conversation.imageurl,\r\n                        name: conversation.name,\r\n                        subname: conversation.subname,\r\n                        unreadcount: conversation.unreadcount,\r\n                        ismuted: conversation.ismuted,\r\n                        lastmessagedate: lastMessage ? lastMessage.timecreated : null,\r\n                        sentfromcurrentuser: lastMessage ? lastMessage.useridfrom == userId : null,\r\n                        lastmessage: messagePreview\r\n                    };\r\n\r\n                    var otherUser = null;\r\n                    if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.SELF) {\r\n                        // Self-conversations have only one member.\r\n                        otherUser = conversation.members[0];\r\n                    } else if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PRIVATE) {\r\n                        // For private conversations, remove the current userId from the members to get the other user.\r\n                        otherUser = conversation.members.reduce(function(carry, member) {\r\n                            if (!carry && member.id != userId) {\r\n                                carry = member;\r\n                            }\r\n                            return carry;\r\n                        }, null);\r\n                    }\r\n\r\n                    if (otherUser !== null) {\r\n                        formattedConversation.userid = otherUser.id;\r\n                        formattedConversation.showonlinestatus = otherUser.showonlinestatus;\r\n                        formattedConversation.isonline = otherUser.isonline;\r\n                        formattedConversation.isblocked = otherUser.isblocked;\r\n                    }\r\n\r\n                    if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PUBLIC) {\r\n                        formattedConversation.lastsendername = conversation.members.reduce(function(carry, member) {\r\n                            if (!carry && lastMessage && member.id == lastMessage.useridfrom) {\r\n                                carry = member.fullname;\r\n                            }\r\n                            return carry;\r\n                        }, null);\r\n                    }\r\n\r\n                    return formattedConversation;\r\n                }).catch(Notification.exception);\r\n        });\r\n\r\n        return Promise.all(mapPromises)\r\n            .then(function(formattedConversations) {\r\n                formattedConversations.forEach(function(conversation) {\r\n                    if (new Date().toDateString() == new Date(conversation.lastmessagedate * 1000).toDateString()) {\r\n                        conversation.istoday = true;\r\n                    }\r\n                });\r\n\r\n                return Templates.render(TEMPLATES.CONVERSATIONS_LIST, {conversations: formattedConversations});\r\n            }).then(function(html, js) {\r\n                pending.resolve();\r\n                return $.Deferred().resolve(html, js);\r\n            }).catch(function(error) {\r\n                pending.resolve();\r\n                Notification.exception(error);\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Build the callback to load conversations.\r\n     *\r\n     * @param  {Array|null} types The conversation types for this section.\r\n     * @param  {bool} includeFavourites Include/exclude favourites.\r\n     * @param  {Number} offset Result offset\r\n     * @return {Function}\r\n     */\r\n    var getLoadCallback = function(types, includeFavourites, offset) {\r\n        // Note: This function is a bit messy because we've added the concept of loading\r\n        // multiple conversations types (e.g. private + self) at once but haven't properly\r\n        // updated the web service to accept an array of types. Instead we've added a new\r\n        // parameter for the self type which means we can only ever load self + other type.\r\n        // This should be improved to make it more extensible in the future. Adding new params\r\n        // for each type isn't very scalable.\r\n        var type = null;\r\n        // Include self conversations in the results by default.\r\n        var includeSelfConversations = true;\r\n        if (types && types.length) {\r\n            // Just get the conversation types that aren't \"self\" for now.\r\n            var nonSelfConversationTypes = types.filter(function(candidate) {\r\n                return candidate != MessageDrawerViewConversationContants.CONVERSATION_TYPES.SELF;\r\n            });\r\n            // If we're specifically asking for a list of types that doesn't include the self\r\n            // conversations then we don't need to include them.\r\n            includeSelfConversations = types.length != nonSelfConversationTypes.length;\r\n            // As mentioned above the webservice is currently limited to loading one type at a\r\n            // time (plus self conversations) so let's hope we never change this.\r\n            type = nonSelfConversationTypes[0];\r\n        }\r\n\r\n        return function(root, userId) {\r\n            return MessageRepository.getConversations(\r\n                    userId,\r\n                    type,\r\n                    LOAD_LIMIT + 1,\r\n                    offset,\r\n                    includeFavourites,\r\n                    includeSelfConversations\r\n                )\r\n                .then(function(response) {\r\n                    var conversations = response.conversations;\r\n\r\n                    if (conversations.length > LOAD_LIMIT) {\r\n                        conversations = conversations.slice(0, -1);\r\n                    } else {\r\n                        LazyLoadList.setLoadedAll(root, true);\r\n                    }\r\n\r\n                    offset = offset + LOAD_LIMIT;\r\n\r\n                    conversations.forEach(function(conversation) {\r\n                        loadedConversationsById[conversation.id] = conversation;\r\n                    });\r\n\r\n                    return conversations;\r\n                })\r\n                .catch(Notification.exception);\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Get the total count container element.\r\n     *\r\n     * @param  {Object} root Overview messages container element.\r\n     * @return {Object} Total count container element.\r\n     */\r\n    var getTotalConversationCountElement = function(root) {\r\n        return root.find(SELECTORS.SECTION_TOTAL_COUNT);\r\n    };\r\n\r\n    /**\r\n     * Get the unread conversations count container element.\r\n     *\r\n     * @param  {Object} root Overview messages container element.\r\n     * @return {Object} Unread conversations count container element.\r\n     */\r\n    var getTotalUnreadConversationCountElement = function(root) {\r\n        return root.find(SELECTORS.SECTION_UNREAD_COUNT);\r\n    };\r\n\r\n    /**\r\n     * Increment the total conversations count.\r\n     *\r\n     * @param  {Object} root Overview messages container element.\r\n     */\r\n    var incrementTotalConversationCount = function(root) {\r\n        if (loadedTotalCounts) {\r\n            var element = getTotalConversationCountElement(root);\r\n            var count = parseInt(element.text());\r\n            count = count + 1;\r\n            element.text(count);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Decrement the total conversations count.\r\n     *\r\n     * @param  {Object} root Overview messages container element.\r\n     */\r\n    var decrementTotalConversationCount = function(root) {\r\n        if (loadedTotalCounts) {\r\n            var element = getTotalConversationCountElement(root);\r\n            var count = parseInt(element.text());\r\n            count = count - 1;\r\n            element.text(count);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Decrement the total unread conversations count.\r\n     *\r\n     * @param  {Object} root Overview messages container element.\r\n     */\r\n    var decrementTotalUnreadConversationCount = function(root) {\r\n        if (loadedUnreadCounts) {\r\n            var element = getTotalUnreadConversationCountElement(root);\r\n            var count = parseInt(element.text());\r\n            count = count - 1;\r\n            element.text(count);\r\n\r\n            if (count < 1) {\r\n                element.addClass('hidden');\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get a contact / conversation element.\r\n     *\r\n     * @param  {Object} root Overview messages container element.\r\n     * @param  {Number} conversationId The conversation id.\r\n     * @return {Object} Conversation element.\r\n     */\r\n    var getConversationElement = function(root, conversationId) {\r\n        return root.find('[data-conversation-id=\"' + conversationId + '\"]');\r\n    };\r\n\r\n    /**\r\n     * Get a contact / conversation element from a user id.\r\n     *\r\n     * @param  {Object} root Overview messages container element.\r\n     * @param  {Number} userId The user id.\r\n     * @return {Object} Conversation element.\r\n     */\r\n    var getConversationElementFromUserId = function(root, userId) {\r\n        return root.find('[data-user-id=\"' + userId + '\"]');\r\n    };\r\n\r\n    /**\r\n     * Show the conversation is muted icon.\r\n     *\r\n     * @param  {Object} conversationElement The conversation element.\r\n     */\r\n    var muteConversation = function(conversationElement) {\r\n        conversationElement.find(SELECTORS.MUTED_ICON_CONTAINER).removeClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Hide the conversation is muted icon.\r\n     *\r\n     * @param  {Object} conversationElement The conversation element.\r\n     */\r\n    var unmuteConversation = function(conversationElement) {\r\n        conversationElement.find(SELECTORS.MUTED_ICON_CONTAINER).addClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Show the contact is blocked icon.\r\n     *\r\n     * @param  {Object} conversationElement The conversation element.\r\n     */\r\n    var blockContact = function(conversationElement) {\r\n        conversationElement.find(SELECTORS.BLOCKED_ICON_CONTAINER).removeClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Hide the contact is blocked icon.\r\n     *\r\n     * @param  {Object} conversationElement The conversation element.\r\n     */\r\n    var unblockContact = function(conversationElement) {\r\n        conversationElement.find(SELECTORS.BLOCKED_ICON_CONTAINER).addClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Create an render new conversation element in the list of conversations.\r\n     *\r\n     * @param  {Object} root Overview messages container element.\r\n     * @param  {Object} conversation The conversation.\r\n     * @param  {Number} userId The logged in user id.\r\n     * @return {Object} jQuery promise\r\n     */\r\n    var createNewConversationFromEvent = function(root, conversation, userId) {\r\n        var existingConversations = root.find(SELECTORS.CONVERSATION);\r\n\r\n        if (!existingConversations.length) {\r\n            // If we didn't have any conversations then we need to show\r\n            // the content of the list and hide the empty message.\r\n            var listRoot = LazyLoadList.getRoot(root);\r\n            LazyLoadList.showContent(listRoot);\r\n            LazyLoadList.hideEmptyMessage(listRoot);\r\n        }\r\n\r\n        // Cache the conversation.\r\n        loadedConversationsById[conversation.id] = conversation;\r\n\r\n        return render([conversation], userId)\r\n            .then(function(html) {\r\n                var contentContainer = LazyLoadList.getContentContainer(root);\r\n                return contentContainer.prepend(html);\r\n            })\r\n            .then(function() {\r\n                return incrementTotalConversationCount(root);\r\n            })\r\n            .catch(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Delete a conversation from the list of conversations.\r\n     *\r\n     * @param  {Object} root Overview messages container element.\r\n     * @param  {Object} conversationElement The conversation element.\r\n     */\r\n    var deleteConversation = function(root, conversationElement) {\r\n        conversationElement.remove();\r\n        decrementTotalConversationCount(root);\r\n\r\n        var conversations = root.find(SELECTORS.CONVERSATION);\r\n        if (!conversations.length) {\r\n            // If we don't have any conversations then we need to hide\r\n            // the content of the list and show the empty message.\r\n            var listRoot = LazyLoadList.getRoot(root);\r\n            LazyLoadList.hideContent(listRoot);\r\n            LazyLoadList.showEmptyMessage(listRoot);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Mark a conversation as read.\r\n     *\r\n     * @param  {Object} root Overview messages container element.\r\n     * @param  {Object} conversationElement The conversation element.\r\n     */\r\n    var markConversationAsRead = function(root, conversationElement) {\r\n        var unreadCount = conversationElement.find(SELECTORS.UNREAD_COUNT);\r\n        unreadCount.text('0');\r\n        unreadCount.addClass('hidden');\r\n        decrementTotalUnreadConversationCount(root);\r\n    };\r\n\r\n    /**\r\n     * Listen to, and handle events in this section.\r\n     *\r\n     * @param {String} namespace Unique identifier for the Routes\r\n     * @param {Object} root The section container element.\r\n     * @param {Function} loadCallback The callback to load items.\r\n     * @param {Array|null} types The conversation types for this section\r\n     * @param {bool} includeFavourites If this section includes favourites\r\n     * @param {String} fromPanel Routing argument to send if the section is loaded in message index left panel.\r\n     */\r\n    var registerEventListeners = function(namespace, root, loadCallback, types, includeFavourites, fromPanel) {\r\n        var listRoot = LazyLoadList.getRoot(root);\r\n        var conversationBelongsToThisSection = function(conversation) {\r\n            // Make sure the type is an int so that the index of check matches correctly.\r\n            var conversationType = parseInt(conversation.type, 10);\r\n            if (\r\n                // If the conversation type isn't one this section cares about then we can ignore it.\r\n                (types && types.indexOf(conversationType) < 0) ||\r\n                // If this is the favourites section and the conversation isn't a favourite then ignore it.\r\n                (includeFavourites && !conversation.isFavourite) ||\r\n                // If this section doesn't include favourites and the conversation is a favourite then ignore it.\r\n                (!includeFavourites && conversation.isFavourite)\r\n            ) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        // Set the minimum height of the section to the height of the toggle. This\r\n        // smooths out the collapse animation.\r\n        var toggle = root.find(SELECTORS.TOGGLE);\r\n        root.css('min-height', toggle.outerHeight());\r\n\r\n        root.on('show.bs.collapse', function() {\r\n            setExpanded(root);\r\n            LazyLoadList.show(listRoot, loadCallback, function(contentContainer, conversations, userId) {\r\n                return render(conversations, userId)\r\n                    .then(function(html) {\r\n                        contentContainer.append(html);\r\n                        return html;\r\n                    })\r\n                    .catch(Notification.exception);\r\n            });\r\n        });\r\n\r\n        root.on('hidden.bs.collapse', function() {\r\n            setCollapsed(root);\r\n        });\r\n\r\n        PubSub.subscribe(MessageDrawerEvents.CONTACT_BLOCKED, function(userId) {\r\n            var conversationElement = getConversationElementFromUserId(root, userId);\r\n            if (conversationElement.length) {\r\n                blockContact(conversationElement);\r\n            }\r\n        });\r\n\r\n        PubSub.subscribe(MessageDrawerEvents.CONTACT_UNBLOCKED, function(userId) {\r\n            var conversationElement = getConversationElementFromUserId(root, userId);\r\n\r\n            if (conversationElement.length) {\r\n                unblockContact(conversationElement);\r\n            }\r\n        });\r\n\r\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_SET_MUTED, function(conversation) {\r\n            var conversationId = conversation.id;\r\n            var conversationElement = getConversationElement(root, conversationId);\r\n            if (conversationElement.length) {\r\n                muteConversation(conversationElement);\r\n            }\r\n        });\r\n\r\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_UNSET_MUTED, function(conversation) {\r\n            var conversationId = conversation.id;\r\n            var conversationElement = getConversationElement(root, conversationId);\r\n            if (conversationElement.length) {\r\n                unmuteConversation(conversationElement);\r\n            }\r\n        });\r\n\r\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, function(conversation) {\r\n            if (!conversationBelongsToThisSection(conversation)) {\r\n                return;\r\n            }\r\n\r\n            var pendingPromise = new Pending('core_message/message_drawer_view_overview_section:new');\r\n            var loggedInUserId = conversation.loggedInUserId;\r\n            var conversationId = conversation.id;\r\n            var element = getConversationElement(root, conversationId);\r\n            conversation = formatConversationFromEvent(conversation);\r\n            if (element.length) {\r\n                var contentContainer = LazyLoadList.getContentContainer(root);\r\n                render([conversation], loggedInUserId)\r\n                    .then(function(html) {\r\n                        if (deletedConversationsById[conversationId]) {\r\n                            // This conversation was deleted at some point since the messaging drawer was created.\r\n                            if (conversation.messages[0].timeadded < deletedConversationsById[conversationId]) {\r\n                                // The 'new' message was added before the conversation was deleted.\r\n                                // This is probably stale data.\r\n                                return;\r\n                            }\r\n                        }\r\n                        contentContainer.prepend(html);\r\n                        element.remove();\r\n\r\n                        return;\r\n                    })\r\n                    .then(pendingPromise.resolve)\r\n                    .catch(Notification.exception);\r\n            } else if (conversation.messages.length) {\r\n                createNewConversationFromEvent(root, conversation, loggedInUserId)\r\n                .then(pendingPromise.resolve)\r\n                .catch();\r\n            } else {\r\n                pendingPromise.resolve();\r\n            }\r\n        });\r\n\r\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_DELETED, function(conversationId) {\r\n            var conversationElement = getConversationElement(root, conversationId);\r\n            delete loadedConversationsById[conversationId];\r\n            deletedConversationsById[conversationId] = new Date();\r\n            if (conversationElement.length) {\r\n                deleteConversation(root, conversationElement);\r\n            }\r\n        });\r\n\r\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_READ, function(conversationId) {\r\n            var conversationElement = getConversationElement(root, conversationId);\r\n            if (conversationElement.length) {\r\n                markConversationAsRead(root, conversationElement);\r\n            }\r\n        });\r\n\r\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_SET_FAVOURITE, function(conversation) {\r\n            var conversationElement = null;\r\n            if (conversationBelongsToThisSection(conversation)) {\r\n                conversationElement = getConversationElement(root, conversation.id);\r\n                if (!conversationElement.length) {\r\n                    createNewConversationFromEvent(\r\n                        root,\r\n                        formatConversationFromEvent(conversation),\r\n                        conversation.loggedInUserId\r\n                    );\r\n                }\r\n            } else {\r\n                conversationElement = getConversationElement(root, conversation.id);\r\n                if (conversationElement.length) {\r\n                    deleteConversation(root, conversationElement);\r\n                }\r\n            }\r\n        });\r\n\r\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_UNSET_FAVOURITE, function(conversation) {\r\n            var conversationElement = null;\r\n            if (conversationBelongsToThisSection(conversation)) {\r\n                conversationElement = getConversationElement(root, conversation.id);\r\n                if (!conversationElement.length) {\r\n                    createNewConversationFromEvent(\r\n                        root,\r\n                        formatConversationFromEvent(conversation),\r\n                        conversation.loggedInUserId\r\n                    );\r\n                }\r\n            } else {\r\n                conversationElement = getConversationElement(root, conversation.id);\r\n                if (conversationElement.length) {\r\n                    deleteConversation(root, conversationElement);\r\n                }\r\n            }\r\n        });\r\n\r\n        CustomEvents.define(root, [CustomEvents.events.activate]);\r\n        root.on(CustomEvents.events.activate, SELECTORS.CONVERSATION, function(e, data) {\r\n            var conversationElement = $(e.target).closest(SELECTORS.CONVERSATION);\r\n            var conversationId = conversationElement.attr('data-conversation-id');\r\n            var conversation = loadedConversationsById[conversationId];\r\n            MessageDrawerRouter.go(namespace, MessageDrawerRoutes.VIEW_CONVERSATION, conversation, fromPanel);\r\n\r\n            data.originalEvent.preventDefault();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Setup the section.\r\n     *\r\n     * @param {String} namespace Unique identifier for the Routes\r\n     * @param {Object} header The header container element.\r\n     * @param {Object} body The section container element.\r\n     * @param {Object} footer The footer container element.\r\n     * @param {Array} types The conversation types that show in this section\r\n     * @param {bool} includeFavourites If this section includes favourites\r\n     * @param {Object} totalCountPromise Resolves wth the total conversations count\r\n     * @param {Object} unreadCountPromise Resolves wth the unread conversations count\r\n     * @param {bool} fromPanel shown in message app panel.\r\n     */\r\n    var show = function(namespace, header, body, footer, types, includeFavourites, totalCountPromise, unreadCountPromise,\r\n        fromPanel) {\r\n        var root = $(body);\r\n\r\n        if (!root.attr('data-init')) {\r\n            var loadCallback = getLoadCallback(types, includeFavourites, 0);\r\n            registerEventListeners(namespace, root, loadCallback, types, includeFavourites, fromPanel);\r\n\r\n            if (isVisible(root)) {\r\n                setExpanded(root);\r\n                var listRoot = LazyLoadList.getRoot(root);\r\n                LazyLoadList.show(listRoot, loadCallback, function(contentContainer, conversations, userId) {\r\n                    return render(conversations, userId)\r\n                        .then(function(html) {\r\n                            contentContainer.append(html);\r\n                            return html;\r\n                        })\r\n                        .catch(Notification.exception);\r\n                });\r\n            }\r\n\r\n            // This is given to us by the calling code because the total counts for all sections\r\n            // are loaded in a single ajax request rather than one request per section.\r\n            totalCountPromise.then(function(count) {\r\n                renderTotalCount(root, count);\r\n                loadedTotalCounts = true;\r\n                return;\r\n            })\r\n            .catch(function() {\r\n                // Silently ignore if we can't updated the counts. No need to bother the user.\r\n            });\r\n\r\n            // This is given to us by the calling code because the unread counts for all sections\r\n            // are loaded in a single ajax request rather than one request per section.\r\n            unreadCountPromise.then(function(count) {\r\n                renderUnreadCount(root, count);\r\n                loadedUnreadCounts = true;\r\n                return;\r\n            })\r\n            .catch(function() {\r\n                // Silently ignore if we can't updated the counts. No need to bother the user.\r\n            });\r\n\r\n            root.attr('data-init', true);\r\n        }\r\n    };\r\n\r\n    return {\r\n        show: show,\r\n        isVisible: isVisible\r\n    };\r\n});\r\n"],"names":["define","$","CustomEvents","Notification","PubSub","Str","Pending","Templates","UserDate","MessageRepository","MessageDrawerEvents","MessageDrawerRouter","MessageDrawerRoutes","LazyLoadList","MessageDrawerViewConversationContants","SELECTORS","TEMPLATES","loadedConversationsById","deletedConversationsById","loadedTotalCounts","loadedUnreadCounts","isVisible","root","getRoot","hasClass","setExpanded","addClass","formatConversationFromEvent","conversation","recursivelyLowercaseKeys","object","Object","keys","reduce","carry","key","isArray","toLowerCase","map","formatted","messages","message","useridfrom","userfrom","id","render","conversations","userId","pending","mapPromises","lastMessage","length","async","tmpElement","document","createElement","innerHTML","text","replace","querySelector","messagePreview","indexOf","pix","label","includes","labelString","get_string","renderPix","error","exception","formatMessagePreview","then","formattedConversation","imageurl","name","subname","unreadcount","ismuted","lastmessagedate","timecreated","sentfromcurrentuser","lastmessage","otherUser","type","CONVERSATION_TYPES","SELF","members","PRIVATE","member","userid","showonlinestatus","isonline","isblocked","PUBLIC","lastsendername","fullname","catch","Promise","all","formattedConversations","forEach","Date","toDateString","istoday","html","js","resolve","Deferred","getTotalConversationCountElement","find","decrementTotalUnreadConversationCount","element","getTotalUnreadConversationCountElement","count","parseInt","getConversationElement","conversationId","getConversationElementFromUserId","createNewConversationFromEvent","listRoot","showContent","hideEmptyMessage","getContentContainer","prepend","incrementTotalConversationCount","deleteConversation","conversationElement","remove","decrementTotalConversationCount","hideContent","showEmptyMessage","registerEventListeners","namespace","loadCallback","types","includeFavourites","fromPanel","conversationBelongsToThisSection","conversationType","isFavourite","toggle","css","outerHeight","on","show","contentContainer","append","removeClass","setCollapsed","subscribe","CONTACT_BLOCKED","blockContact","CONTACT_UNBLOCKED","unblockContact","CONVERSATION_SET_MUTED","muteConversation","CONVERSATION_UNSET_MUTED","unmuteConversation","CONVERSATION_NEW_LAST_MESSAGE","pendingPromise","loggedInUserId","timeadded","CONVERSATION_DELETED","CONVERSATION_READ","unreadCount","markConversationAsRead","CONVERSATION_SET_FAVOURITE","CONVERSATION_UNSET_FAVOURITE","events","activate","e","data","target","closest","attr","go","VIEW_CONVERSATION","originalEvent","preventDefault","header","body","footer","totalCountPromise","unreadCountPromise","offset","includeSelfConversations","nonSelfConversationTypes","filter","candidate","getConversations","LOAD_LIMIT","response","slice","setLoadedAll","getLoadCallback","container","done","string","numPlaceholders","placeholders","Array","apply","renderTotalCount","countElement","renderUnreadCount"],"mappings":"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"}