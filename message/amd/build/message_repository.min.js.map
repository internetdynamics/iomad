{"version":3,"file":"message_repository.min.js","sources":["../src/message_repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Retrieves messages from the server.\r\n *\r\n * @module     core_message/message_repository\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n[\r\n    'jquery',\r\n    'core/ajax',\r\n    'core/notification',\r\n    'core_message/message_drawer_view_conversation_constants'\r\n], function(\r\n    $,\r\n    Ajax,\r\n    Notification,\r\n    Constants) {\r\n\r\n    var CONVERSATION_TYPES = Constants.CONVERSATION_TYPES;\r\n\r\n    /**\r\n     * Count the number of unread conversations (one or more messages from a user)\r\n     * for a given user.\r\n     *\r\n     * @param {object} args The request arguments:\r\n     * @return {object} jQuery promise\r\n     */\r\n    var countUnreadConversations = function(args) {\r\n        var request = {\r\n            methodname: 'core_message_get_unread_conversations_count',\r\n            args: args\r\n        };\r\n\r\n        var promise = Ajax.call([request])[0];\r\n\r\n        promise.fail(Notification.exception);\r\n\r\n        return promise;\r\n    };\r\n\r\n    /**\r\n     * Get contacts for given user.\r\n     *\r\n     * @param {int} userId The user id\r\n     * @param {int} limit Limit for results\r\n     * @param {int} offset Offset for results\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getContacts = function(userId, limit, offset) {\r\n        var args = {\r\n            userid: userId\r\n        };\r\n\r\n        if (typeof limit !== 'undefined') {\r\n            args.limitnum = limit;\r\n        }\r\n\r\n        if (typeof offset !== 'undefined') {\r\n            args.limitfrom = offset;\r\n        }\r\n\r\n        var request = {\r\n            methodname: 'core_message_get_user_contacts',\r\n            args: args\r\n        };\r\n\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Block a user.\r\n     *\r\n     * @param {int} userId The requesting user\r\n     * @param {int} blockedUserId Id of user to block\r\n     * @return {object} jQuery promise\r\n     */\r\n    var blockUser = function(userId, blockedUserId) {\r\n        var requests = [\r\n            {\r\n                methodname: 'core_message_block_user',\r\n                args: {\r\n                    userid: userId,\r\n                    blockeduserid: blockedUserId\r\n                }\r\n            },\r\n            {\r\n                methodname: 'core_message_get_member_info',\r\n                args: {\r\n                    referenceuserid: userId,\r\n                    userids: [blockedUserId],\r\n                    includecontactrequests: true,\r\n                    includeprivacyinfo: true\r\n                }\r\n            }\r\n        ];\r\n\r\n        // Wrap both requests in a single promise so that we can catch an error\r\n        // from either request.\r\n        return $.when.apply(null, Ajax.call(requests)).then(function(reponse1, profiles) {\r\n            // Only return the profile.\r\n            return profiles.length ? profiles[0] : {};\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Unblock a user.\r\n     *\r\n     * @param {int} userId The requesting user\r\n     * @param {int} unblockedUserId Id of user to unblock\r\n     * @return {object} jQuery promise\r\n     */\r\n    var unblockUser = function(userId, unblockedUserId) {\r\n        var requests = [\r\n            {\r\n                methodname: 'core_message_unblock_user',\r\n                args: {\r\n                    userid: userId,\r\n                    unblockeduserid: unblockedUserId\r\n                }\r\n            },\r\n            {\r\n                methodname: 'core_message_get_member_info',\r\n                args: {\r\n                    referenceuserid: userId,\r\n                    userids: [unblockedUserId],\r\n                    includecontactrequests: true,\r\n                    includeprivacyinfo: true\r\n                }\r\n            }\r\n        ];\r\n\r\n        // Wrap both requests in a single promise so that we can catch an error\r\n        // from either request.\r\n        return $.when.apply(null, Ajax.call(requests)).then(function(reponse1, profiles) {\r\n            // Only return the profile.\r\n            return profiles.length ? profiles[0] : {};\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create a request to add a user as a contact.\r\n     *\r\n     * @param {int} userId The requesting user\r\n     * @param {int[]} requestUserIds List of user ids to add\r\n     * @return {object} jQuery promise\r\n     */\r\n    var createContactRequest = function(userId, requestUserIds) {\r\n        var request = {\r\n            methodname: 'core_message_create_contact_request',\r\n            args: {\r\n                userid: userId,\r\n                requesteduserid: requestUserIds\r\n            }\r\n        };\r\n\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Remove a list of users as contacts.\r\n     *\r\n     * @param {int} userId The requesting user\r\n     * @param {int[]} contactUserIds List of user ids to add\r\n     * @return {object} jQuery promise\r\n     */\r\n    var deleteContacts = function(userId, contactUserIds) {\r\n        var requests = [\r\n            {\r\n                methodname: 'core_message_delete_contacts',\r\n                args: {\r\n                    userid: userId,\r\n                    userids: contactUserIds\r\n                }\r\n            },\r\n            {\r\n                methodname: 'core_message_get_member_info',\r\n                args: {\r\n                    referenceuserid: userId,\r\n                    userids: contactUserIds,\r\n                    includecontactrequests: true,\r\n                    includeprivacyinfo: true\r\n                }\r\n            }\r\n        ];\r\n\r\n        return $.when.apply(null, Ajax.call(requests)).then(function(response1, profiles) {\r\n            // Return all of the profiles as an array.\r\n            return profiles;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get messages between two users.\r\n     *\r\n     * @param {int} currentUserId The requesting user\r\n     * @param {int} conversationId Other user in the conversation\r\n     * @param {int} limit Limit for results\r\n     * @param {int} offset Offset for results\r\n     * @param {bool} newestFirst Order results by newest first\r\n     * @param {int} timeFrom Only return messages after this timestamp\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getMessages = function(currentUserId, conversationId, limit, offset, newestFirst, timeFrom) {\r\n        var args = {\r\n            currentuserid: currentUserId,\r\n            convid: conversationId,\r\n            newest: newestFirst ? true : false\r\n        };\r\n\r\n        if (typeof limit !== 'undefined') {\r\n            args.limitnum = limit;\r\n        }\r\n\r\n        if (typeof offset !== 'undefined') {\r\n            args.limitfrom = offset;\r\n        }\r\n\r\n        if (typeof timeFrom !== 'undefined') {\r\n            args.timefrom = timeFrom;\r\n        }\r\n\r\n        var request = {\r\n            methodname: 'core_message_get_conversation_messages',\r\n            args: args\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Search for users.\r\n     *\r\n     * @param {int} userId The requesting user\r\n     * @param {string} searchString Search string\r\n     * @param {int} limit Limit for results\r\n     * @param {int} offset Offset for results\r\n     * @return {object} jQuery promise\r\n     */\r\n    var searchUsers = function(userId, searchString, limit, offset) {\r\n        var args = {\r\n            userid: userId,\r\n            search: searchString\r\n        };\r\n\r\n        if (typeof limit !== 'undefined') {\r\n            args.limitnum = limit;\r\n        }\r\n\r\n        if (typeof offset !== 'undefined') {\r\n            args.limitfrom = offset;\r\n        }\r\n\r\n        var request = {\r\n            methodname: 'core_message_message_search_users',\r\n            args: args\r\n        };\r\n\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Search for messages.\r\n     *\r\n     * @param {int} userId The requesting user\r\n     * @param {string} searchString Search string\r\n     * @param {int} limit Limit for results\r\n     * @param {int} offset Offset for results\r\n     * @return {object} jQuery promise\r\n     */\r\n    var searchMessages = function(userId, searchString, limit, offset) {\r\n        var args = {\r\n            userid: userId,\r\n            search: searchString\r\n        };\r\n\r\n        if (typeof limit !== 'undefined') {\r\n            args.limitnum = limit;\r\n        }\r\n\r\n        if (typeof offset !== 'undefined') {\r\n            args.limitfrom = offset;\r\n        }\r\n\r\n        var request = {\r\n            methodname: 'core_message_data_for_messagearea_search_messages',\r\n            args: args\r\n        };\r\n\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Send a list of messages to a user.\r\n     *\r\n     * @param {int} toUserId The recipient user id\r\n     * @param {string[]} messages List of messages to send\r\n     * @return {object} jQuery promise\r\n     */\r\n    var sendMessagesToUser = function(toUserId, messages) {\r\n        var formattedMessages = messages.map(function(message) {\r\n            return {\r\n                touserid: toUserId,\r\n                text: message\r\n            };\r\n        });\r\n        var request = {\r\n            methodname: 'core_message_send_instant_messages',\r\n            args: {\r\n                messages: formattedMessages\r\n            }\r\n        };\r\n\r\n        return Ajax.call([request])[0]\r\n            .then(function(results) {\r\n                // Error handling for the weird way the old function works.\r\n                var errors = results.reduce(function(carry, result) {\r\n                    if (result.errormessage) {\r\n                        carry.push(result.errormessage);\r\n                    }\r\n\r\n                    return carry;\r\n                }, []);\r\n                if (errors.length) {\r\n                    throw new Error(errors.join(\"\\n\"));\r\n                }\r\n\r\n                return results;\r\n            })\r\n            .then(function(results) {\r\n                // Format the results to match the other send message function.\r\n                return results.map(function(result) {\r\n                    return {\r\n                        id: result.msgid,\r\n                        text: result.text,\r\n                        timecreated: result.timecreated,\r\n                        useridfrom: result.useridfrom,\r\n                        conversationid: result.conversationid,\r\n                        candeletemessagesforallusers: result.candeletemessagesforallusers\r\n                    };\r\n                });\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Send a single message to a user.\r\n     *\r\n     * @param {int} toUserId The recipient user id\r\n     * @param {string} text The message text\r\n     * @return {object} jQuery promise\r\n     */\r\n    var sendMessageToUser = function(toUserId, text) {\r\n        return sendMessagesToUser(toUserId, [text])\r\n            .then(function(results) {\r\n                return results[0];\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Send messages to a conversation.\r\n     *\r\n     * @param {int} conversationId The conversation id\r\n     * @param {string[]} messages List of messages to send\r\n     * @return {object} jQuery promise\r\n     */\r\n    var sendMessagesToConversation = function(conversationId, messages) {\r\n        var formattedMessages = messages.map(function(message) {\r\n            return {\r\n                text: message\r\n            };\r\n        });\r\n        var request = {\r\n            methodname: 'core_message_send_messages_to_conversation',\r\n            args: {\r\n                conversationid: conversationId,\r\n                messages: formattedMessages\r\n            }\r\n        };\r\n\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Send a message to a conversation.\r\n     *\r\n     * @param {int} conversationId The conversation id\r\n     * @param {string} text The message text\r\n     * @return {object} jQuery promise\r\n     */\r\n    var sendMessageToConversation = function(conversationId, text) {\r\n        return sendMessagesToConversation(conversationId, [text])\r\n            .then(function(result) {\r\n                return result[0];\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Save message preferences.\r\n     *\r\n     * @param {int} userId The owner of the preferences\r\n     * @param {object[]} preferences New preferences values\r\n     * @return {object} jQuery promise\r\n     */\r\n    var savePreferences = function(userId, preferences) {\r\n        var request = {\r\n            methodname: 'core_user_update_user_preferences',\r\n            args: {\r\n                userid: userId,\r\n                preferences: preferences\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Get the user's preferences.\r\n     *\r\n     * @param {int} userId The target user\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getPreferences = function(userId) {\r\n        var request = {\r\n            methodname: 'core_user_get_user_preferences',\r\n            args: {\r\n                userid: userId\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Delete a list of messages.\r\n     *\r\n     * @param {int} userId The user to delete messages for\r\n     * @param {int[]} messageIds List of message ids to delete\r\n     * @return {object} jQuery promise\r\n     */\r\n    var deleteMessages = function(userId, messageIds) {\r\n        return $.when.apply(null, Ajax.call(messageIds.map(function(messageId) {\r\n            return {\r\n                methodname: 'core_message_delete_message',\r\n                args: {\r\n                    messageid: messageId,\r\n                    userid: userId\r\n                }\r\n            };\r\n        })));\r\n    };\r\n\r\n    /**\r\n     * Delete a list of messages for all users.\r\n     *\r\n     * @param {int} userId The user to delete messages for\r\n     * @param {int[]} messageIds List of message ids to delete\r\n     * @return {object} jQuery promise\r\n     */\r\n    var deleteMessagesForAllUsers = function(userId, messageIds) {\r\n        return $.when.apply(null, Ajax.call(messageIds.map(function(messageId) {\r\n            return {\r\n                methodname: 'core_message_delete_message_for_all_users',\r\n                args: {\r\n                    messageid: messageId,\r\n                    userid: userId\r\n                }\r\n            };\r\n        })));\r\n    };\r\n\r\n    /**\r\n     * Delete a conversation between two users.\r\n     *\r\n     * @param {int} userId The user to delete messages for\r\n     * @param {int} conversationId The id of the conversation\r\n     * @return {object} jQuery promise\r\n     */\r\n    var deleteConversation = function(userId, conversationId) {\r\n        var request = {\r\n            methodname: 'core_message_delete_conversations_by_id',\r\n            args: {\r\n                userid: userId,\r\n                conversationids: [conversationId]\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Get the list of contact requests for a user.\r\n     *\r\n     * @param {int} userId The user id\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getContactRequests = function(userId) {\r\n        var request = {\r\n            methodname: 'core_message_get_contact_requests',\r\n            args: {\r\n                userid: userId\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Accept a contact request.\r\n     *\r\n     * @param {int} sendingUserId The user that sent the request\r\n     * @param {int} recipientUserId The user that received the request\r\n     * @return {object} jQuery promise\r\n     */\r\n    var acceptContactRequest = function(sendingUserId, recipientUserId) {\r\n        var requests = [\r\n            {\r\n                methodname: 'core_message_confirm_contact_request',\r\n                args: {\r\n                    userid: sendingUserId,\r\n                    requesteduserid: recipientUserId\r\n                }\r\n            },\r\n            {\r\n                methodname: 'core_message_get_member_info',\r\n                args: {\r\n                    referenceuserid: recipientUserId,\r\n                    userids: [sendingUserId],\r\n                    includecontactrequests: true,\r\n                    includeprivacyinfo: true\r\n                }\r\n            }\r\n        ];\r\n\r\n        // Wrap both requests in a single promise so that we can catch an error\r\n        // from either request.\r\n        return $.when.apply(null, Ajax.call(requests)).then(function(reponse1, profiles) {\r\n            // Only return the profile.\r\n            return profiles.length ? profiles[0] : {};\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Decline a contact request.\r\n     *\r\n     * @param {int} sendingUserId The user that sent the request\r\n     * @param {int} recipientUserId The user that received the request\r\n     * @return {object} jQuery promise\r\n     */\r\n    var declineContactRequest = function(sendingUserId, recipientUserId) {\r\n        var requests = [\r\n            {\r\n                methodname: 'core_message_decline_contact_request',\r\n                args: {\r\n                    userid: sendingUserId,\r\n                    requesteduserid: recipientUserId\r\n                }\r\n            },\r\n            {\r\n                methodname: 'core_message_get_member_info',\r\n                args: {\r\n                    referenceuserid: recipientUserId,\r\n                    userids: [sendingUserId],\r\n                    includecontactrequests: true,\r\n                    includeprivacyinfo: true\r\n                }\r\n            }\r\n        ];\r\n\r\n        // Wrap both requests in a single promise so that we can catch an error\r\n        // from either request.\r\n        return $.when.apply(null, Ajax.call(requests)).then(function(reponse1, profiles) {\r\n            // Only return the profile.\r\n            return profiles.length ? profiles[0] : {};\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get a conversation.\r\n     *\r\n     * @param {int} loggedInUserId The logged in user\r\n     * @param {int} conversationId The conversation id\r\n     * @param {bool} includeContactRequests Incldue contact requests between members\r\n     * @param {bool} includePrivacyInfo Include privacy info for members\r\n     * @param {int} memberLimit Limit for members\r\n     * @param {int} memberOffset Offset for members\r\n     * @param {int} messageLimit Limit for messages\r\n     * @param {int} messageOffset Offset for messages\r\n     * @param {bool} newestMessagesFirst Order the messages by newest first\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getConversation = function(\r\n        loggedInUserId,\r\n        conversationId,\r\n        includeContactRequests,\r\n        includePrivacyInfo,\r\n        memberLimit,\r\n        memberOffset,\r\n        messageLimit,\r\n        messageOffset,\r\n        newestMessagesFirst\r\n    ) {\r\n        var args = {\r\n            userid: loggedInUserId,\r\n            conversationid: conversationId\r\n        };\r\n\r\n        if (typeof includeContactRequests != 'undefined' && includeContactRequests !== null) {\r\n            args.includecontactrequests = includeContactRequests;\r\n        }\r\n\r\n        if (typeof includePrivacyInfo != 'undefined' && includePrivacyInfo !== null) {\r\n            args.includeprivacyinfo = includePrivacyInfo;\r\n        }\r\n\r\n        if (typeof memberLimit != 'undefined' && memberLimit !== null) {\r\n            args.memberlimit = memberLimit;\r\n        }\r\n\r\n        if (typeof memberOffset != 'undefined' && memberOffset !== null) {\r\n            args.memberoffset = memberOffset;\r\n        }\r\n\r\n        if (typeof messageLimit != 'undefined' && messageLimit !== null) {\r\n            args.messagelimit = messageLimit;\r\n        }\r\n\r\n        if (typeof messageOffset != 'undefined' && messageOffset !== null) {\r\n            args.messageoffset = messageOffset;\r\n        }\r\n\r\n        if (typeof newestMessagesFirst != 'undefined' && newestMessagesFirst !== null) {\r\n            args.newestmessagesfirst = newestMessagesFirst;\r\n        }\r\n\r\n        var request = {\r\n            methodname: 'core_message_get_conversation',\r\n            args: args\r\n        };\r\n\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Get a conversation between users.\r\n     *\r\n     * @param {int} loggedInUserId The logged in user\r\n     * @param {int} otherUserId The other user id\r\n     * @param {bool} includeContactRequests Incldue contact requests between members\r\n     * @param {bool} includePrivacyInfo Include privacy info for members\r\n     * @param {int} memberLimit Limit for members\r\n     * @param {int} memberOffset Offset for members\r\n     * @param {int} messageLimit Limit for messages\r\n     * @param {int} messageOffset Offset for messages\r\n     * @param {bool} newestMessagesFirst Order the messages by newest first\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getConversationBetweenUsers = function(\r\n        loggedInUserId,\r\n        otherUserId,\r\n        includeContactRequests,\r\n        includePrivacyInfo,\r\n        memberLimit,\r\n        memberOffset,\r\n        messageLimit,\r\n        messageOffset,\r\n        newestMessagesFirst\r\n    ) {\r\n        var args = {\r\n            userid: loggedInUserId,\r\n            otheruserid: otherUserId\r\n        };\r\n\r\n        if (typeof includeContactRequests != 'undefined' && includeContactRequests !== null) {\r\n            args.includecontactrequests = includeContactRequests;\r\n        }\r\n\r\n        if (typeof includePrivacyInfo != 'undefined' && includePrivacyInfo !== null) {\r\n            args.includeprivacyinfo = includePrivacyInfo;\r\n        }\r\n\r\n        if (typeof memberLimit != 'undefined' && memberLimit !== null) {\r\n            args.memberlimit = memberLimit;\r\n        }\r\n\r\n        if (typeof memberOffset != 'undefined' && memberOffset !== null) {\r\n            args.memberoffset = memberOffset;\r\n        }\r\n\r\n        if (typeof messageLimit != 'undefined' && messageLimit !== null) {\r\n            args.messagelimit = messageLimit;\r\n        }\r\n\r\n        if (typeof messageOffset != 'undefined' && messageOffset !== null) {\r\n            args.messageoffset = messageOffset;\r\n        }\r\n\r\n        if (typeof newestMessagesFirst != 'undefined' && newestMessagesFirst !== null) {\r\n            args.newestmessagesfirst = newestMessagesFirst;\r\n        }\r\n\r\n        var request = {\r\n            methodname: 'core_message_get_conversation_between_users',\r\n            args: args\r\n        };\r\n\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Get a self-conversation.\r\n     *\r\n     * @param {int} loggedInUserId The logged in user\r\n     * @param {int} messageLimit Limit for messages\r\n     * @param {int} messageOffset Offset for messages\r\n     * @param {bool} newestMessagesFirst Order the messages by newest first\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getSelfConversation = function(\r\n        loggedInUserId,\r\n        messageLimit,\r\n        messageOffset,\r\n        newestMessagesFirst\r\n    ) {\r\n        var args = {\r\n            userid: loggedInUserId\r\n        };\r\n\r\n        if (typeof messageLimit != 'undefined' && messageLimit !== null) {\r\n            args.messagelimit = messageLimit;\r\n        }\r\n\r\n        if (typeof messageOffset != 'undefined' && messageOffset !== null) {\r\n            args.messageoffset = messageOffset;\r\n        }\r\n\r\n        if (typeof newestMessagesFirst != 'undefined' && newestMessagesFirst !== null) {\r\n            args.newestmessagesfirst = newestMessagesFirst;\r\n        }\r\n\r\n        var request = {\r\n            methodname: 'core_message_get_self_conversation',\r\n            args: args\r\n        };\r\n\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Get the conversations for a user.\r\n     *\r\n     * @param {int} userId The logged in user\r\n     * @param {int|null} type The type of conversation to get\r\n     * @param {int} limit Limit for results\r\n     * @param {int} offset Offset for results\r\n     * @param {bool|null} favourites If favourites should be included or not\r\n     * @param {bool} mergeself\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getConversations = function(\r\n        userId,\r\n        type,\r\n        limit,\r\n        offset,\r\n        favourites,\r\n        mergeself\r\n    ) {\r\n        var args = {\r\n            userid: userId,\r\n            type: type\r\n        };\r\n\r\n        if (typeof limit != 'undefined' && limit !== null) {\r\n            args.limitnum = limit;\r\n        }\r\n\r\n        if (typeof offset != 'undefined' && offset !== null) {\r\n            args.limitfrom = offset;\r\n        }\r\n\r\n        if (typeof favourites != 'undefined' && favourites !== null) {\r\n            args.favourites = favourites;\r\n        }\r\n\r\n        if (typeof mergeself != 'undefined' && mergeself !== null) {\r\n            args.mergeself = mergeself;\r\n        }\r\n\r\n        var request = {\r\n            methodname: 'core_message_get_conversations',\r\n            args: args\r\n        };\r\n\r\n        return Ajax.call([request])[0]\r\n            .then(function(result) {\r\n                if (result.conversations.length) {\r\n                    result.conversations = result.conversations.map(function(conversation) {\r\n                        if (conversation.type == CONVERSATION_TYPES.PRIVATE || conversation.type == CONVERSATION_TYPES.SELF) {\r\n                            var otherUser = conversation.members.length ? conversation.members[0] : null;\r\n\r\n                            if (otherUser) {\r\n                                conversation.name = conversation.name ? conversation.name : otherUser.fullname;\r\n                                conversation.imageurl = conversation.imageurl ? conversation.imageurl : otherUser.profileimageurl;\r\n                            }\r\n                        }\r\n\r\n                        return conversation;\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Get the conversations for a user.\r\n     *\r\n     * @param {int} conversationId The conversation id\r\n     * @param {int} loggedInUserId The logged in user\r\n     * @param {int} limit Limit for results\r\n     * @param {int} offset Offset for results\r\n     * @param {bool} includeContactRequests If contact requests should be included in result\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getConversationMembers = function(conversationId, loggedInUserId, limit, offset, includeContactRequests) {\r\n        var args = {\r\n            userid: loggedInUserId,\r\n            conversationid: conversationId\r\n        };\r\n\r\n        if (typeof limit != 'undefined' && limit !== null) {\r\n            args.limitnum = limit;\r\n        }\r\n\r\n        if (typeof offset != 'undefined' && offset !== null) {\r\n            args.limitfrom = offset;\r\n        }\r\n\r\n        if (typeof includeContactRequests != 'undefined' && includeContactRequests !== null) {\r\n            args.includecontactrequests = includeContactRequests;\r\n        }\r\n\r\n        var request = {\r\n            methodname: 'core_message_get_conversation_members',\r\n            args: args\r\n        };\r\n\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Set a list of conversations to set as favourites for the given user.\r\n     *\r\n     * @param {int} userId The user id\r\n     * @param {array} conversationIds List of conversation ids to set as favourite\r\n     * @return {object} jQuery promise\r\n     */\r\n    var setFavouriteConversations = function(userId, conversationIds) {\r\n\r\n        var request = {\r\n            methodname: 'core_message_set_favourite_conversations',\r\n            args: {\r\n                userid: userId,\r\n                conversations: conversationIds\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Set a list of conversations to unset as favourites for the given user.\r\n     *\r\n     * @param {int} userId The user id\r\n     * @param {array} conversationIds List of conversation ids to unset as favourite\r\n     * @return {object} jQuery promise\r\n     */\r\n    var unsetFavouriteConversations = function(userId, conversationIds) {\r\n\r\n        var request = {\r\n            methodname: 'core_message_unset_favourite_conversations',\r\n            args: {\r\n                userid: userId,\r\n                conversations: conversationIds\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Set a list of conversations to set as muted for the given user.\r\n     *\r\n     * @param {int} userId The user id\r\n     * @param {array} conversationIds List of conversation ids to set as favourite\r\n     * @return {object} jQuery promise\r\n     */\r\n    var setMutedConversations = function(userId, conversationIds) {\r\n        var request = {\r\n            methodname: 'core_message_mute_conversations',\r\n            args: {\r\n                userid: userId,\r\n                conversationids: conversationIds\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Set a list of conversations to unset as muted for the given user.\r\n     *\r\n     * @param {int} userId The user id\r\n     * @param {array} conversationIds List of conversation ids to unset as favourite\r\n     * @return {object} jQuery promise\r\n     */\r\n    var unsetMutedConversations = function(userId, conversationIds) {\r\n        var request = {\r\n            methodname: 'core_message_unmute_conversations',\r\n            args: {\r\n                userid: userId,\r\n                conversationids: conversationIds\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Get a list of user's member info.\r\n     *\r\n     * @param {int} referenceUserId The user id\r\n     * @param {array} userIds List of user ids to get\r\n     * @param {bool} includeContactRequests Include contact requests between users in response\r\n     * @param {bool} includePrivacyInfo Include privacy info for reference user in response\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getMemberInfo = function(referenceUserId, userIds, includeContactRequests, includePrivacyInfo) {\r\n        var args = {\r\n            referenceuserid: referenceUserId,\r\n            userids: userIds\r\n        };\r\n\r\n        if (typeof includeContactRequests != 'undefined') {\r\n            args.includecontactrequests = includeContactRequests;\r\n        }\r\n\r\n        if (typeof includePrivacyInfo != 'undefined') {\r\n            args.includeprivacyinfo = includePrivacyInfo;\r\n        }\r\n\r\n        var request = {\r\n            methodname: 'core_message_get_member_info',\r\n            args: args\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Get a list of user's member info.\r\n     *\r\n     * @param {int} userId The user id to mark as read for\r\n     * @param {int} conversationId The conversation to mark as read\r\n     * @return {object} jQuery promise\r\n     */\r\n    var markAllConversationMessagesAsRead = function(userId, conversationId) {\r\n\r\n        var request = {\r\n            methodname: 'core_message_mark_all_conversation_messages_as_read',\r\n            args: {\r\n                userid: userId,\r\n                conversationid: conversationId\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Get the user's message preferences.\r\n     *\r\n     * @param {int} userId The user id to load preferences for\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getUserMessagePreferences = function(userId) {\r\n        var request = {\r\n            methodname: 'core_message_get_user_message_preferences',\r\n            args: {\r\n                userid: userId\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * The the count of the user's conversations grouped by type.\r\n     *\r\n     * @param {Number} userId The user's id.\r\n     * @return {Object} jQuery promise.\r\n     */\r\n    var getTotalConversationCounts = function(userId) {\r\n        var request = {\r\n            methodname: 'core_message_get_conversation_counts',\r\n            args: {\r\n                userid: userId\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * The the count of the user's unread conversations grouped by type.\r\n     *\r\n     * @param {Number} userId The user's id.\r\n     * @return {Object} jQuery promise.\r\n     */\r\n    var getUnreadConversationCounts = function(userId) {\r\n        var request = {\r\n            methodname: 'core_message_get_unread_conversation_counts',\r\n            args: {\r\n                userid: userId\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Get both the unread and total conversation counts in a single request.\r\n     *\r\n     * @param {Number} userId The user's id.\r\n     * @return {Object} jQuery promise.\r\n     */\r\n    var getAllConversationCounts = function(userId) {\r\n        var requests = [\r\n            {\r\n                methodname: 'core_message_get_conversation_counts',\r\n                args: {\r\n                    userid: userId\r\n                }\r\n            },\r\n            {\r\n                methodname: 'core_message_get_unread_conversation_counts',\r\n                args: {\r\n                    userid: userId\r\n                }\r\n            },\r\n        ];\r\n        return $.when.apply(null, Ajax.call(requests)).then(function(total, unread) {\r\n            return {\r\n                total: total,\r\n                unread: unread\r\n            };\r\n        });\r\n    };\r\n\r\n    return {\r\n        countUnreadConversations: countUnreadConversations,\r\n        getContacts: getContacts,\r\n        blockUser: blockUser,\r\n        unblockUser: unblockUser,\r\n        createContactRequest: createContactRequest,\r\n        deleteContacts: deleteContacts,\r\n        getMessages: getMessages,\r\n        searchUsers: searchUsers,\r\n        searchMessages: searchMessages,\r\n        sendMessagesToUser: sendMessagesToUser,\r\n        sendMessageToUser: sendMessageToUser,\r\n        sendMessagesToConversation: sendMessagesToConversation,\r\n        sendMessageToConversation: sendMessageToConversation,\r\n        savePreferences: savePreferences,\r\n        getPreferences: getPreferences,\r\n        deleteMessages: deleteMessages,\r\n        deleteMessagesForAllUsers: deleteMessagesForAllUsers,\r\n        deleteConversation: deleteConversation,\r\n        getContactRequests: getContactRequests,\r\n        acceptContactRequest: acceptContactRequest,\r\n        declineContactRequest: declineContactRequest,\r\n        getConversation: getConversation,\r\n        getConversationBetweenUsers: getConversationBetweenUsers,\r\n        getSelfConversation: getSelfConversation,\r\n        getConversations: getConversations,\r\n        getConversationMembers: getConversationMembers,\r\n        setFavouriteConversations: setFavouriteConversations,\r\n        setMutedConversations: setMutedConversations,\r\n        unsetFavouriteConversations: unsetFavouriteConversations,\r\n        unsetMutedConversations: unsetMutedConversations,\r\n        getMemberInfo: getMemberInfo,\r\n        markAllConversationMessagesAsRead: markAllConversationMessagesAsRead,\r\n        getUserMessagePreferences: getUserMessagePreferences,\r\n        getTotalConversationCounts: getTotalConversationCounts,\r\n        getUnreadConversationCounts: getUnreadConversationCounts,\r\n        getAllConversationCounts: getAllConversationCounts\r\n    };\r\n});\r\n"],"names":["define","$","Ajax","Notification","Constants","CONVERSATION_TYPES","sendMessagesToUser","toUserId","messages","request","methodname","args","map","message","touserid","text","call","then","results","errors","reduce","carry","result","errormessage","push","length","Error","join","id","msgid","timecreated","useridfrom","conversationid","candeletemessagesforallusers","sendMessagesToConversation","conversationId","countUnreadConversations","promise","fail","exception","getContacts","userId","limit","offset","userid","limitnum","limitfrom","blockUser","blockedUserId","requests","blockeduserid","referenceuserid","userids","includecontactrequests","includeprivacyinfo","when","apply","reponse1","profiles","unblockUser","unblockedUserId","unblockeduserid","createContactRequest","requestUserIds","requesteduserid","deleteContacts","contactUserIds","response1","getMessages","currentUserId","newestFirst","timeFrom","currentuserid","convid","newest","timefrom","searchUsers","searchString","search","searchMessages","sendMessageToUser","sendMessageToConversation","savePreferences","preferences","getPreferences","deleteMessages","messageIds","messageId","messageid","deleteMessagesForAllUsers","deleteConversation","conversationids","getContactRequests","acceptContactRequest","sendingUserId","recipientUserId","declineContactRequest","getConversation","loggedInUserId","includeContactRequests","includePrivacyInfo","memberLimit","memberOffset","messageLimit","messageOffset","newestMessagesFirst","memberlimit","memberoffset","messagelimit","messageoffset","newestmessagesfirst","getConversationBetweenUsers","otherUserId","otheruserid","getSelfConversation","getConversations","type","favourites","mergeself","conversations","conversation","PRIVATE","SELF","otherUser","members","name","fullname","imageurl","profileimageurl","getConversationMembers","setFavouriteConversations","conversationIds","setMutedConversations","unsetFavouriteConversations","unsetMutedConversations","getMemberInfo","referenceUserId","userIds","markAllConversationMessagesAsRead","getUserMessagePreferences","getTotalConversationCounts","getUnreadConversationCounts","getAllConversationCounts","total","unread"],"mappings":"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"}