{"version":3,"file":"message_send_bulk.min.js","sources":["../src/message_send_bulk.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Send bulk message to the given user ids.\r\n *\r\n * @module     core_message/message_send_bulk\r\n * @copyright  2019 Shamim Rezaie <shamim@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport {get_string} from 'core/str';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport Templates from 'core/templates';\r\nimport ModalEvents from 'core/modal_events';\r\nimport Ajax from 'core/ajax';\r\nimport Notification from 'core/notification';\r\n\r\n/**\r\n * Show the send message popup.\r\n *\r\n * @method showModal\r\n * @param {int[]} users\r\n * @param {Function} callback A callback to apply after the form is closed.\r\n * @returns {Promise}\r\n */\r\nexport const showModal = (users, callback = null) => {\r\n    if (!users.length) {\r\n        // Nothing to do.\r\n        return Promise.resolve();\r\n    }\r\n    let titlePromise = null;\r\n    if (users.length == 1) {\r\n        titlePromise = get_string('sendbulkmessagesingle', 'core_message');\r\n    } else {\r\n        titlePromise = get_string('sendbulkmessage', 'core_message', users.length);\r\n    }\r\n\r\n    return ModalFactory.create({\r\n        type: ModalFactory.types.SAVE_CANCEL,\r\n        body: Templates.render('core_message/send_bulk_message', {}),\r\n        title: titlePromise,\r\n    })\r\n    .then(function(modal) {\r\n        modal.setSaveButtonText(titlePromise);\r\n\r\n        // When the dialog is closed, perform the callback (if provided).\r\n        modal.getRoot().on(ModalEvents.hidden, function() {\r\n            if (callback) {\r\n                callback();\r\n            }\r\n            modal.getRoot().remove();\r\n        });\r\n\r\n        modal.getRoot().on(ModalEvents.save, function() {\r\n            let messageText = modal.getRoot().find('form textarea').val();\r\n            sendMessage(messageText, users);\r\n        });\r\n\r\n        modal.show();\r\n\r\n        return modal;\r\n    });\r\n};\r\n\r\n/**\r\n * Send a message to these users.\r\n *\r\n * @method sendMessage\r\n * @param {String} messageText\r\n * @param {Number[]} users\r\n * @returns {Promise}\r\n */\r\nexport const sendMessage = (messageText, users) => {\r\n    let messages = [];\r\n\r\n    users.forEach(user => {\r\n        messages.push({\r\n            touserid: user,\r\n            text: messageText\r\n        });\r\n    });\r\n\r\n    return Ajax.call([{\r\n        methodname: 'core_message_send_instant_messages',\r\n        args: {messages: messages}\r\n    }])[0]\r\n    .then(function(messageIds) {\r\n        if (messageIds.length == 1) {\r\n            return get_string('sendbulkmessagesentsingle', 'core_message');\r\n        } else {\r\n            return get_string('sendbulkmessagesent', 'core_message', messageIds.length);\r\n        }\r\n    })\r\n    .then(function(msg) {\r\n        Notification.addNotification({\r\n            message: msg,\r\n            type: \"success\"\r\n        });\r\n        return true;\r\n    })\r\n    .catch(Notification.exception);\r\n};\r\n"],"names":["users","callback","length","Promise","resolve","titlePromise","ModalFactory","create","type","types","SAVE_CANCEL","body","Templates","render","title","then","modal","setSaveButtonText","getRoot","on","ModalEvents","hidden","remove","save","messageText","find","val","sendMessage","show","messages","forEach","user","push","touserid","text","Ajax","call","methodname","args","messageIds","msg","addNotification","message","catch","Notification","exception"],"mappings":";;;;;;;+WAqCyB,SAACA,WAAOC,gEAAW,SACnCD,MAAME,cAEAC,QAAQC,cAEfC,aAAe,YAEfA,aADgB,GAAhBL,MAAME,QACS,mBAAW,wBAAyB,iBAEpC,mBAAW,kBAAmB,eAAgBF,MAAME,QAGhEI,uBAAaC,OAAO,CACvBC,KAAMF,uBAAaG,MAAMC,YACzBC,KAAMC,mBAAUC,OAAO,iCAAkC,IACzDC,MAAOT,eAEVU,MAAK,SAASC,cACXA,MAAMC,kBAAkBZ,cAGxBW,MAAME,UAAUC,GAAGC,sBAAYC,QAAQ,WAC/BpB,UACAA,WAEJe,MAAME,UAAUI,YAGpBN,MAAME,UAAUC,GAAGC,sBAAYG,MAAM,eAC7BC,YAAcR,MAAME,UAAUO,KAAK,iBAAiBC,MACxDC,YAAYH,YAAaxB,UAG7BgB,MAAMY,OAECZ,gBAYFW,YAAc,CAACH,YAAaxB,aACjC6B,SAAW,UAEf7B,MAAM8B,SAAQC,OACVF,SAASG,KAAK,CACVC,SAAUF,KACVG,KAAMV,iBAIPW,cAAKC,KAAK,CAAC,CACdC,WAAY,qCACZC,KAAM,CAACT,SAAUA,aACjB,GACHd,MAAK,SAASwB,mBACc,GAArBA,WAAWrC,QACJ,mBAAW,4BAA6B,iBAExC,mBAAW,sBAAuB,eAAgBqC,WAAWrC,WAG3Ea,MAAK,SAASyB,kCACEC,gBAAgB,CACzBC,QAASF,IACThC,KAAM,aAEH,KAEVmC,MAAMC,sBAAaC"}