{"version":3,"file":"default_notification_preferences.min.js","sources":["../src/default_notification_preferences.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Controls the default settings for the list of notification types on the\r\n * notifications admin page\r\n *\r\n * @module     core_message/default_notification_preferences\r\n * @class      default_notification_preferences\r\n * @copyright  2021 Moodle\r\n * @author     Pau Ferrer Oca√±a <pau@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nconst selectors = {\r\n    provider: '.defaultmessageoutputs .provider_enabled',\r\n    lockSetting: '.locked_message_setting',\r\n    enabledSetting: '.enabled_message_setting',\r\n    allSettings: '.locked_message_setting, .enabled_message_setting'\r\n};\r\n\r\n/**\r\n * Register event listeners for the default_notification_preferences page.\r\n */\r\nconst registerEventListeners = () => {\r\n\r\n    /**\r\n     * Update the dimmed status of the \"enabled\" toggle on the notification setting.\r\n     *\r\n     * @param {HTMLElement} lockedElement Element that receives the event.\r\n     */\r\n    const toggleLockSetting = (lockedElement) => {\r\n        const isEnabled = lockedElement.checked || false;\r\n        const enabledId = lockedElement.id.replace('_locked[', '_enabled[');\r\n\r\n        const enabledElement = document.getElementById(enabledId).closest('div.custom-control');\r\n        enabledElement.classList.toggle('dimmed_text', isEnabled);\r\n    };\r\n\r\n    /**\r\n     * Enable/Disable all settings of the provider.\r\n     *\r\n     * @param {HTMLElement} providerEnabledElement Element that receives the event.\r\n     */\r\n    const toggleEnableProviderSettings = (providerEnabledElement) => {\r\n        const isEnabled = providerEnabledElement.checked || false;\r\n        const parentRow = providerEnabledElement.closest('tr');\r\n\r\n        const elements = parentRow.querySelectorAll(selectors.allSettings);\r\n        elements.forEach((element) => {\r\n            element.toggleAttribute('disabled', !isEnabled);\r\n        });\r\n    };\r\n\r\n    const container = document.querySelector('.preferences-container');\r\n\r\n    container.querySelectorAll(selectors.provider).forEach((providerEnabledElement) => {\r\n        // Set the initial statuses.\r\n        if (!providerEnabledElement.checked) {\r\n            toggleEnableProviderSettings(providerEnabledElement);\r\n        }\r\n\r\n        providerEnabledElement.addEventListener('change', (e) => {\r\n            toggleEnableProviderSettings(e.target);\r\n        });\r\n    });\r\n\r\n    container.querySelectorAll(selectors.lockSetting).forEach((lockedElement) => {\r\n        // Set the initial statuses.\r\n        if (lockedElement.checked) {\r\n            toggleLockSetting(lockedElement);\r\n        }\r\n\r\n        lockedElement.addEventListener('change', (e) => {\r\n            toggleLockSetting(e.target);\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Initialize the page.\r\n */\r\nconst init = () => {\r\n    registerEventListeners();\r\n};\r\n\r\nexport default {\r\n    init: init,\r\n};\r\n"],"names":["selectors","init","toggleLockSetting","lockedElement","isEnabled","checked","enabledId","id","replace","document","getElementById","closest","classList","toggle","toggleEnableProviderSettings","providerEnabledElement","querySelectorAll","forEach","element","toggleAttribute","container","querySelector","addEventListener","e","target","registerEventListeners"],"mappings":";;;;;;;;;;;MA0BMA,mBACQ,2CADRA,sBAEW,0BAFXA,sBAIW,iEAoEF,CACXC,KALS,KA1DkB,YAOrBC,kBAAqBC,sBACjBC,UAAYD,cAAcE,UAAW,EACrCC,UAAYH,cAAcI,GAAGC,QAAQ,WAAY,aAEhCC,SAASC,eAAeJ,WAAWK,QAAQ,sBACnDC,UAAUC,OAAO,cAAeT,YAQ7CU,6BAAgCC,+BAC5BX,UAAYW,uBAAuBV,UAAW,EAClCU,uBAAuBJ,QAAQ,MAEtBK,iBAAiBhB,uBACnCiB,SAASC,UACdA,QAAQC,gBAAgB,YAAaf,eAIvCgB,UAAYX,SAASY,cAAc,0BAEzCD,UAAUJ,iBAAiBhB,oBAAoBiB,SAASF,yBAE/CA,uBAAuBV,SACxBS,6BAA6BC,wBAGjCA,uBAAuBO,iBAAiB,UAAWC,IAC/CT,6BAA6BS,EAAEC,cAIvCJ,UAAUJ,iBAAiBhB,uBAAuBiB,SAASd,gBAEnDA,cAAcE,SACdH,kBAAkBC,eAGtBA,cAAcmB,iBAAiB,UAAWC,IACtCrB,kBAAkBqB,EAAEC,eAS5BC"}