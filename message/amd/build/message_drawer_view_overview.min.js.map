{"version":3,"file":"message_drawer_view_overview.min.js","sources":["../src/message_drawer_view_overview.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Controls the overview page of the message drawer.\r\n *\r\n * @module     core_message/message_drawer_view_overview\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n[\r\n    'jquery',\r\n    'core/key_codes',\r\n    'core/pubsub',\r\n    'core/str',\r\n    'core_message/message_drawer_router',\r\n    'core_message/message_drawer_routes',\r\n    'core_message/message_drawer_events',\r\n    'core_message/message_drawer_view_overview_section',\r\n    'core_message/message_repository',\r\n    'core_message/message_drawer_view_conversation_constants'\r\n],\r\nfunction(\r\n    $,\r\n    KeyCodes,\r\n    PubSub,\r\n    Str,\r\n    Router,\r\n    Routes,\r\n    MessageDrawerEvents,\r\n    Section,\r\n    MessageRepository,\r\n    Constants\r\n) {\r\n\r\n    var SELECTORS = {\r\n        CONTACT_REQUEST_COUNT: '[data-region=\"contact-request-count\"]',\r\n        FAVOURITES: '[data-region=\"view-overview-favourites\"]',\r\n        GROUP_MESSAGES: '[data-region=\"view-overview-group-messages\"]',\r\n        MESSAGES: '[data-region=\"view-overview-messages\"]',\r\n        SEARCH_INPUT: '[data-region=\"view-overview-search-input\"]',\r\n        SECTION_TOGGLE_BUTTON: '[data-toggle]'\r\n    };\r\n\r\n    // Categories displayed in the message drawer. Some methods (such as filterCountsByType) are expecting their value\r\n    // will be the same as the defined in the CONVERSATION_TYPES, except for the favourite.\r\n    var OVERVIEW_SECTION_TYPES = {\r\n        PRIVATE: [Constants.CONVERSATION_TYPES.PRIVATE, Constants.CONVERSATION_TYPES.SELF],\r\n        PUBLIC: [Constants.CONVERSATION_TYPES.PUBLIC],\r\n        FAVOURITE: null\r\n    };\r\n\r\n    var loadAllCountsPromise = null;\r\n\r\n    /**\r\n     * Load the total and unread conversation counts from the server for this user. This function\r\n     * returns a jQuery promise that will be resolved with the counts.\r\n     *\r\n     * The request is only sent once per page load and will be cached for subsequent\r\n     * calls to this function.\r\n     *\r\n     * @param {Number} loggedInUserId The logged in user's id\r\n     * @return {Object} jQuery promise\r\n     */\r\n    var loadAllCounts = function(loggedInUserId) {\r\n        if (loadAllCountsPromise === null) {\r\n            loadAllCountsPromise = MessageRepository.getAllConversationCounts(loggedInUserId);\r\n        }\r\n\r\n        return loadAllCountsPromise;\r\n    };\r\n\r\n    /**\r\n     * Filter a set of counts to return only the count for the given type.\r\n     *\r\n     * This is used on the result returned by the loadAllCounts function.\r\n     *\r\n     * @param {Object} counts Conversation counts indexed by conversation type.\r\n     * @param {Array|null} types The conversation types handlded by this section (null for all conversation types).\r\n     * @param {bool} includeFavourites If this section includes favourites\r\n     * @return {Number}\r\n     */\r\n    var filterCountsByTypes = function(counts, types, includeFavourites) {\r\n        var total = 0;\r\n\r\n        if (types && types.length) {\r\n            total = types.reduce(function(carry, type) {\r\n                return carry + counts.types[type];\r\n            }, total);\r\n        }\r\n\r\n        if (includeFavourites) {\r\n            total += counts.favourites;\r\n        }\r\n\r\n        return total;\r\n    };\r\n\r\n    /**\r\n     * Opens one of the sections based on whether the section has unread conversations\r\n     * or any conversations\r\n     *\r\n     * Default section priority is favourites, groups, then messages. A section can increase\r\n     * in priority if it has conversations in it. It can increase even further if it has\r\n     * unread conversations.\r\n     *\r\n     * @param {Array} sections List of section roots, total counts, and unread counts.\r\n     */\r\n    var openSection = function(sections) {\r\n        var isAlreadyOpen = sections.some(function(section) {\r\n            var sectionRoot = section[0];\r\n            return Section.isVisible(sectionRoot);\r\n        });\r\n\r\n        if (isAlreadyOpen) {\r\n            // The user has already opened a section so there is nothing to do.\r\n            return;\r\n        }\r\n\r\n        // Order the sections so that sections with unread conversations are prioritised\r\n        // over sections without and sections with total conversations are prioritised\r\n        // over sections without.\r\n        sections.sort(function(a, b) {\r\n            var aTotal = a[1];\r\n            var aUnread = a[2];\r\n            var bTotal = b[1];\r\n            var bUnread = b[2];\r\n\r\n            if (aUnread > 0 && bUnread == 0) {\r\n                return -1;\r\n            } else if (aUnread == 0 && bUnread > 0) {\r\n                return 1;\r\n            } else if (aTotal > 0 && bTotal == 0) {\r\n                return -1;\r\n            } else if (aTotal == 0 && bTotal > 0) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n\r\n        // Get the root of the first section after sorting.\r\n        var sectionRoot = sections[0][0];\r\n        var button = sectionRoot.find(SELECTORS.SECTION_TOGGLE_BUTTON);\r\n        // Click it to expand it.\r\n        button.click();\r\n    };\r\n\r\n    /**\r\n     * Get the search input text element.\r\n     *\r\n     * @param  {Object} header Overview header container element.\r\n     * @return {Object} The search input element.\r\n     */\r\n    var getSearchInput = function(header) {\r\n        return header.find(SELECTORS.SEARCH_INPUT);\r\n    };\r\n\r\n    /**\r\n     * Get the logged in user id.\r\n     *\r\n     * @param {Object} body Overview body container element.\r\n     * @return {String} Logged in user id.\r\n     */\r\n    var getLoggedInUserId = function(body) {\r\n        return body.attr('data-user-id');\r\n    };\r\n\r\n    /**\r\n     * Decrement the contact request count. If the count is zero or below then\r\n     * hide the count.\r\n     *\r\n     * @param {Object} header Conversation header container element.\r\n     * @return {Function} A function to handle decrementing the count.\r\n     */\r\n    var decrementContactRequestCount = function(header) {\r\n        return function() {\r\n            var countContainer = header.find(SELECTORS.CONTACT_REQUEST_COUNT);\r\n            var count = parseInt(countContainer.text(), 10);\r\n            count = isNaN(count) ? 0 : count - 1;\r\n\r\n            if (count <= 0) {\r\n                countContainer.addClass('hidden');\r\n            } else {\r\n                countContainer.text(count);\r\n            }\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Listen to, and handle event in the overview header.\r\n     *\r\n     * @param {String} namespace Unique identifier for the Routes\r\n     * @param {Object} header Conversation header container element.\r\n     */\r\n    var registerEventListeners = function(namespace, header) {\r\n        var searchInput = getSearchInput(header);\r\n        var ignoredKeys = [KeyCodes.tab, KeyCodes.shift, KeyCodes.ctrl, KeyCodes.alt];\r\n\r\n        searchInput.on('click', function() {\r\n            Router.go(namespace, Routes.VIEW_SEARCH);\r\n        });\r\n        searchInput.on('keydown', function(e) {\r\n            if (ignoredKeys.indexOf(e.keyCode) < 0 && e.key != 'Meta') {\r\n                Router.go(namespace, Routes.VIEW_SEARCH);\r\n            }\r\n        });\r\n\r\n        PubSub.subscribe(MessageDrawerEvents.CONTACT_REQUEST_ACCEPTED, decrementContactRequestCount(header));\r\n        PubSub.subscribe(MessageDrawerEvents.CONTACT_REQUEST_DECLINED, decrementContactRequestCount(header));\r\n    };\r\n\r\n    /**\r\n     * Setup the overview page.\r\n     *\r\n     * @param {String} namespace Unique identifier for the Routes\r\n     * @param {Object} header Overview header container element.\r\n     * @param {Object} body Overview body container element.\r\n     * @return {Object} jQuery promise\r\n     */\r\n    var show = function(namespace, header, body) {\r\n        if (!header.attr('data-init')) {\r\n            registerEventListeners(namespace, header);\r\n            header.attr('data-init', true);\r\n        }\r\n        var fromPanel = header.attr('data-in-panel') ? 'frompanel' : null;\r\n\r\n        getSearchInput(header).val('');\r\n        var loggedInUserId = getLoggedInUserId(body);\r\n        var allCounts = loadAllCounts(loggedInUserId);\r\n\r\n        var sections = [\r\n            // Favourite conversations section.\r\n            [body.find(SELECTORS.FAVOURITES), OVERVIEW_SECTION_TYPES.FAVOURITE, true],\r\n            // Group conversations section.\r\n            [body.find(SELECTORS.GROUP_MESSAGES), OVERVIEW_SECTION_TYPES.PUBLIC, false],\r\n            // Private conversations section.\r\n            [body.find(SELECTORS.MESSAGES), OVERVIEW_SECTION_TYPES.PRIVATE, false]\r\n        ];\r\n\r\n        sections.forEach(function(args) {\r\n            var sectionRoot = args[0];\r\n            var sectionTypes = args[1];\r\n            var includeFavourites = args[2];\r\n            var totalCountPromise = allCounts.then(function(result) {\r\n                return filterCountsByTypes(result.total, sectionTypes, includeFavourites);\r\n            });\r\n            var unreadCountPromise = allCounts.then(function(result) {\r\n                return filterCountsByTypes(result.unread, sectionTypes, includeFavourites);\r\n            });\r\n\r\n            Section.show(namespace, null, sectionRoot, null, sectionTypes, includeFavourites,\r\n                totalCountPromise, unreadCountPromise, fromPanel);\r\n        });\r\n\r\n        return allCounts.then(function(result) {\r\n                var sectionParams = sections.map(function(section) {\r\n                    var sectionRoot = section[0];\r\n                    var sectionTypes = section[1];\r\n                    var includeFavourites = section[2];\r\n                    var totalCount = filterCountsByTypes(result.total, sectionTypes, includeFavourites);\r\n                    var unreadCount = filterCountsByTypes(result.unread, sectionTypes, includeFavourites);\r\n\r\n                    return [sectionRoot, totalCount, unreadCount];\r\n                });\r\n\r\n                // Open up one of the sections for the user.\r\n                return openSection(sectionParams);\r\n            });\r\n    };\r\n\r\n    /**\r\n     * String describing this page used for aria-labels.\r\n     *\r\n     * @return {Object} jQuery promise\r\n     */\r\n    var description = function() {\r\n        return Str.get_string('messagedrawerviewoverview', 'core_message');\r\n    };\r\n\r\n    return {\r\n        show: show,\r\n        description: description\r\n    };\r\n});\r\n"],"names":["define","$","KeyCodes","PubSub","Str","Router","Routes","MessageDrawerEvents","Section","MessageRepository","Constants","SELECTORS","OVERVIEW_SECTION_TYPES","PRIVATE","CONVERSATION_TYPES","SELF","PUBLIC","FAVOURITE","loadAllCountsPromise","filterCountsByTypes","counts","types","includeFavourites","total","length","reduce","carry","type","favourites","getSearchInput","header","find","decrementContactRequestCount","countContainer","count","parseInt","text","isNaN","addClass","show","namespace","body","attr","searchInput","ignoredKeys","tab","shift","ctrl","alt","on","go","VIEW_SEARCH","e","indexOf","keyCode","key","subscribe","CONTACT_REQUEST_ACCEPTED","CONTACT_REQUEST_DECLINED","registerEventListeners","fromPanel","val","loggedInUserId","getLoggedInUserId","allCounts","getAllConversationCounts","loadAllCounts","sections","forEach","args","sectionRoot","sectionTypes","totalCountPromise","then","result","unreadCountPromise","unread","some","section","isVisible","sort","a","b","aTotal","aUnread","bTotal","bUnread","click","openSection","map","description","get_string"],"mappings":"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"}