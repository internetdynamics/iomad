{"version":3,"file":"message_drawer_view_conversation_state_manager.min.js","sources":["../src/message_drawer_view_conversation_state_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This module operates on the view states from the message_drawer_view_conversation module.\r\n * It exposes functions that can be used to generate new version of the state.\r\n *\r\n * Important notes for this module:\r\n * 1.) The existing state is always immutable. It should never be modified.\r\n * 2.) All functions that operate on the state should always clone the state and\r\n *     modify the cloned state before returning it.\r\n *\r\n * It's important that the states remain immutable because they are diff'd in\r\n * the message_drawer_view_conversation_patcher module in order to work out what\r\n * has changed.\r\n *\r\n * @module     core_message/message_drawer_view_conversation_state_manager\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery'], function($) {\r\n\r\n    /**\r\n     * Clone a state, a state is a collection of information about the variables required to build\r\n     * the conversation user interface.\r\n     *\r\n     * @param  {Object} state State to clone\r\n     * @return {Object} newstate A copy of the state to clone.\r\n     */\r\n    var cloneState = function(state) {\r\n        // Do a deep extend to make sure we recursively copy objects and\r\n        // arrays so that the new state doesn't contain any references to\r\n        // the old state, e.g. adding a value to an array in the new state\r\n        // shouldn't also add it to the old state.\r\n        return $.extend(true, {}, state);\r\n    };\r\n\r\n    /**\r\n     * Format messages to be used in a state.\r\n     *\r\n     * @param  {Array} messages The messages to format.\r\n     * @param  {Number} loggedInUserId The logged in user id.\r\n     * @param  {Array} members The converstation members.\r\n     * @return {Array} Formatted messages.\r\n     */\r\n    var formatMessages = function(messages, loggedInUserId, members) {\r\n        return messages.map(function(message) {\r\n            var fromLoggedInUser = message.useridfrom == loggedInUserId;\r\n            return {\r\n                // Stringify the id.\r\n                id: \"\" + message.id,\r\n                fromLoggedInUser: fromLoggedInUser,\r\n                userFrom: members[message.useridfrom],\r\n                text: message.text,\r\n                timeCreated: message.timecreated ? parseInt(message.timecreated, 10) : null\r\n            };\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Format members to be used in a state.\r\n     *\r\n     * @param  {Array} members The messages to format.\r\n     * @return {Array} Formatted members.\r\n     */\r\n    var formatMembers = function(members) {\r\n        return members.map(function(member) {\r\n            return {\r\n                id: member.id,\r\n                fullname: member.fullname,\r\n                profileurl: member.profileurl,\r\n                profileimageurl: member.profileimageurl,\r\n                profileimageurlsmall: member.profileimageurlsmall,\r\n                isonline:  member.isonline,\r\n                showonlinestatus: member.showonlinestatus,\r\n                isblocked: member.isblocked,\r\n                iscontact: member.iscontact,\r\n                isdeleted: member.isdeleted,\r\n                canmessage: member.canmessage,\r\n                canmessageevenifblocked: member.canmessageevenifblocked,\r\n                requirescontact: member.requirescontact,\r\n                contactrequests: member.contactrequests || []\r\n            };\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create an initial (blank) state.\r\n     *\r\n     * @param  {Number} midnight Midnight time.\r\n     * @param  {Number} loggedInUserId The logged in user id.\r\n     * @param  {Number} id The conversation id.\r\n     * @param  {Number} messagePollMin The message poll start timeout in seconds.\r\n     * @param  {Number} messagePollMax The message poll max timeout limit in seconds.\r\n     * @param  {Number} messagePollAfterMax The message poll frequency in seconds to reset to after max limit is reached.\r\n     * @return {Object} Initial state.\r\n     */\r\n    var buildInitialState = function(\r\n        midnight,\r\n        loggedInUserId,\r\n        id,\r\n        messagePollMin,\r\n        messagePollMax,\r\n        messagePollAfterMax\r\n    ) {\r\n        return {\r\n            midnight: midnight,\r\n            loggedInUserId: loggedInUserId,\r\n            id: id,\r\n            messagePollMin: messagePollMin,\r\n            messagePollMax: messagePollMax,\r\n            messagePollAfterMax: messagePollAfterMax,\r\n            name: null,\r\n            subname: null,\r\n            type: null,\r\n            totalMemberCount: null,\r\n            imageUrl: null,\r\n            isFavourite: null,\r\n            isMuted: null,\r\n            canDeleteMessagesForAllUsers: false,\r\n            deleteMessagesForAllUsers: false,\r\n            members: {},\r\n            messages: [],\r\n            hasTriedToLoadMessages: false,\r\n            loadingMessages: true,\r\n            loadingMembers: true,\r\n            loadingConfirmAction: false,\r\n            pendingBlockUserIds: [],\r\n            pendingUnblockUserIds: [],\r\n            pendingRemoveContactIds: [],\r\n            pendingAddContactIds: [],\r\n            pendingDeleteMessageIds: [],\r\n            pendingSendMessageIds: [],\r\n            pendingDeleteConversation: false,\r\n            selectedMessageIds: [],\r\n            showEmojiAutoComplete: false,\r\n            showEmojiPicker: false\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Add messages to a state and sort them by timecreated.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} messages Messages to add to state.\r\n     * @return {Object} state New state with added messages.\r\n     */\r\n    var addMessages = function(state, messages) {\r\n        var newState = cloneState(state);\r\n        var formattedMessages = formatMessages(messages, state.loggedInUserId, state.members);\r\n        formattedMessages = formattedMessages.map(function(message) {\r\n            message.sendState = null;\r\n            message.timeAdded = Date.now();\r\n            message.errorMessage = null;\r\n            return message;\r\n        });\r\n        var allMessages = state.messages.concat(formattedMessages);\r\n        // Sort the messages. Oldest to newest.\r\n        allMessages.sort(function(a, b) {\r\n            if (a.timeCreated === null && b.timeCreated === null) {\r\n                if (a.timeAdded < b.timeAdded) {\r\n                    return -1;\r\n                } else if (a.timeAdded > b.timeAdded) {\r\n                    return 1;\r\n                }\r\n            }\r\n\r\n            if (a.timeCreated === null && b.timeCreated !== null) {\r\n                // A comes after b.\r\n                return 1;\r\n            } else if (a.timeCreated !== null && b.timeCreated === null) {\r\n                // A comes before b.\r\n                return -1;\r\n            } else if (a.timeCreated < b.timeCreated) {\r\n                // A comes before b.\r\n                return -1;\r\n            } else if (a.timeCreated > b.timeCreated) {\r\n                // A comes after b.\r\n                return 1;\r\n            } else if (a.id < b.id) {\r\n                return -1;\r\n            } else if (a.id > b.id) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n\r\n        // Filter out any duplicate messages.\r\n        newState.messages = allMessages.filter(function(message, index, sortedMessages) {\r\n            return !index || message.id != sortedMessages[index - 1].id;\r\n        });\r\n\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Update existing messages.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} data 2D array of old and new messages\r\n     * @return {Object} state.\r\n     */\r\n    var updateMessages = function(state, data) {\r\n        var newState = cloneState(state);\r\n        var updatesById = data.reduce(function(carry, messageData) {\r\n            var oldMessage = messageData[0];\r\n            var newMessage = messageData[1];\r\n            var formattedMessages = formatMessages([newMessage], state.loggedInUserId, state.members);\r\n            var formattedMessage = formattedMessages[0];\r\n\r\n            carry[oldMessage.id] = formattedMessage;\r\n            return carry;\r\n        }, {});\r\n\r\n        newState.messages = newState.messages.map(function(message) {\r\n            if (message.id in updatesById) {\r\n                return $.extend(message, updatesById[message.id]);\r\n            } else {\r\n                return message;\r\n            }\r\n        });\r\n\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Remove messages from state.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} messages Messages to remove from state.\r\n     * @return {Object} state New state with removed messages.\r\n     */\r\n    var removeMessages = function(state, messages) {\r\n        var newState = cloneState(state);\r\n        var removeMessageIds = messages.map(function(message) {\r\n            return \"\" + message.id;\r\n        });\r\n        newState.messages = newState.messages.filter(function(message) {\r\n            return removeMessageIds.indexOf(message.id) < 0;\r\n        });\r\n\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Remove messages from state by message id.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} messageIds Message ids to remove from state.\r\n     * @return {Object} state New state with removed messages.\r\n     */\r\n    var removeMessagesById = function(state, messageIds) {\r\n        var newState = cloneState(state);\r\n        messageIds = messageIds.map(function(id) {\r\n            return \"\" + id;\r\n        });\r\n        newState.messages = newState.messages.filter(function(message) {\r\n            return messageIds.indexOf(message.id) < 0;\r\n        });\r\n\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Add conversation member to state.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} members Conversation members to be added to state.\r\n     * @return {Object} New state with added members.\r\n     */\r\n    var addMembers = function(state, members) {\r\n        var newState = cloneState(state);\r\n        var formattedMembers = formatMembers(members);\r\n        formattedMembers.forEach(function(member) {\r\n            newState.members[member.id] = member;\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Remove members from state.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} members Members to be removed from state.\r\n     * @return {Object} New state with removed members.\r\n     */\r\n    var removeMembers = function(state, members) {\r\n        var newState = cloneState(state);\r\n        members.forEach(function(member) {\r\n            delete newState.members[member.id];\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state loading messages attribute.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Bool} value New loading messages value.\r\n     * @return {Object} New state with loading messages attribute.\r\n     */\r\n    var setLoadingMessages = function(state, value) {\r\n        var newState = cloneState(state);\r\n        newState.loadingMessages = value;\r\n        if (state.loadingMessages && !value) {\r\n            // If we're going from loading to not loading then\r\n            // it means we've tried to load.\r\n            newState.hasTriedToLoadMessages = true;\r\n        }\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state loading members attribute.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Bool} value New loading members value.\r\n     * @return {Object} New state with loading members attribute.\r\n     */\r\n    var setLoadingMembers = function(state, value) {\r\n        var newState = cloneState(state);\r\n        newState.loadingMembers = value;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the conversation id.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {String} value The ID.\r\n     * @return {Object} New state.\r\n     */\r\n    var setId = function(state, value) {\r\n        var newState = cloneState(state);\r\n        newState.id = value;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state name attribute.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {String} value New name value.\r\n     * @return {Object} New state with name attribute.\r\n     */\r\n    var setName = function(state, value) {\r\n        var newState = cloneState(state);\r\n        newState.name = value;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state subname attribute.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {String} value New subname value.\r\n     * @return {Object} New state.\r\n     */\r\n    var setSubname = function(state, value) {\r\n        var newState = cloneState(state);\r\n        newState.subname = value;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the conversation type.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Int} type Conversation type.\r\n     * @return {Object} New state.\r\n     */\r\n    var setType = function(state, type) {\r\n        var newState = cloneState(state);\r\n        newState.type = type;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set whether the conversation is a favourite conversation.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Bool} isFavourite If it's a favourite.\r\n     * @return {Object} New state.\r\n     */\r\n    var setIsFavourite = function(state, isFavourite) {\r\n        var newState = cloneState(state);\r\n        newState.isFavourite = isFavourite;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set whether the conversation is a muted conversation.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {bool} isMuted If it's muted.\r\n     * @return {Object} New state.\r\n     */\r\n    var setIsMuted = function(state, isMuted) {\r\n        var newState = cloneState(state);\r\n        newState.isMuted = isMuted;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the total member count.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {String} count The count.\r\n     * @return {Object} New state.\r\n     */\r\n    var setTotalMemberCount = function(state, count) {\r\n        var newState = cloneState(state);\r\n        newState.totalMemberCount = count;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the conversation image url.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {String} url The url to the image.\r\n     * @return {Object} New state.\r\n     */\r\n    var setImageUrl = function(state, url) {\r\n        var newState = cloneState(state);\r\n        newState.imageUrl = url;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state loading confirm action attribute.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Bool} value New loading confirm action value.\r\n     * @return {Object} New state with loading confirm action attribute.\r\n     */\r\n    var setLoadingConfirmAction = function(state, value) {\r\n        var newState = cloneState(state);\r\n        newState.loadingConfirmAction = value;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state pending delete conversation attribute.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Bool} value New pending delete conversation value.\r\n     * @return {Object} New state with pending delete conversation attribute.\r\n     */\r\n    var setPendingDeleteConversation = function(state, value) {\r\n        var newState = cloneState(state);\r\n        newState.pendingDeleteConversation = value;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state of message to pending.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} messageIds Messages to delete.\r\n     * @return {Object} New state with array of pending delete message ids.\r\n     */\r\n    var setMessagesSendPendingById = function(state, messageIds) {\r\n        var newState = cloneState(state);\r\n        messageIds = messageIds.map(function(id) {\r\n            return \"\" + id;\r\n        });\r\n        newState.messages.forEach(function(message) {\r\n            if (messageIds.indexOf(message.id) >= 0) {\r\n                message.sendState = 'pending';\r\n                message.errorMessage = null;\r\n            }\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state of message to sent.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} messageIds Messages to delete.\r\n     * @return {Object} New state with array of pending delete message ids.\r\n     */\r\n    var setMessagesSendSuccessById = function(state, messageIds) {\r\n        var newState = cloneState(state);\r\n        messageIds = messageIds.map(function(id) {\r\n            return \"\" + id;\r\n        });\r\n        newState.messages.forEach(function(message) {\r\n            if (messageIds.indexOf(message.id) >= 0) {\r\n                message.sendState = 'sent';\r\n                message.errorMessage = null;\r\n            }\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state of messages to error.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} messageIds Messages to delete.\r\n     * @param  {string} errorMessage\r\n     * @return {Object} New state with array of pending delete message ids.\r\n     */\r\n    var setMessagesSendFailById = function(state, messageIds, errorMessage) {\r\n        var newState = cloneState(state);\r\n        messageIds = messageIds.map(function(id) {\r\n            return \"\" + id;\r\n        });\r\n        newState.messages.forEach(function(message) {\r\n            if (messageIds.indexOf(message.id) >= 0) {\r\n                message.sendState = 'error';\r\n                message.errorMessage = errorMessage;\r\n            }\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the visibility of the emoji picker.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Bool} show Should the emoji picker be shown.\r\n     * @return {Object} New state with array of pending delete message ids.\r\n     */\r\n    var setShowEmojiPicker = function(state, show) {\r\n        var newState = cloneState(state);\r\n        newState.showEmojiPicker = show;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set whether emojis auto complete suggestions should be shown.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Bool} show Show the autocomplete\r\n     * @return {Object} New state with array of pending delete message ids.\r\n     */\r\n    var setShowEmojiAutoComplete = function(state, show) {\r\n        var newState = cloneState(state);\r\n        newState.showEmojiAutoComplete = show;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state pending block userids.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} userIds User ids to block.\r\n     * @return {Object} New state with array of pending block userids.\r\n     */\r\n    var addPendingBlockUsersById = function(state, userIds) {\r\n        var newState = cloneState(state);\r\n        userIds.forEach(function(id) {\r\n            newState.pendingBlockUserIds.push(id);\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state pending remove userids.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} userIds User ids to remove.\r\n     * @return {Object} New state with array of pending remove userids.\r\n     */\r\n    var addPendingRemoveContactsById = function(state, userIds) {\r\n        var newState = cloneState(state);\r\n        userIds.forEach(function(id) {\r\n            newState.pendingRemoveContactIds.push(id);\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state pending unblock userids.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} userIds User ids to unblock.\r\n     * @return {Object} New state with array of pending unblock userids.\r\n     */\r\n    var addPendingUnblockUsersById = function(state, userIds) {\r\n        var newState = cloneState(state);\r\n        userIds.forEach(function(id) {\r\n            newState.pendingUnblockUserIds.push(id);\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state pending add users to contacts userids.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} userIds User ids to add users to contacts.\r\n     * @return {Object} New state with array of pending add users to contacts userids.\r\n     */\r\n    var addPendingAddContactsById = function(state, userIds) {\r\n        var newState = cloneState(state);\r\n        userIds.forEach(function(id) {\r\n            newState.pendingAddContactIds.push(id);\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set the state pending delete messages.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} messageIds Messages to delete.\r\n     * @return {Object} New state with array of pending delete message ids.\r\n     */\r\n    var addPendingDeleteMessagesById = function(state, messageIds) {\r\n        var newState = cloneState(state);\r\n        messageIds.forEach(function(id) {\r\n            newState.pendingDeleteMessageIds.push(id);\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Update the state pending block userids.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} userIds User ids to remove from the list of user ids to block.\r\n     * @return {Object} New state with array of pending block userids.\r\n     */\r\n    var removePendingBlockUsersById = function(state, userIds) {\r\n        var newState = cloneState(state);\r\n        newState.pendingBlockUserIds = newState.pendingBlockUserIds.filter(function(id) {\r\n            return userIds.indexOf(id) < 0;\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Update the state pending remove userids.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} userIds User ids to remove from the list of user ids to remove.\r\n     * @return {Object} New state with array of pending remove userids.\r\n     */\r\n    var removePendingRemoveContactsById = function(state, userIds) {\r\n        var newState = cloneState(state);\r\n        newState.pendingRemoveContactIds = newState.pendingRemoveContactIds.filter(function(id) {\r\n            return userIds.indexOf(id) < 0;\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Update the state pending unblock userids.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} userIds User ids to remove from the list of user ids to unblock.\r\n     * @return {Object} New state with array of pending unblock userids.\r\n     */\r\n    var removePendingUnblockUsersById = function(state, userIds) {\r\n        var newState = cloneState(state);\r\n        newState.pendingUnblockUserIds = newState.pendingUnblockUserIds.filter(function(id) {\r\n            return userIds.indexOf(id) < 0;\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Update the state pending add to contacts userids.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} userIds User ids to remove from the list of user ids to add to contacts.\r\n     * @return {Object} New state with array of pending add to contacts userids.\r\n     */\r\n    var removePendingAddContactsById = function(state, userIds) {\r\n        var newState = cloneState(state);\r\n        newState.pendingAddContactIds = newState.pendingAddContactIds.filter(function(id) {\r\n            return userIds.indexOf(id) < 0;\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Update the state pending delete messages userids.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} messageIds Message ids to remove from the list of messages to delete.\r\n     * @return {Object} New state with array of messages to delete.\r\n     */\r\n    var removePendingDeleteMessagesById = function(state, messageIds) {\r\n        var newState = cloneState(state);\r\n        messageIds = messageIds.map(function(id) {\r\n            return \"\" + id;\r\n        });\r\n        newState.pendingDeleteMessageIds = newState.pendingDeleteMessageIds.filter(function(id) {\r\n            return messageIds.indexOf(id) < 0;\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Add messages to state selected messages.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} messageIds Messages that are selected.\r\n     * @return {Object} New state with array of not blocked members.\r\n     */\r\n    var addSelectedMessagesById = function(state, messageIds) {\r\n        var newState = cloneState(state);\r\n        messageIds = messageIds.map(function(id) {\r\n            return \"\" + id;\r\n        });\r\n        newState.selectedMessageIds = newState.selectedMessageIds.concat(messageIds);\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Remove messages from the state selected messages.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} messageIds Messages to remove from selected messages.\r\n     * @return {Object} New state with array of selected messages.\r\n     */\r\n    var removeSelectedMessagesById = function(state, messageIds) {\r\n        var newState = cloneState(state);\r\n        messageIds = messageIds.map(function(id) {\r\n            return \"\" + id;\r\n        });\r\n        newState.selectedMessageIds = newState.selectedMessageIds.filter(function(id) {\r\n            return messageIds.indexOf(id) < 0;\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Mark messages as read.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} readMessages Messages that are read.\r\n     * @return {Object} New state with array of messages that have the isread attribute set.\r\n     */\r\n    var markMessagesAsRead = function(state, readMessages) {\r\n        var newState = cloneState(state);\r\n        var readMessageIds = readMessages.map(function(message) {\r\n            return message.id;\r\n        });\r\n        newState.messages = newState.messages.map(function(message) {\r\n            if (readMessageIds.indexOf(message.id) >= 0) {\r\n                message.isRead = true;\r\n            }\r\n\r\n            return message;\r\n        });\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Add a contact request to each of the members that the request is for.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} requests The contact requests\r\n     * @return {Object} New state\r\n     */\r\n    var addContactRequests = function(state, requests) {\r\n        var newState = cloneState(state);\r\n\r\n        requests.forEach(function(request) {\r\n            var fromUserId = request.userid;\r\n            var toUserId = request.requesteduserid;\r\n            newState.members[fromUserId].contactrequests.push(request);\r\n            newState.members[toUserId].contactrequests.push(request);\r\n        });\r\n\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Remove a contact request from the members of that request.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Array} requests The contact requests\r\n     * @return {Object} New state\r\n     */\r\n    var removeContactRequests = function(state, requests) {\r\n        var newState = cloneState(state);\r\n        requests.forEach(function(request) {\r\n            var fromUserId = request.userid;\r\n            var toUserId = request.requesteduserid;\r\n\r\n            newState.members[fromUserId].contactrequests = newState.members[fromUserId].contactrequests.filter(function(existing) {\r\n                return existing.userid != fromUserId;\r\n            });\r\n            newState.members[toUserId].contactrequests = newState.members[toUserId].contactrequests.filter(function(existing) {\r\n                return existing.requesteduserid != toUserId;\r\n            });\r\n        });\r\n\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set wheter the message of the conversation can delete for all users.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Bool} value If it can delete for all users.\r\n     * @return {Object} New state.\r\n     */\r\n    var setCanDeleteMessagesForAllUsers = function(state, value) {\r\n        var newState = cloneState(state);\r\n        newState.canDeleteMessagesForAllUsers = value;\r\n        return newState;\r\n    };\r\n\r\n    /**\r\n     * Set wheter the messages of the conversation delete for all users.\r\n     *\r\n     * @param  {Object} state Current state.\r\n     * @param  {Bool} value Delete messages for all users.\r\n     * @return {Object} New state.\r\n     */\r\n    var setDeleteMessagesForAllUsers = function(state, value) {\r\n        var newState = cloneState(state);\r\n        newState.deleteMessagesForAllUsers = value;\r\n        return newState;\r\n    };\r\n\r\n    return {\r\n        buildInitialState: buildInitialState,\r\n        addMessages: addMessages,\r\n        updateMessages: updateMessages,\r\n        removeMessages: removeMessages,\r\n        removeMessagesById: removeMessagesById,\r\n        addMembers: addMembers,\r\n        removeMembers: removeMembers,\r\n        setLoadingMessages: setLoadingMessages,\r\n        setLoadingMembers: setLoadingMembers,\r\n        setId: setId,\r\n        setName: setName,\r\n        setSubname: setSubname,\r\n        setType: setType,\r\n        setIsFavourite: setIsFavourite,\r\n        setIsMuted: setIsMuted,\r\n        setCanDeleteMessagesForAllUsers: setCanDeleteMessagesForAllUsers,\r\n        setDeleteMessagesForAllUsers: setDeleteMessagesForAllUsers,\r\n        setTotalMemberCount: setTotalMemberCount,\r\n        setImageUrl: setImageUrl,\r\n        setLoadingConfirmAction: setLoadingConfirmAction,\r\n        setPendingDeleteConversation: setPendingDeleteConversation,\r\n        setMessagesSendPendingById: setMessagesSendPendingById,\r\n        setMessagesSendSuccessById: setMessagesSendSuccessById,\r\n        setMessagesSendFailById: setMessagesSendFailById,\r\n        setShowEmojiAutoComplete: setShowEmojiAutoComplete,\r\n        setShowEmojiPicker: setShowEmojiPicker,\r\n        addPendingBlockUsersById: addPendingBlockUsersById,\r\n        addPendingRemoveContactsById: addPendingRemoveContactsById,\r\n        addPendingUnblockUsersById: addPendingUnblockUsersById,\r\n        addPendingAddContactsById: addPendingAddContactsById,\r\n        addPendingDeleteMessagesById: addPendingDeleteMessagesById,\r\n        removePendingBlockUsersById: removePendingBlockUsersById,\r\n        removePendingRemoveContactsById: removePendingRemoveContactsById,\r\n        removePendingUnblockUsersById: removePendingUnblockUsersById,\r\n        removePendingAddContactsById: removePendingAddContactsById,\r\n        removePendingDeleteMessagesById: removePendingDeleteMessagesById,\r\n        addSelectedMessagesById: addSelectedMessagesById,\r\n        removeSelectedMessagesById: removeSelectedMessagesById,\r\n        markMessagesAsRead: markMessagesAsRead,\r\n        addContactRequests: addContactRequests,\r\n        removeContactRequests: removeContactRequests\r\n    };\r\n});\r\n"],"names":["define","$","cloneState","state","extend","formatMessages","messages","loggedInUserId","members","map","message","fromLoggedInUser","useridfrom","id","userFrom","text","timeCreated","timecreated","parseInt","buildInitialState","midnight","messagePollMin","messagePollMax","messagePollAfterMax","name","subname","type","totalMemberCount","imageUrl","isFavourite","isMuted","canDeleteMessagesForAllUsers","deleteMessagesForAllUsers","hasTriedToLoadMessages","loadingMessages","loadingMembers","loadingConfirmAction","pendingBlockUserIds","pendingUnblockUserIds","pendingRemoveContactIds","pendingAddContactIds","pendingDeleteMessageIds","pendingSendMessageIds","pendingDeleteConversation","selectedMessageIds","showEmojiAutoComplete","showEmojiPicker","addMessages","newState","formattedMessages","sendState","timeAdded","Date","now","errorMessage","allMessages","concat","sort","a","b","filter","index","sortedMessages","updateMessages","data","updatesById","reduce","carry","messageData","oldMessage","newMessage","formattedMessage","removeMessages","removeMessageIds","indexOf","removeMessagesById","messageIds","addMembers","formattedMembers","member","fullname","profileurl","profileimageurl","profileimageurlsmall","isonline","showonlinestatus","isblocked","iscontact","isdeleted","canmessage","canmessageevenifblocked","requirescontact","contactrequests","formatMembers","forEach","removeMembers","setLoadingMessages","value","setLoadingMembers","setId","setName","setSubname","setType","setIsFavourite","setIsMuted","setCanDeleteMessagesForAllUsers","setDeleteMessagesForAllUsers","setTotalMemberCount","count","setImageUrl","url","setLoadingConfirmAction","setPendingDeleteConversation","setMessagesSendPendingById","setMessagesSendSuccessById","setMessagesSendFailById","setShowEmojiAutoComplete","show","setShowEmojiPicker","addPendingBlockUsersById","userIds","push","addPendingRemoveContactsById","addPendingUnblockUsersById","addPendingAddContactsById","addPendingDeleteMessagesById","removePendingBlockUsersById","removePendingRemoveContactsById","removePendingUnblockUsersById","removePendingAddContactsById","removePendingDeleteMessagesById","addSelectedMessagesById","removeSelectedMessagesById","markMessagesAsRead","readMessages","readMessageIds","isRead","addContactRequests","requests","request","fromUserId","userid","toUserId","requesteduserid","removeContactRequests","existing"],"mappings":"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"}