{"version":3,"file":"notification_processor_settings.min.js","sources":["../src/notification_processor_settings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Load the settings for a message processor.\r\n *\r\n * @module     core_message/notification_processor_settings\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n        'jquery',\r\n        'core/ajax',\r\n        'core/str',\r\n        'core/notification',\r\n        'core/custom_interaction_events',\r\n        'core/modal',\r\n        'core/modal_registry',\r\n        'core/fragment',\r\n        ],\r\n        function(\r\n            $,\r\n            Ajax,\r\n            Str,\r\n            Notification,\r\n            CustomEvents,\r\n            Modal,\r\n            ModalRegistry,\r\n            Fragment\r\n        ) {\r\n\r\n    var registered = false;\r\n    var SELECTORS = {\r\n        SAVE_BUTTON: '[data-action=\"save\"]',\r\n        CANCEL_BUTTON: '[data-action=\"cancel\"]',\r\n        PROCESSOR: '[data-processor-name]',\r\n        PREFERENCE_ROW: '[data-region=\"preference-row\"]',\r\n    };\r\n\r\n    /**\r\n     * Constructor for the Modal.\r\n     *\r\n     * @class\r\n     * @param {object} root The root jQuery element for the modal.\r\n     */\r\n    var NotificationProcessorSettings = function(root) {\r\n        Modal.call(this, root);\r\n        this.name = null;\r\n        this.userId = null;\r\n        this.contextId = null;\r\n        this.element = null;\r\n        this.saveButton = this.getFooter().find(SELECTORS.SAVE_BUTTON);\r\n        this.cancelButton = this.getFooter().find(SELECTORS.CANCEL_BUTTON);\r\n    };\r\n\r\n    NotificationProcessorSettings.TYPE = 'core_message-notification_processor_settings';\r\n    NotificationProcessorSettings.prototype = Object.create(Modal.prototype);\r\n    NotificationProcessorSettings.prototype.constructor = NotificationProcessorSettings;\r\n\r\n    /**\r\n     * Set the userid to the given value.\r\n     *\r\n     * @method setUserId\r\n     * @param {int} id The notification userid\r\n     */\r\n    NotificationProcessorSettings.prototype.setUserId = function(id) {\r\n        this.userId = id;\r\n    };\r\n\r\n    /**\r\n     * Retrieve the current userid, if any.\r\n     *\r\n     * @method getUserId\r\n     * @return {int|null} The notification userid\r\n     */\r\n    NotificationProcessorSettings.prototype.getUserId = function() {\r\n        return this.userId;\r\n    };\r\n\r\n    /**\r\n     * Set the object to the given value.\r\n     *\r\n     * @method setElement\r\n     * @param {object} element The notification node element.\r\n     */\r\n    NotificationProcessorSettings.prototype.setElement = function(element) {\r\n        this.element = element;\r\n    };\r\n\r\n    /**\r\n     * Retrieve the current element, if any.\r\n     *\r\n     * @method getElement\r\n     * @return {object|null} The notification node element.\r\n     */\r\n    NotificationProcessorSettings.prototype.getElement = function() {\r\n        return this.element;\r\n    };\r\n\r\n    /**\r\n     * Set the name to the given value.\r\n     *\r\n     * @method setName\r\n     * @param {string} name The notification name.\r\n     */\r\n    NotificationProcessorSettings.prototype.setName = function(name) {\r\n        this.name = name;\r\n    };\r\n\r\n    /**\r\n     * Retrieve the current name, if any.\r\n     *\r\n     * @method getName\r\n     * @return {string|null} The notification name.\r\n     */\r\n    NotificationProcessorSettings.prototype.getName = function() {\r\n        return this.name;\r\n    };\r\n    /**\r\n     * Set the context id to the given value.\r\n     *\r\n     * @method setContextId\r\n     * @param {Number} id The notification context id\r\n     */\r\n    NotificationProcessorSettings.prototype.setContextId = function(id) {\r\n        this.contextId = id;\r\n    };\r\n\r\n    /**\r\n     * Retrieve the current context id, if any.\r\n     *\r\n     * @method getContextId\r\n     * @return {Number|null} The notification context id\r\n     */\r\n    NotificationProcessorSettings.prototype.getContextId = function() {\r\n        return this.contextId;\r\n    };\r\n\r\n    /**\r\n     * Get the form element from the modal.\r\n     *\r\n     * @method getForm\r\n     * @return {object}\r\n     */\r\n    NotificationProcessorSettings.prototype.getForm = function() {\r\n        return this.getBody().find('form');\r\n    };\r\n\r\n    /**\r\n     * Disable the buttons in the footer.\r\n     *\r\n     * @method disableButtons\r\n     */\r\n    NotificationProcessorSettings.prototype.disableButtons = function() {\r\n        this.saveButton.prop('disabled', true);\r\n        this.cancelButton.prop('disabled', true);\r\n    };\r\n\r\n    /**\r\n     * Enable the buttons in the footer.\r\n     *\r\n     * @method enableButtons\r\n     */\r\n    NotificationProcessorSettings.prototype.enableButtons = function() {\r\n        this.saveButton.prop('disabled', false);\r\n        this.cancelButton.prop('disabled', false);\r\n    };\r\n\r\n    /**\r\n     * Load the title for the modal to the appropriate value\r\n     * depending on message outputs.\r\n     *\r\n     * @method loadTitleContent\r\n     * @return {object} A promise resolved with the new title text.\r\n     */\r\n    NotificationProcessorSettings.prototype.loadTitleContent = function() {\r\n        this.titlePromise = Str.get_string('processorsettings', 'message');\r\n        this.setTitle(this.titlePromise);\r\n\r\n        return this.titlePromise;\r\n    };\r\n\r\n    /**\r\n     * Load the body for the modal to the appropriate value\r\n     * depending on message outputs.\r\n     *\r\n     * @method loadBodyContent\r\n     * @return {object} A promise resolved with the fragment html and js from\r\n     */\r\n    NotificationProcessorSettings.prototype.loadBodyContent = function() {\r\n        this.disableButtons();\r\n\r\n        var args = {\r\n            userid: this.getUserId(),\r\n            type: this.getName(),\r\n        };\r\n\r\n        this.bodyPromise = Fragment.loadFragment('message', 'processor_settings', this.getContextId(), args);\r\n        this.setBody(this.bodyPromise);\r\n\r\n        this.bodyPromise.then(function() {\r\n            this.enableButtons();\r\n            return;\r\n        }.bind(this))\r\n        .fail(Notification.exception);\r\n\r\n        return this.bodyPromise;\r\n    };\r\n\r\n    /**\r\n     * Load both the title and body content.\r\n     *\r\n     * @method loadAllContent\r\n     * @return {object} promise\r\n     */\r\n    NotificationProcessorSettings.prototype.loadAllContent = function() {\r\n        return $.when(this.loadTitleContent(), this.loadBodyContent());\r\n    };\r\n\r\n    /**\r\n     * Load the modal content before showing it. This\r\n     * is to allow us to re-use the same modal for creating and\r\n     * editing different message outputs within the page.\r\n     *\r\n     * @method show\r\n     */\r\n    NotificationProcessorSettings.prototype.show = function() {\r\n        this.loadAllContent();\r\n        Modal.prototype.show.call(this);\r\n    };\r\n\r\n    /**\r\n     * Clear the notification from the modal when it's closed so\r\n     * that it is loaded fresh next time it's displayed.\r\n     *\r\n     * @method hide\r\n     */\r\n    NotificationProcessorSettings.prototype.hide = function() {\r\n        Modal.prototype.hide.call(this);\r\n        this.setContextId(null);\r\n        this.setName(null);\r\n        this.setUserId(null);\r\n    };\r\n\r\n    /**\r\n     * Checks if the processor has been configured. If so then remove the unconfigured\r\n     * status from the interface.\r\n     *\r\n     * @method updateConfiguredStatus\r\n     * @return {Promise|boolean}\r\n     */\r\n    NotificationProcessorSettings.prototype.updateConfiguredStatus = function() {\r\n        var processorHeader = $(this.getElement()).closest(SELECTORS.PROCESSOR);\r\n\r\n        if (!processorHeader.hasClass('unconfigured')) {\r\n            return false;\r\n        }\r\n\r\n        var processorName = processorHeader.attr('data-processor-name');\r\n        var request = {\r\n            methodname: 'core_message_get_message_processor',\r\n            args: {\r\n                name: processorName,\r\n                userid: this.userId,\r\n            },\r\n        };\r\n\r\n        return Ajax.call([request])[0]\r\n            .fail(Notification.exception)\r\n            .done(function(result) {\r\n                // Check if the user has figured configuring the processor.\r\n                if (result.userconfigured) {\r\n                    // If they have then we can enable the settings.\r\n                    var notifications = $(SELECTORS.PREFERENCE_ROW + ' [data-processor-name=\"' + processorName + '\"]');\r\n                    processorHeader.removeClass('unconfigured');\r\n                    notifications.removeClass('disabled');\r\n                }\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Set up all of the event handling for the modal.\r\n     *\r\n     * @method registerEventListeners\r\n     */\r\n    NotificationProcessorSettings.prototype.registerEventListeners = function() {\r\n        // Apply parent event listeners.\r\n        Modal.prototype.registerEventListeners.call(this);\r\n\r\n        // When the user clicks the save button we trigger the form submission.\r\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.SAVE_BUTTON, function(e, data) {\r\n            this.getForm().submit();\r\n            data.originalEvent.preventDefault();\r\n        }.bind(this));\r\n\r\n        this.getModal().on('mpp:formsubmitted', function(e) {\r\n            this.hide();\r\n            this.updateConfiguredStatus();\r\n            e.stopPropagation();\r\n        }.bind(this));\r\n\r\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.CANCEL_BUTTON, function(e, data) {\r\n            this.hide();\r\n            data.originalEvent.preventDefault();\r\n            e.stopPropagation();\r\n        }.bind(this));\r\n    };\r\n\r\n    // Automatically register with the modal registry the first time this module is imported\r\n    // so that you can create modals\r\n    // of this type using the modal factory.\r\n    if (!registered) {\r\n        ModalRegistry.register(\r\n                                NotificationProcessorSettings.TYPE,\r\n                                NotificationProcessorSettings,\r\n                                'core/modal_save_cancel');\r\n        registered = true;\r\n    }\r\n\r\n    return NotificationProcessorSettings;\r\n});\r\n"],"names":["define","$","Ajax","Str","Notification","CustomEvents","Modal","ModalRegistry","Fragment","registered","SELECTORS","NotificationProcessorSettings","root","call","this","name","userId","contextId","element","saveButton","getFooter","find","cancelButton","TYPE","prototype","Object","create","constructor","setUserId","id","getUserId","setElement","getElement","setName","getName","setContextId","getContextId","getForm","getBody","disableButtons","prop","enableButtons","loadTitleContent","titlePromise","get_string","setTitle","loadBodyContent","args","userid","type","bodyPromise","loadFragment","setBody","then","bind","fail","exception","loadAllContent","when","show","hide","updateConfiguredStatus","processorHeader","closest","hasClass","processorName","attr","request","methodname","done","result","userconfigured","notifications","removeClass","registerEventListeners","getModal","on","events","activate","e","data","submit","originalEvent","preventDefault","stopPropagation","register"],"mappings":"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"}