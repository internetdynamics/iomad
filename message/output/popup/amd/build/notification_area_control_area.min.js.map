{"version":3,"file":"notification_area_control_area.min.js","sources":["../src/notification_area_control_area.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Controls the notification area on the notification page.\r\n *\r\n * @module     message_popup/notification_area_control_area\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/templates', 'core/notification', 'core/custom_interaction_events',\r\n        'message_popup/notification_repository', 'message_popup/notification_area_events'],\r\n    function($, Templates, DebugNotification, CustomEvents, NotificationRepo, NotificationAreaEvents) {\r\n\r\n    var SELECTORS = {\r\n        CONTAINER: '[data-region=\"notification-area\"]',\r\n        CONTENT: '[data-region=\"content\"]',\r\n        NOTIFICATION: '[data-region=\"notification-content-item-container\"]',\r\n        CAN_RECEIVE_FOCUS: 'input:not([type=\"hidden\"]), a[href], button, textarea, select, [tabindex]',\r\n    };\r\n\r\n    var TEMPLATES = {\r\n        NOTIFICATION: 'message_popup/notification_content_item',\r\n    };\r\n\r\n    /**\r\n     * Constructor for ControlArea\r\n     *\r\n     * @class\r\n     * @param {object} root The root element for the content area\r\n     * @param {int} userId The user id of the current user\r\n     */\r\n    var ControlArea = function(root, userId) {\r\n        this.root = $(root);\r\n        this.container = this.root.closest(SELECTORS.CONTAINER);\r\n        this.userId = userId;\r\n        this.content = this.root.find(SELECTORS.CONTENT);\r\n        this.offset = 0;\r\n        this.limit = 20;\r\n        this.initialLoad = false;\r\n        this.isLoading = false;\r\n        this.loadedAll = false;\r\n        this.notifications = {};\r\n\r\n        this.registerEventListeners();\r\n    };\r\n\r\n    /**\r\n     * Get the root element.\r\n     *\r\n     * @method getRoot\r\n     * @return {object} jQuery element\r\n     */\r\n    ControlArea.prototype.getRoot = function() {\r\n        return this.root;\r\n    };\r\n\r\n    /**\r\n     * Get the container element (which the control area is within).\r\n     *\r\n     * @method getContainer\r\n     * @return {object} jQuery element\r\n     */\r\n    ControlArea.prototype.getContainer = function() {\r\n        return this.container;\r\n    };\r\n\r\n    /**\r\n     * Get the user id.\r\n     *\r\n     * @method getUserId\r\n     * @return {int}\r\n     */\r\n    ControlArea.prototype.getUserId = function() {\r\n        return this.userId;\r\n    };\r\n\r\n    /**\r\n     * Get the control area content element.\r\n     *\r\n     * @method getContent\r\n     * @return {object} jQuery element\r\n     */\r\n    ControlArea.prototype.getContent = function() {\r\n        return this.content;\r\n    };\r\n\r\n    /**\r\n     * Get the offset value for paginated loading of the\r\n     * notifications.\r\n     *\r\n     * @method getOffset\r\n     * @return {int}\r\n     */\r\n    ControlArea.prototype.getOffset = function() {\r\n        return this.offset;\r\n    };\r\n\r\n    /**\r\n     * Get the limit value for the paginated loading of the\r\n     * notifications.\r\n     *\r\n     * @method getLimit\r\n     * @return {int}\r\n     */\r\n    ControlArea.prototype.getLimit = function() {\r\n        return this.limit;\r\n    };\r\n\r\n    /**\r\n     * Set the offset value for the paginated loading of the\r\n     * notifications.\r\n     *\r\n     * @method setOffset\r\n     * @param {int} value The new offset value\r\n     */\r\n    ControlArea.prototype.setOffset = function(value) {\r\n        this.offset = value;\r\n    };\r\n\r\n    /**\r\n     * Set the limit value for the paginated loading of the\r\n     * notifications.\r\n     *\r\n     * @method setLimit\r\n     * @param {int} value The new limit value\r\n     */\r\n    ControlArea.prototype.setLimit = function(value) {\r\n        this.limit = value;\r\n    };\r\n\r\n    /**\r\n     * Increment the offset by the limit amount.\r\n     *\r\n     * @method incrementOffset\r\n     */\r\n    ControlArea.prototype.incrementOffset = function() {\r\n        this.offset += this.limit;\r\n    };\r\n\r\n    /**\r\n     * Flag the control area as loading.\r\n     *\r\n     * @method startLoading\r\n     */\r\n    ControlArea.prototype.startLoading = function() {\r\n        this.isLoading = true;\r\n        this.getRoot().addClass('loading');\r\n    };\r\n\r\n    /**\r\n     * Remove the loading flag from the control area.\r\n     *\r\n     * @method stopLoading\r\n     */\r\n    ControlArea.prototype.stopLoading = function() {\r\n        this.isLoading = false;\r\n        this.getRoot().removeClass('loading');\r\n    };\r\n\r\n    /**\r\n     * Check if the first load of notifications has been triggered.\r\n     *\r\n     * @method hasDoneInitialLoad\r\n     * @return {bool} true if first notification loaded, false otherwise\r\n     */\r\n    ControlArea.prototype.hasDoneInitialLoad = function() {\r\n        return this.initialLoad;\r\n    };\r\n\r\n    /**\r\n     * Check if all of the notifications have been loaded.\r\n     *\r\n     * @method hasLoadedAllContent\r\n     * @return {bool}\r\n     */\r\n    ControlArea.prototype.hasLoadedAllContent = function() {\r\n        return this.loadedAll;\r\n    };\r\n\r\n    /**\r\n     * Set the state of the loaded all content property.\r\n     *\r\n     * @method setLoadedAllContent\r\n     * @param {bool} val True if all content is loaded, false otherwise\r\n     */\r\n    ControlArea.prototype.setLoadedAllContent = function(val) {\r\n        this.loadedAll = val;\r\n    };\r\n\r\n    /**\r\n     * Save a notification in the cache.\r\n     *\r\n     * @method setCacheNotification\r\n     * @param {object} notification A notification returned by a webservice\r\n     */\r\n    ControlArea.prototype.setCacheNotification = function(notification) {\r\n        this.notifications[notification.id] = notification;\r\n    };\r\n\r\n    /**\r\n     * Retrieve a notification from the cache.\r\n     *\r\n     * @method getCacheNotification\r\n     * @param {int} id The id for the notification you wish to retrieve\r\n     * @return {object} A notification (as returned by a webservice)\r\n     */\r\n    ControlArea.prototype.getCacheNotification = function(id) {\r\n        return this.notifications[id];\r\n    };\r\n\r\n    /**\r\n     * Find the notification element in the control area for the given id.\r\n     *\r\n     * @method getNotificationElement\r\n     * @param {int} id The notification id\r\n     * @return {(object|null)} jQuery element or null\r\n     */\r\n    ControlArea.prototype.getNotificationElement = function(id) {\r\n        var element = this.getRoot().find(SELECTORS.NOTIFICATION + '[data-id=\"' + id + '\"]');\r\n        return element.length == 1 ? element : null;\r\n    };\r\n\r\n    /**\r\n     * Scroll the notification element into view within the control area, if it\r\n     * isn't already visible.\r\n     *\r\n     * @method scrollNotificationIntoView\r\n     * @param {object} notificationElement The jQuery notification element\r\n     */\r\n    ControlArea.prototype.scrollNotificationIntoView = function(notificationElement) {\r\n        var position = notificationElement.position();\r\n        var container = this.getRoot();\r\n        var relativeTop = position.top - container.scrollTop();\r\n\r\n        // If the element isn't in the view window.\r\n        if (relativeTop > container.innerHeight()) {\r\n            var height = notificationElement.outerHeight();\r\n            // Offset enough to make sure the notification will be in view.\r\n            height = height * 4;\r\n            var scrollTo = position.top - height;\r\n            container.scrollTop(scrollTo);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Show the full notification for the given notification element. The notification\r\n     * context is retrieved from the cache and send as data with an event to be\r\n     * rendered in the content area.\r\n     *\r\n     * @method showNotification\r\n     * @param {(int|object)} notificationElement The notification id or jQuery notification element\r\n     */\r\n    ControlArea.prototype.showNotification = function(notificationElement) {\r\n        if (typeof notificationElement !== 'object') {\r\n            // Assume it's an ID if it's not an object.\r\n            notificationElement = this.getNotificationElement(notificationElement);\r\n        }\r\n\r\n        if (notificationElement && notificationElement.length) {\r\n            this.getRoot().find(SELECTORS.NOTIFICATION).removeClass('selected');\r\n            notificationElement.addClass('selected').find(SELECTORS.CAN_RECEIVE_FOCUS).focus();\r\n            var notificationId = notificationElement.attr('data-id');\r\n            var notification = this.getCacheNotification(notificationId);\r\n            this.scrollNotificationIntoView(notificationElement);\r\n            // Create a new version of the notification to send with the notification so\r\n            // this copy isn't modified.\r\n            this.getContainer().trigger(NotificationAreaEvents.showNotification, [$.extend({}, notification)]);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Send a request to mark the notification as read in the server and remove the unread\r\n     * status from the element.\r\n     *\r\n     * @method markNotificationAsRead\r\n     * @param {object} notificationElement The jQuery notification element\r\n     * @return {object} jQuery promise\r\n     */\r\n    ControlArea.prototype.markNotificationAsRead = function(notificationElement) {\r\n        return NotificationRepo.markAsRead(notificationElement.attr('data-id')).done(function() {\r\n            notificationElement.removeClass('unread');\r\n        });\r\n    };\r\n\r\n\r\n    /**\r\n     * Render the notification data with the appropriate template and add it to the DOM.\r\n     *\r\n     * @method renderNotifications\r\n     * @param {array} notifications Array of notification data\r\n     * @return {object} jQuery promise that is resolved when all notifications have been\r\n     *                  rendered and added to the DOM\r\n     */\r\n    ControlArea.prototype.renderNotifications = function(notifications) {\r\n        var promises = [];\r\n        var container = this.getContent();\r\n\r\n        $.each(notifications, function(index, notification) {\r\n            // Need to remove the contexturl so the item isn't rendered\r\n            // as a link.\r\n            var contextUrl = notification.contexturl;\r\n            delete notification.contexturl;\r\n\r\n            var promise = Templates.render(TEMPLATES.NOTIFICATION, notification)\r\n            .then(function(html, js) {\r\n                // Restore it for the cache.\r\n                notification.contexturl = contextUrl;\r\n                this.setCacheNotification(notification);\r\n                // Pass the Rendered content out.\r\n                return {html: html, js: js};\r\n            }.bind(this));\r\n            promises.push(promise);\r\n        }.bind(this));\r\n\r\n        return $.when.apply($, promises).then(function() {\r\n            // Each of the promises in the when will pass its results as an argument to the function.\r\n            // The order of the arguments will be the order that the promises are passed to when()\r\n            // i.e. the first promise's results will be in the first argument.\r\n            $.each(arguments, function(index, argument) {\r\n                container.append(argument.html);\r\n                Templates.runTemplateJS(argument.js);\r\n            });\r\n            return;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Load notifications from the server and render them.\r\n     *\r\n     * @method loadMoreNotifications\r\n     * @return {object} jQuery promise\r\n     */\r\n    ControlArea.prototype.loadMoreNotifications = function() {\r\n        if (this.isLoading || this.hasLoadedAllContent()) {\r\n            return $.Deferred().resolve();\r\n        }\r\n\r\n        this.startLoading();\r\n        var request = {\r\n            limit: this.getLimit(),\r\n            offset: this.getOffset(),\r\n            useridto: this.getUserId(),\r\n        };\r\n\r\n        if (!this.initialLoad) {\r\n            // If this is the first load we may have been given a non-zero offset,\r\n            // in which case we need to load all notifications preceeding that offset\r\n            // to make sure the full list is rendered.\r\n            request.limit = this.getOffset() + this.getLimit();\r\n            request.offset = 0;\r\n        }\r\n\r\n        var promise = NotificationRepo.query(request).then(function(result) {\r\n            var notifications = result.notifications;\r\n            this.unreadCount = result.unreadcount;\r\n            this.setLoadedAllContent(!notifications.length || notifications.length < this.getLimit());\r\n            this.initialLoad = true;\r\n\r\n            if (notifications.length) {\r\n                this.incrementOffset();\r\n                return this.renderNotifications(notifications);\r\n            }\r\n\r\n            return false;\r\n        }.bind(this))\r\n        .always(function() {\r\n            this.stopLoading();\r\n        }.bind(this));\r\n\r\n        return promise;\r\n    };\r\n\r\n    /**\r\n     * Create the event listeners for the control area.\r\n     *\r\n     * @method registerEventListeners\r\n     */\r\n    ControlArea.prototype.registerEventListeners = function() {\r\n        CustomEvents.define(this.getRoot(), [\r\n            CustomEvents.events.activate,\r\n            CustomEvents.events.scrollBottom,\r\n            CustomEvents.events.scrollLock,\r\n            CustomEvents.events.up,\r\n            CustomEvents.events.down,\r\n        ]);\r\n\r\n        this.getRoot().on(CustomEvents.events.scrollBottom, function() {\r\n            this.loadMoreNotifications();\r\n        }.bind(this));\r\n\r\n        this.getRoot().on(CustomEvents.events.activate, SELECTORS.NOTIFICATION, function(e) {\r\n            var notificationElement = $(e.target).closest(SELECTORS.NOTIFICATION);\r\n            this.showNotification(notificationElement);\r\n        }.bind(this));\r\n\r\n        // Show the previous notification in the list.\r\n        this.getRoot().on(CustomEvents.events.up, SELECTORS.NOTIFICATION, function(e, data) {\r\n            var notificationElement = $(e.target).closest(SELECTORS.NOTIFICATION);\r\n            this.showNotification(notificationElement.prev());\r\n\r\n            data.originalEvent.preventDefault();\r\n        }.bind(this));\r\n\r\n        // Show the next notification in the list.\r\n        this.getRoot().on(CustomEvents.events.down, SELECTORS.NOTIFICATION, function(e, data) {\r\n            var notificationElement = $(e.target).closest(SELECTORS.NOTIFICATION);\r\n            this.showNotification(notificationElement.next());\r\n\r\n            data.originalEvent.preventDefault();\r\n        }.bind(this));\r\n\r\n        this.getContainer().on(NotificationAreaEvents.notificationShown, function(e, notification) {\r\n            if (!notification.read) {\r\n                var element = this.getNotificationElement(notification.id);\r\n\r\n                if (element) {\r\n                    this.markNotificationAsRead(element);\r\n                }\r\n\r\n                var cachedNotification = this.getCacheNotification(notification.id);\r\n\r\n                if (cachedNotification) {\r\n                    cachedNotification.read = true;\r\n                }\r\n            }\r\n        }.bind(this));\r\n    };\r\n\r\n    return ControlArea;\r\n});\r\n"],"names":["define","$","Templates","DebugNotification","CustomEvents","NotificationRepo","NotificationAreaEvents","SELECTORS","TEMPLATES","ControlArea","root","userId","container","this","closest","content","find","offset","limit","initialLoad","isLoading","loadedAll","notifications","registerEventListeners","prototype","getRoot","getContainer","getUserId","getContent","getOffset","getLimit","setOffset","value","setLimit","incrementOffset","startLoading","addClass","stopLoading","removeClass","hasDoneInitialLoad","hasLoadedAllContent","setLoadedAllContent","val","setCacheNotification","notification","id","getCacheNotification","getNotificationElement","element","length","scrollNotificationIntoView","notificationElement","position","top","scrollTop","innerHeight","height","outerHeight","scrollTo","showNotification","focus","notificationId","attr","trigger","extend","markNotificationAsRead","markAsRead","done","renderNotifications","promises","each","index","contextUrl","contexturl","promise","render","then","html","js","bind","push","when","apply","arguments","argument","append","runTemplateJS","loadMoreNotifications","Deferred","resolve","request","useridto","query","result","unreadCount","unreadcount","always","events","activate","scrollBottom","scrollLock","up","down","on","e","target","data","prev","originalEvent","preventDefault","next","notificationShown","read","cachedNotification"],"mappings":"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"}