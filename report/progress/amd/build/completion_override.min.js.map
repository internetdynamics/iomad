{"version":3,"file":"completion_override.min.js","sources":["../src/completion_override.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * AMD module to handle overriding activity completion status.\r\n *\r\n * @module     report_progress/completion_override\r\n * @copyright  2016 onwards Eiz Eddin Al Katrib <eiz@barasoft.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.1\r\n */\r\ndefine(['jquery', 'core/ajax', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/notification',\r\n        'core/custom_interaction_events', 'core/templates', 'core/pending'],\r\n    function($, Ajax, Str, ModalFactory, ModalEvents, Notification, CustomEvents, Templates, Pending) {\r\n\r\n        /**\r\n         * @var {String} the full name of the current user.\r\n         * @private\r\n         */\r\n        var userFullName;\r\n\r\n        /**\r\n         * @var {JQuery} JQuery object containing the element (completion link) that was most recently activated.\r\n         * @private\r\n         */\r\n        var triggerElement;\r\n\r\n        /**\r\n         * Helper function to get the pix icon key based on the completion state.\r\n         * @method getIconDescriptorFromState\r\n         * @param {number} state The current completion state.\r\n         * @param {string} tracking The completion tracking type, either 'manual' or 'auto'.\r\n         * @return {string} the key for the respective icon.\r\n         * @private\r\n         */\r\n        var getIconKeyFromState = function(state, tracking) {\r\n            return state > 0 ? 'i/completion-' + tracking + '-y-override' : 'i/completion-' + tracking + '-n-override';\r\n        };\r\n\r\n        /**\r\n         * Handles the confirmation of an override change, calling the web service to update it.\r\n         * @method setOverride\r\n         * @param {Object} override the override data\r\n         * @private\r\n         */\r\n        var setOverride = function(override) {\r\n            const pendingPromise = new Pending('report_progress/compeletion_override/setOverride');\r\n            // Generate a loading spinner while we're working.\r\n            Templates.render('core/loading', {}).then(function(html) {\r\n                // Append the loading spinner to the trigger element.\r\n                triggerElement.append(html);\r\n\r\n                // Update the completion status override.\r\n                return Ajax.call([{\r\n                    methodname: 'core_completion_override_activity_completion_status',\r\n                    args: override\r\n                }])[0];\r\n            }).then(function(results) {\r\n                var completionState = (results.state > 0) ? 1 : 0;\r\n\r\n                // Now, build the new title string, get the new icon, and update the DOM.\r\n                var tooltipKey = completionState ? 'completion-y-override' : 'completion-n-override';\r\n                Str.get_string(tooltipKey, 'completion', userFullName).then(function(stateString) {\r\n                    var params = {\r\n                        state: stateString,\r\n                        date: '',\r\n                        user: triggerElement.attr('data-userfullname'),\r\n                        activity: triggerElement.attr('data-activityname')\r\n                    };\r\n                    return Str.get_string('progress-title', 'completion', params);\r\n                }).then(function(titleString) {\r\n                    var completionTracking = triggerElement.attr('data-completiontracking');\r\n                    return Templates.renderPix(getIconKeyFromState(completionState, completionTracking), 'core', titleString);\r\n                }).then(function(html) {\r\n                    var oppositeState = completionState > 0 ? 0 : 1;\r\n                    triggerElement.find('.loading-icon').remove();\r\n                    triggerElement.data('changecompl', override.userid + '-' + override.cmid + '-' + oppositeState);\r\n                    triggerElement.attr('data-changecompl', override.userid + '-' + override.cmid + '-' + oppositeState);\r\n                    triggerElement.children(\"img\").replaceWith(html);\r\n                    return;\r\n                }).catch(Notification.exception);\r\n\r\n                return;\r\n            })\r\n            .then(() => {\r\n                pendingPromise.resolve();\r\n                return;\r\n            }).catch(Notification.exception);\r\n        };\r\n\r\n        /**\r\n         * Handler for activation of a completion status button element.\r\n         * @method userConfirm\r\n         * @param {Event} e the CustomEvents event (CustomEvents.events.activate in this case)\r\n         * @param {Object} data an object containing the original event (click, keydown, etc.).\r\n         * @private\r\n         */\r\n        var userConfirm = function(e, data) {\r\n            data.originalEvent.preventDefault();\r\n            data.originalEvent.stopPropagation();\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            triggerElement = $(e.currentTarget);\r\n            var elemData = triggerElement.data('changecompl').split('-');\r\n            var override = {\r\n                userid: elemData[0],\r\n                cmid: elemData[1],\r\n                newstate: elemData[2]\r\n            };\r\n            var newStateStr = (override.newstate == 1) ? 'completion-y' : 'completion-n';\r\n\r\n            Str.get_strings([\r\n                {key: newStateStr, component: 'completion'}\r\n            ]).then(function(strings) {\r\n                return Str.get_strings([\r\n                    {key: 'confirm', component: 'moodle'},\r\n                    {key: 'areyousureoverridecompletion', component: 'completion', param: strings[0]}\r\n                ]);\r\n            }).then(function(strings) {\r\n                // Create a save/cancel modal.\r\n                return ModalFactory.create({\r\n                    type: ModalFactory.types.SAVE_CANCEL,\r\n                    title: strings[0],\r\n                    body: strings[1],\r\n                });\r\n            }).then(function(modal) {\r\n                // Now set up the handlers for the confirmation or cancellation of the modal, and show it.\r\n\r\n                // Confirmation only.\r\n                modal.getRoot().on(ModalEvents.save, function() {\r\n                    setOverride(override);\r\n                });\r\n\r\n                // Confirming, closing, or cancelling will destroy the modal and return focus to the trigger element.\r\n                modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    triggerElement.focus();\r\n                    modal.destroy();\r\n                });\r\n\r\n                // Display.\r\n                modal.show();\r\n                return;\r\n            }).catch(Notification.exception);\r\n        };\r\n\r\n        /**\r\n         * Init this module which allows activity completion state to be changed via ajax.\r\n         * @method init\r\n         * @param {string} fullName The current user's full name.\r\n         * @private\r\n         */\r\n        var init = function(fullName) {\r\n            userFullName = fullName;\r\n\r\n            // Register the click, space and enter events as activators for the trigger element.\r\n            $('#completion-progress a.changecompl').each(function(index, element) {\r\n                CustomEvents.define(element, [CustomEvents.events.activate]);\r\n            });\r\n\r\n            // Set the handler on the parent element (the table), but filter so the callback is only called for <a> type children\r\n            // having the '.changecompl' class. The <a> element can then be accessed in the callback via e.currentTarget.\r\n            $('#completion-progress').on(CustomEvents.events.activate, \"a.changecompl\", function(e, data) {\r\n                userConfirm(e, data);\r\n            });\r\n        };\r\n\r\n        return /** @alias module:report_progress/completion_override */ {\r\n            init: init\r\n        };\r\n    });\r\n"],"names":["define","$","Ajax","Str","ModalFactory","ModalEvents","Notification","CustomEvents","Templates","Pending","userFullName","triggerElement","userConfirm","e","data","originalEvent","preventDefault","stopPropagation","elemData","currentTarget","split","override","userid","cmid","newstate","newStateStr","get_strings","key","component","then","strings","param","create","type","types","SAVE_CANCEL","title","body","modal","getRoot","on","save","pendingPromise","render","html","append","call","methodname","args","results","completionState","state","tooltipKey","get_string","stateString","params","date","user","attr","activity","titleString","tracking","completionTracking","renderPix","oppositeState","find","remove","children","replaceWith","catch","exception","resolve","setOverride","hidden","focus","destroy","show","init","fullName","each","index","element","events","activate"],"mappings":";;;;;;;;AAuBAA,6CAAO,CAAC,SAAU,YAAa,WAAY,qBAAsB,oBAAqB,oBAC9E,iCAAkC,iBAAkB,iBACxD,SAASC,EAAGC,KAAMC,IAAKC,aAAcC,YAAaC,aAAcC,aAAcC,UAAWC,aAMjFC,aAMAC,eAwEAC,YAAc,SAASC,EAAGC,MAC1BA,KAAKC,cAAcC,iBACnBF,KAAKC,cAAcE,kBACnBJ,EAAEG,iBACFH,EAAEI,sBAGEC,UADJP,eAAiBV,EAAEY,EAAEM,gBACSL,KAAK,eAAeM,MAAM,KACpDC,SAAW,CACXC,OAAQJ,SAAS,GACjBK,KAAML,SAAS,GACfM,SAAUN,SAAS,IAEnBO,YAAoC,GAArBJ,SAASG,SAAiB,eAAiB,eAE9DrB,IAAIuB,YAAY,CACZ,CAACC,IAAKF,YAAaG,UAAW,gBAC/BC,MAAK,SAASC,gBACN3B,IAAIuB,YAAY,CACnB,CAACC,IAAK,UAAWC,UAAW,UAC5B,CAACD,IAAK,+BAAgCC,UAAW,aAAcG,MAAOD,QAAQ,SAEnFD,MAAK,SAASC,gBAEN1B,aAAa4B,OAAO,CACvBC,KAAM7B,aAAa8B,MAAMC,YACzBC,MAAON,QAAQ,GACfO,KAAMP,QAAQ,QAEnBD,MAAK,SAASS,OAIbA,MAAMC,UAAUC,GAAGnC,YAAYoC,MAAM,YArF3B,SAASpB,gBACjBqB,eAAiB,IAAIjC,QAAQ,oDAEnCD,UAAUmC,OAAO,eAAgB,IAAId,MAAK,SAASe,aAE/CjC,eAAekC,OAAOD,MAGf1C,KAAK4C,KAAK,CAAC,CACdC,WAAY,sDACZC,KAAM3B,YACN,MACLQ,MAAK,SAASoB,aACTC,gBAAmBD,QAAQE,MAAQ,EAAK,EAAI,EAG5CC,WAAaF,gBAAkB,wBAA0B,wBAC7D/C,IAAIkD,WAAWD,WAAY,aAAc1C,cAAcmB,MAAK,SAASyB,iBAC7DC,OAAS,CACTJ,MAAOG,YACPE,KAAM,GACNC,KAAM9C,eAAe+C,KAAK,qBAC1BC,SAAUhD,eAAe+C,KAAK,6BAE3BvD,IAAIkD,WAAW,iBAAkB,aAAcE,WACvD1B,MAAK,SAAS+B,iBAnCiBC,SAoC1BC,mBAAqBnD,eAAe+C,KAAK,kCACtClD,UAAUuD,WArCaF,SAqCkCC,mBAAjBZ,gBApCxC,EAAI,gBAAkBW,SAAW,cAAgB,gBAAkBA,SAAW,eAoCA,OAAQD,gBAC9F/B,MAAK,SAASe,UACToB,cAAgBd,gBAAkB,EAAI,EAAI,EAC9CvC,eAAesD,KAAK,iBAAiBC,SACrCvD,eAAeG,KAAK,cAAeO,SAASC,OAAS,IAAMD,SAASE,KAAO,IAAMyC,eACjFrD,eAAe+C,KAAK,mBAAoBrC,SAASC,OAAS,IAAMD,SAASE,KAAO,IAAMyC,eACtFrD,eAAewD,SAAS,OAAOC,YAAYxB,SAE5CyB,MAAM/D,aAAagE,cAIzBzC,MAAK,KACFa,eAAe6B,aAEhBF,MAAM/D,aAAagE,WA4CdE,CAAYnD,aAIhBiB,MAAMC,UAAUC,GAAGnC,YAAYoE,QAAQ,WACnC9D,eAAe+D,QACfpC,MAAMqC,aAIVrC,MAAMsC,UAEPP,MAAM/D,aAAagE,kBAwBsC,CAC5DO,KAhBO,SAASC,UAChBpE,aAAeoE,SAGf7E,EAAE,sCAAsC8E,MAAK,SAASC,MAAOC,SACzD1E,aAAaP,OAAOiF,QAAS,CAAC1E,aAAa2E,OAAOC,cAKtDlF,EAAE,wBAAwBuC,GAAGjC,aAAa2E,OAAOC,SAAU,iBAAiB,SAAStE,EAAGC,MACpFF,YAAYC,EAAGC"}