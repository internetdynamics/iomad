{"version":3,"file":"participants.min.js","sources":["../src/participants.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Some UI stuff for participants page.\r\n * This is also used by the report/participants/index.php because it has the same functionality.\r\n *\r\n * @module     core_user/participants\r\n * @copyright  2017 Damyon Wiese\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport * as DynamicTable from 'core_table/dynamic';\r\nimport * as Str from 'core/str';\r\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\r\nimport CustomEvents from 'core/custom_interaction_events';\r\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\r\nimport ModalEvents from 'core/modal_events';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport jQuery from 'jquery';\r\nimport {showAddNote, showSendMessage} from 'core_user/local/participants/bulkactions';\r\nimport 'core/inplace_editable';\r\n\r\nconst Selectors = {\r\n    bulkActionSelect: \"#formactionid\",\r\n    bulkUserSelectedCheckBoxes: \"input[data-togglegroup='participants-table'][data-toggle='slave']:checked\",\r\n    checkCountButton: \"#checkall\",\r\n    showCountText: '[data-region=\"participant-count\"]',\r\n    showCountToggle: '[data-action=\"showcount\"]',\r\n    stateHelpIcon: '[data-region=\"state-help-icon\"]',\r\n    tableForm: uniqueId => `form[data-table-unique-id=\"${uniqueId}\"]`,\r\n};\r\n\r\nexport const init = ({\r\n    uniqueid,\r\n    noteStateNames = {},\r\n}) => {\r\n    const root = document.querySelector(Selectors.tableForm(uniqueid));\r\n    const getTableFromUniqueId = uniqueId => root.querySelector(DynamicTableSelectors.main.fromRegionId(uniqueId));\r\n\r\n    /**\r\n     * Private method.\r\n     *\r\n     * @method registerEventListeners\r\n     * @private\r\n     */\r\n    const registerEventListeners = () => {\r\n        CustomEvents.define(Selectors.bulkActionSelect, [CustomEvents.events.accessibleChange]);\r\n        jQuery(Selectors.bulkActionSelect).on(CustomEvents.events.accessibleChange, e => {\r\n            const bulkActionSelect = e.target.closest('select');\r\n            const action = bulkActionSelect.value;\r\n            const tableRoot = getTableFromUniqueId(uniqueid);\r\n            const checkboxes = tableRoot.querySelectorAll(Selectors.bulkUserSelectedCheckBoxes);\r\n            const pendingPromise = new Pending('core_user/participants:bulkActionSelect');\r\n\r\n            if (action.indexOf('#') !== -1) {\r\n                e.preventDefault();\r\n\r\n                const ids = [];\r\n                checkboxes.forEach(checkbox => {\r\n                    ids.push(checkbox.getAttribute('name').replace('user', ''));\r\n                });\r\n\r\n                let bulkAction;\r\n                if (action === '#messageselect') {\r\n                    bulkAction = showSendMessage(ids);\r\n                } else if (action === '#addgroupnote') {\r\n                    bulkAction = showAddNote(\r\n                        root.dataset.courseId,\r\n                        ids,\r\n                        noteStateNames,\r\n                        root.querySelector(Selectors.stateHelpIcon)\r\n                    );\r\n                }\r\n\r\n                if (bulkAction) {\r\n                    const pendingBulkAction = new Pending('core_user/participants:bulkActionSelected');\r\n                    bulkAction\r\n                    .then(modal => {\r\n                        modal.getRoot().on(ModalEvents.hidden, () => {\r\n                            // Focus on the action select when the dialog is closed.\r\n                            bulkActionSelect.focus();\r\n                        });\r\n\r\n                        pendingBulkAction.resolve();\r\n                        return modal;\r\n                    })\r\n                    .catch(Notification.exception);\r\n                }\r\n            } else if (action !== '' && checkboxes.length) {\r\n                bulkActionSelect.form.submit();\r\n            }\r\n\r\n            resetBulkAction(bulkActionSelect);\r\n            pendingPromise.resolve();\r\n        });\r\n\r\n        root.addEventListener('click', e => {\r\n            // Handle clicking of the \"Select all\" actions.\r\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\r\n            const checkCountButtonClicked = checkCountButton && checkCountButton.contains(e.target);\r\n\r\n            if (checkCountButtonClicked) {\r\n                e.preventDefault();\r\n\r\n                const tableRoot = getTableFromUniqueId(uniqueid);\r\n\r\n                DynamicTable.setPageSize(tableRoot, checkCountButton.dataset.targetPageSize)\r\n                .then(tableRoot => {\r\n                    // Update the toggle state.\r\n                    CheckboxToggleAll.setGroupState(root, 'participants-table', true);\r\n\r\n                    return tableRoot;\r\n                })\r\n                .catch(Notification.exception);\r\n            }\r\n        });\r\n\r\n        // When the content is refreshed, update the row counts in various places.\r\n        root.addEventListener(DynamicTable.Events.tableContentRefreshed, e => {\r\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\r\n\r\n            const tableRoot = e.target;\r\n\r\n            const defaultPageSize = parseInt(tableRoot.dataset.tableDefaultPerPage, 10);\r\n            const currentPageSize = parseInt(tableRoot.dataset.tablePageSize, 10);\r\n            const totalRowCount = parseInt(tableRoot.dataset.tableTotalRows, 10);\r\n\r\n            CheckboxToggleAll.updateSlavesFromMasterState(root, 'participants-table');\r\n\r\n            const pageCountStrings = [\r\n                {\r\n                    key: 'countparticipantsfound',\r\n                    component: 'core_user',\r\n                    param: totalRowCount,\r\n                },\r\n            ];\r\n\r\n            if (totalRowCount <= defaultPageSize) {\r\n                if (checkCountButton) {\r\n                    checkCountButton.classList.add('hidden');\r\n                }\r\n            } else if (totalRowCount <= currentPageSize) {\r\n                // The are fewer than the current page size.\r\n                pageCountStrings.push({\r\n                    key: 'selectalluserswithcount',\r\n                    component: 'core',\r\n                    param: defaultPageSize,\r\n                });\r\n\r\n                if (checkCountButton) {\r\n                    // The 'Check all [x]' button is only visible when there are values to set.\r\n                    checkCountButton.classList.add('hidden');\r\n                }\r\n            } else {\r\n                pageCountStrings.push({\r\n                    key: 'selectalluserswithcount',\r\n                    component: 'core',\r\n                    param: totalRowCount,\r\n                });\r\n\r\n                if (checkCountButton) {\r\n                    checkCountButton.classList.remove('hidden');\r\n                }\r\n            }\r\n\r\n            Str.get_strings(pageCountStrings)\r\n            .then(([showingParticipantCountString, selectCountString]) => {\r\n                const showingParticipantCount = root.querySelector(Selectors.showCountText);\r\n                showingParticipantCount.innerHTML = showingParticipantCountString;\r\n\r\n                if (selectCountString && checkCountButton) {\r\n                    checkCountButton.value = selectCountString;\r\n                }\r\n\r\n                return;\r\n            })\r\n            .catch(Notification.exception);\r\n        });\r\n    };\r\n\r\n    const resetBulkAction = bulkActionSelect => {\r\n        bulkActionSelect.value = '';\r\n    };\r\n\r\n    registerEventListeners();\r\n};\r\n"],"names":["Selectors","uniqueId","_ref","uniqueid","noteStateNames","root","document","querySelector","getTableFromUniqueId","DynamicTableSelectors","main","fromRegionId","resetBulkAction","bulkActionSelect","value","define","CustomEvents","events","accessibleChange","on","e","target","closest","action","checkboxes","querySelectorAll","pendingPromise","Pending","indexOf","preventDefault","ids","bulkAction","forEach","checkbox","push","getAttribute","replace","dataset","courseId","pendingBulkAction","then","modal","getRoot","ModalEvents","hidden","focus","resolve","catch","Notification","exception","length","form","submit","addEventListener","checkCountButton","contains","tableRoot","DynamicTable","setPageSize","targetPageSize","setGroupState","Events","tableContentRefreshed","defaultPageSize","parseInt","tableDefaultPerPage","currentPageSize","tablePageSize","totalRowCount","tableTotalRows","updateSlavesFromMasterState","pageCountStrings","key","component","param","classList","add","remove","Str","get_strings","_ref2","showingParticipantCountString","selectCountString","innerHTML"],"mappings":";;;;;;;;giBAoCMA,2BACgB,gBADhBA,qCAE0B,4EAF1BA,2BAGgB,YAHhBA,wBAIa,oCAJbA,wBAMa,kCANbA,oBAOSC,+CAA0CA,6BAGrCC,WAACC,SACjBA,SADiBC,eAEjBA,eAAiB,eAEXC,KAAOC,SAASC,cAAcP,oBAAoBG,WAClDK,qBAAuBP,UAAYI,KAAKE,cAAcE,mBAAsBC,KAAKC,aAAaV,WA+I9FW,gBAAkBC,mBACpBA,iBAAiBC,MAAQ,uCAvIZC,OAAOf,2BAA4B,CAACgB,mCAAaC,OAAOC,uCAC9DlB,4BAA4BmB,GAAGH,mCAAaC,OAAOC,kBAAkBE,UAClEP,iBAAmBO,EAAEC,OAAOC,QAAQ,UACpCC,OAASV,iBAAiBC,MAE1BU,WADYhB,qBAAqBL,UACVsB,iBAAiBzB,sCACxC0B,eAAiB,IAAIC,iBAAQ,+CAEN,IAAzBJ,OAAOK,QAAQ,KAAa,CAC5BR,EAAES,uBAEIC,IAAM,OAKRC,cAJJP,WAAWQ,SAAQC,WACfH,IAAII,KAAKD,SAASE,aAAa,QAAQC,QAAQ,OAAQ,QAI5C,mBAAXb,OACAQ,YAAa,gCAAgBD,KACX,kBAAXP,SACPQ,YAAa,4BACT1B,KAAKgC,QAAQC,SACbR,IACA1B,eACAC,KAAKE,cAAcP,2BAIvB+B,WAAY,OACNQ,kBAAoB,IAAIZ,iBAAQ,6CACtCI,WACCS,MAAKC,QACFA,MAAMC,UAAUvB,GAAGwB,sBAAYC,QAAQ,KAEnC/B,iBAAiBgC,WAGrBN,kBAAkBO,UACXL,SAEVM,MAAMC,sBAAaC,gBAEN,KAAX1B,QAAiBC,WAAW0B,QACnCrC,iBAAiBsC,KAAKC,SAG1BxC,gBAAgBC,kBAChBa,eAAeoB,aAGnBzC,KAAKgD,iBAAiB,SAASjC,UAErBkC,iBAAmBjD,KAAKE,cAAcP,+BACZsD,kBAAoBA,iBAAiBC,SAASnC,EAAEC,QAEnD,CACzBD,EAAES,uBAEI2B,UAAYhD,qBAAqBL,UAEvCsD,aAAaC,YAAYF,UAAWF,iBAAiBjB,QAAQsB,gBAC5DnB,MAAKgB,uCAEgBI,cAAcvD,KAAM,sBAAsB,GAErDmD,aAEVT,MAAMC,sBAAaC,eAK5B5C,KAAKgD,iBAAiBI,aAAaI,OAAOC,uBAAuB1C,UACvDkC,iBAAmBjD,KAAKE,cAAcP,4BAEtCwD,UAAYpC,EAAEC,OAEd0C,gBAAkBC,SAASR,UAAUnB,QAAQ4B,oBAAqB,IAClEC,gBAAkBF,SAASR,UAAUnB,QAAQ8B,cAAe,IAC5DC,cAAgBJ,SAASR,UAAUnB,QAAQgC,eAAgB,+BAE/CC,4BAA4BjE,KAAM,4BAE9CkE,iBAAmB,CACrB,CACIC,IAAK,yBACLC,UAAW,YACXC,MAAON,gBAIXA,eAAiBL,gBACbT,kBACAA,iBAAiBqB,UAAUC,IAAI,UAE5BR,eAAiBF,iBAExBK,iBAAiBrC,KAAK,CAClBsC,IAAK,0BACLC,UAAW,OACXC,MAAOX,kBAGPT,kBAEAA,iBAAiBqB,UAAUC,IAAI,YAGnCL,iBAAiBrC,KAAK,CAClBsC,IAAK,0BACLC,UAAW,OACXC,MAAON,gBAGPd,kBACAA,iBAAiBqB,UAAUE,OAAO,WAI1CC,IAAIC,YAAYR,kBACf/B,MAAKwC,YAAEC,8BAA+BC,yBACH7E,KAAKE,cAAcP,yBAC3BmF,UAAYF,8BAEhCC,mBAAqB5B,mBACrBA,iBAAiBxC,MAAQoE,sBAKhCnC,MAAMC,sBAAaC"}