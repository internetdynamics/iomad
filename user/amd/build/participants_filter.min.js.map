{"version":3,"file":"participants_filter.min.js","sources":["../src/participants_filter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Participants filter management.\r\n *\r\n * @module     core_user/participants_filter\r\n * @copyright  2021 Tomo Tsuyuki <tomotsuyuki@catalyst-au.net>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport CoreFilter from 'core/datafilter';\r\nimport * as DynamicTable from 'core_table/dynamic';\r\nimport Selectors from 'core/datafilter/selectors';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\n\r\n/**\r\n * Initialise the participants filter on the element with the given id.\r\n *\r\n * @param {String} filterRegionId The id for the filter element.\r\n */\r\nexport const init = filterRegionId => {\r\n\r\n    const filterSet = document.getElementById(filterRegionId);\r\n\r\n    // Create and initialize filter.\r\n    const coreFilter = new CoreFilter(filterSet, function(filters, pendingPromise) {\r\n        DynamicTable.setFilters(\r\n            DynamicTable.getTableFromId(filterSet.dataset.tableRegion),\r\n            {\r\n                jointype: parseInt(filterSet.querySelector(Selectors.filterset.fields.join).value, 10),\r\n                filters,\r\n            }\r\n        )\r\n            .then(result => {\r\n                pendingPromise.resolve();\r\n\r\n                return result;\r\n            })\r\n            .catch(Notification.exception);\r\n    });\r\n    coreFilter.init();\r\n\r\n    /**\r\n     * Set the current filter options based on a provided configuration.\r\n     *\r\n     * @param {Object} config\r\n     * @param {Number} config.jointype\r\n     * @param {Object} config.filters\r\n     * @returns {Promise}\r\n     */\r\n    const setFilterFromConfig = config => {\r\n        const filterConfig = Object.entries(config.filters);\r\n\r\n        if (!filterConfig.length) {\r\n            // There are no filters to set from.\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // Set the main join type.\r\n        filterSet.querySelector(Selectors.filterset.fields.join).value = config.jointype;\r\n\r\n        const filterPromises = filterConfig.map(([filterType, filterData]) => {\r\n            if (filterType === 'courseid') {\r\n                // The courseid is a special case.\r\n                return false;\r\n            }\r\n\r\n            const filterValues = filterData.values;\r\n\r\n            if (!filterValues.length) {\r\n                // There are no values for this filter.\r\n                // Skip it.\r\n                return false;\r\n            }\r\n            return coreFilter.addFilterRow()\r\n                .then(([filterRow]) => {\r\n                    coreFilter.addFilter(filterRow, filterType, filterValues);\r\n                    return;\r\n                });\r\n        }).filter(promise => promise);\r\n\r\n        if (!filterPromises.length) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.all(filterPromises)\r\n            .then(() => {\r\n                return coreFilter.removeEmptyFilters();\r\n            })\r\n            .then(() => {\r\n                coreFilter.updateFiltersOptions();\r\n                return;\r\n            })\r\n            .then(() => {\r\n                coreFilter.updateTableFromFilter();\r\n                return;\r\n            });\r\n    };\r\n\r\n    // Initialize DynamicTable for showing result.\r\n    const tableRoot = DynamicTable.getTableFromId(filterSet.dataset.tableRegion);\r\n    const initialFilters = DynamicTable.getFilters(tableRoot);\r\n    if (initialFilters) {\r\n        const initialFilterPromise = new Pending('core/filter:setFilterFromConfig');\r\n        // Apply the initial filter configuration.\r\n        setFilterFromConfig(initialFilters)\r\n            .then(() => initialFilterPromise.resolve())\r\n            .catch();\r\n    }\r\n};\r\n\r\n"],"names":["filterRegionId","filterSet","document","getElementById","coreFilter","CoreFilter","filters","pendingPromise","DynamicTable","setFilters","getTableFromId","dataset","tableRegion","jointype","parseInt","querySelector","Selectors","filterset","fields","join","value","then","result","resolve","catch","Notification","exception","init","tableRoot","initialFilters","getFilters","initialFilterPromise","Pending","config","filterConfig","Object","entries","length","Promise","filterPromises","map","_ref","filterType","filterData","filterValues","values","addFilterRow","_ref2","filterRow","addFilter","filter","promise","all","removeEmptyFilters","updateFiltersOptions","updateTableFromFilter","setFilterFromConfig"],"mappings":";;;;;;;o8BAkCoBA,uBAEVC,UAAYC,SAASC,eAAeH,gBAGpCI,WAAa,IAAIC,oBAAWJ,WAAW,SAASK,QAASC,gBAC3DC,aAAaC,WACTD,aAAaE,eAAeT,UAAUU,QAAQC,aAC9C,CACIC,SAAUC,SAASb,UAAUc,cAAcC,mBAAUC,UAAUC,OAAOC,MAAMC,MAAO,IACnFd,QAAAA,UAGHe,MAAKC,SACFf,eAAegB,UAERD,UAEVE,MAAMC,sBAAaC,cAE5BtB,WAAWuB,aA4DLC,UAAYpB,aAAaE,eAAeT,UAAUU,QAAQC,aAC1DiB,eAAiBrB,aAAasB,WAAWF,cAC3CC,eAAgB,OACVE,qBAAuB,IAAIC,iBAAQ,mCArDjBC,CAAAA,eAClBC,aAAeC,OAAOC,QAAQH,OAAO3B,aAEtC4B,aAAaG,cAEPC,QAAQf,UAInBtB,UAAUc,cAAcC,mBAAUC,UAAUC,OAAOC,MAAMC,MAAQa,OAAOpB,eAElE0B,eAAiBL,aAAaM,KAAIC,WAAEC,WAAYC,oBAC/B,aAAfD,kBAEO,QAGLE,aAAeD,WAAWE,eAE3BD,aAAaP,QAKXjC,WAAW0C,eACbzB,MAAK0B,YAAEC,iBACJ5C,WAAW6C,UAAUD,UAAWN,WAAYE,oBAGrDM,QAAOC,SAAWA,iBAEhBZ,eAAeF,OAIbC,QAAQc,IAAIb,gBACdlB,MAAK,IACKjB,WAAWiD,uBAErBhC,MAAK,KACFjB,WAAWkD,0BAGdjC,MAAK,KACFjB,WAAWmD,2BAZRjB,QAAQf,WAuBnBiC,CAAoB3B,gBACfR,MAAK,IAAMU,qBAAqBR,YAChCC"}