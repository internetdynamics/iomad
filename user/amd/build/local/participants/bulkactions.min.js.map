{"version":3,"file":"bulkactions.min.js","sources":["../../../src/local/participants/bulkactions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Bulk actions for lists of participants.\r\n *\r\n * @module     core_user/local/participants/bulkactions\r\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport * as Repository from 'core_user/repository';\r\nimport * as Str from 'core/str';\r\nimport ModalEvents from 'core/modal_events';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport Notification from 'core/notification';\r\nimport Templates from 'core/templates';\r\nimport {add as notifyUser} from 'core/toast';\r\n\r\n/**\r\n * Show the add note popup\r\n *\r\n * @param {Number} courseid\r\n * @param {Number[]} users\r\n * @param {String[]} noteStateNames\r\n * @param {HTMLElement} stateHelpIcon\r\n * @return {Promise}\r\n */\r\nexport const showAddNote = (courseid, users, noteStateNames, stateHelpIcon) => {\r\n    if (!users.length) {\r\n        // No users were selected.\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const states = [];\r\n    for (let key in noteStateNames) {\r\n        switch (key) {\r\n            case 'draft':\r\n                states.push({value: 'personal', label: noteStateNames[key]});\r\n                break;\r\n            case 'public':\r\n                states.push({value: 'course', label: noteStateNames[key], selected: 1});\r\n                break;\r\n            case 'site':\r\n                states.push({value: key, label: noteStateNames[key]});\r\n                break;\r\n        }\r\n    }\r\n\r\n    const context = {\r\n        stateNames: states,\r\n        stateHelpIcon: stateHelpIcon.innerHTML,\r\n    };\r\n\r\n    let titlePromise = null;\r\n    if (users.length === 1) {\r\n        titlePromise = Str.get_string('addbulknotesingle', 'core_notes');\r\n    } else {\r\n        titlePromise = Str.get_string('addbulknote', 'core_notes', users.length);\r\n    }\r\n\r\n    return ModalFactory.create({\r\n        type: ModalFactory.types.SAVE_CANCEL,\r\n        body: Templates.render('core_user/add_bulk_note', context),\r\n        title: titlePromise,\r\n        buttons: {\r\n            save: titlePromise,\r\n        },\r\n        removeOnClose: true,\r\n    })\r\n    .then(modal => {\r\n        modal.getRoot().on(ModalEvents.save, () => submitAddNote(courseid, users, modal));\r\n\r\n        modal.show();\r\n\r\n        return modal;\r\n    });\r\n};\r\n\r\n/**\r\n * Add a note to this list of users.\r\n *\r\n * @param {Number} courseid\r\n * @param {Number[]} users\r\n * @param {Modal} modal\r\n * @return {Promise}\r\n */\r\nconst submitAddNote = (courseid, users, modal) => {\r\n    const text = modal.getRoot().find('form textarea').val();\r\n    const publishstate = modal.getRoot().find('form select').val();\r\n\r\n    const notes = users.map(userid => {\r\n        return {\r\n            userid,\r\n            text,\r\n            courseid,\r\n            publishstate,\r\n        };\r\n    });\r\n\r\n    return Repository.createNotesForUsers(notes)\r\n    .then(noteIds => {\r\n        if (noteIds.length === 1) {\r\n            return Str.get_string('addbulknotedonesingle', 'core_notes');\r\n        } else {\r\n            return Str.get_string('addbulknotedone', 'core_notes', noteIds.length);\r\n        }\r\n    })\r\n    .then(msg => notifyUser(msg))\r\n    .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Show the send message popup.\r\n *\r\n * @param {Number[]} users\r\n * @return {Promise}\r\n */\r\nexport const showSendMessage = users => {\r\n    if (!users.length) {\r\n        // Nothing to do.\r\n        return Promise.resolve();\r\n    }\r\n\r\n    let titlePromise;\r\n    if (users.length === 1) {\r\n        titlePromise = Str.get_string('sendbulkmessagesingle', 'core_message');\r\n    } else {\r\n        titlePromise = Str.get_string('sendbulkmessage', 'core_message', users.length);\r\n    }\r\n\r\n    return ModalFactory.create({\r\n        type: ModalFactory.types.SAVE_CANCEL,\r\n        body: Templates.render('core_user/send_bulk_message', {}),\r\n        title: titlePromise,\r\n        buttons: {\r\n            save: titlePromise,\r\n        },\r\n        removeOnClose: true,\r\n    })\r\n    .then(modal => {\r\n        modal.getRoot().on(ModalEvents.save, (e) => {\r\n            const text = modal.getRoot().find('form textarea').val();\r\n            if (text.trim() === '') {\r\n                modal.getRoot().find('[data-role=\"messagetextrequired\"]').removeAttr('hidden');\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n\r\n            submitSendMessage(modal, users, text);\r\n        });\r\n\r\n        modal.show();\r\n\r\n        return modal;\r\n    });\r\n};\r\n\r\n/**\r\n * Send a message to these users.\r\n *\r\n * @param {Modal} modal\r\n * @param {Number[]} users\r\n * @param {String} text\r\n * @return {Promise}\r\n */\r\nconst submitSendMessage = (modal, users, text) => {\r\n    const messages = users.map(touserid => {\r\n        return {\r\n            touserid,\r\n            text,\r\n        };\r\n    });\r\n\r\n    return Repository.sendMessagesToUsers(messages)\r\n    .then(messageIds => {\r\n        if (messageIds.length == 1) {\r\n            return Str.get_string('sendbulkmessagesentsingle', 'core_message');\r\n        } else {\r\n            return Str.get_string('sendbulkmessagesent', 'core_message', messageIds.length);\r\n        }\r\n    })\r\n    .then(msg => notifyUser(msg))\r\n    .catch(Notification.exception);\r\n};\r\n"],"names":["courseid","users","noteStateNames","stateHelpIcon","length","Promise","resolve","states","key","push","value","label","selected","context","stateNames","innerHTML","titlePromise","Str","get_string","ModalFactory","create","type","types","SAVE_CANCEL","body","Templates","render","title","buttons","save","removeOnClose","then","modal","getRoot","on","ModalEvents","submitAddNote","show","text","find","val","publishstate","notes","map","userid","Repository","createNotesForUsers","noteIds","msg","catch","Notification","exception","e","trim","removeAttr","preventDefault","submitSendMessage","messages","touserid","sendMessagesToUsers","messageIds"],"mappings":";;;;;;;maAwC2B,CAACA,SAAUC,MAAOC,eAAgBC,qBACpDF,MAAMG,cAEAC,QAAQC,gBAGbC,OAAS,OACV,IAAIC,OAAON,sBACJM,SACC,QACDD,OAAOE,KAAK,CAACC,MAAO,WAAYC,MAAOT,eAAeM,iBAErD,SACDD,OAAOE,KAAK,CAACC,MAAO,SAAUC,MAAOT,eAAeM,KAAMI,SAAU,cAEnE,OACDL,OAAOE,KAAK,CAACC,MAAOF,IAAKG,MAAOT,eAAeM,aAKrDK,QAAU,CACZC,WAAYP,OACZJ,cAAeA,cAAcY,eAG7BC,aAAe,YAEfA,aADiB,IAAjBf,MAAMG,OACSa,IAAIC,WAAW,oBAAqB,cAEpCD,IAAIC,WAAW,cAAe,aAAcjB,MAAMG,QAG9De,uBAAaC,OAAO,CACvBC,KAAMF,uBAAaG,MAAMC,YACzBC,KAAMC,mBAAUC,OAAO,0BAA2Bb,SAClDc,MAAOX,aACPY,QAAS,CACLC,KAAMb,cAEVc,eAAe,IAElBC,MAAKC,QACFA,MAAMC,UAAUC,GAAGC,sBAAYN,MAAM,IAAMO,cAAcpC,SAAUC,MAAO+B,SAE1EA,MAAMK,OAECL,gBAYTI,cAAgB,CAACpC,SAAUC,MAAO+B,eAC9BM,KAAON,MAAMC,UAAUM,KAAK,iBAAiBC,MAC7CC,aAAeT,MAAMC,UAAUM,KAAK,eAAeC,MAEnDE,MAAQzC,MAAM0C,KAAIC,SACb,CACHA,OAAAA,OACAN,KAAAA,KACAtC,SAAAA,SACAyC,aAAAA,wBAIDI,WAAWC,oBAAoBJ,OACrCX,MAAKgB,SACqB,IAAnBA,QAAQ3C,OACDa,IAAIC,WAAW,wBAAyB,cAExCD,IAAIC,WAAW,kBAAmB,aAAc6B,QAAQ3C,UAGtE2B,MAAKiB,MAAO,cAAWA,OACvBC,MAAMC,sBAAaC,qCASOlD,YACtBA,MAAMG,cAEAC,QAAQC,cAGfU,oBAEAA,aADiB,IAAjBf,MAAMG,OACSa,IAAIC,WAAW,wBAAyB,gBAExCD,IAAIC,WAAW,kBAAmB,eAAgBjB,MAAMG,QAGpEe,uBAAaC,OAAO,CACvBC,KAAMF,uBAAaG,MAAMC,YACzBC,KAAMC,mBAAUC,OAAO,8BAA+B,IACtDC,MAAOX,aACPY,QAAS,CACLC,KAAMb,cAEVc,eAAe,IAElBC,MAAKC,QACFA,MAAMC,UAAUC,GAAGC,sBAAYN,MAAOuB,UAC5Bd,KAAON,MAAMC,UAAUM,KAAK,iBAAiBC,SAC/B,KAAhBF,KAAKe,cACLrB,MAAMC,UAAUM,KAAK,qCAAqCe,WAAW,eACrEF,EAAEG,iBAINC,kBAAkBxB,MAAO/B,MAAOqC,SAGpCN,MAAMK,OAECL,gBAYTwB,kBAAoB,CAACxB,MAAO/B,MAAOqC,cAC/BmB,SAAWxD,MAAM0C,KAAIe,WAChB,CACHA,SAAAA,SACApB,KAAAA,gBAIDO,WAAWc,oBAAoBF,UACrC1B,MAAK6B,YACuB,GAArBA,WAAWxD,OACJa,IAAIC,WAAW,4BAA6B,gBAE5CD,IAAIC,WAAW,sBAAuB,eAAgB0C,WAAWxD,UAG/E2B,MAAKiB,MAAO,cAAWA,OACvBC,MAAMC,sBAAaC"}