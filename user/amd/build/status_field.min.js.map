{"version":3,"file":"status_field.min.js","sources":["../src/status_field.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * AMD module for the user enrolment status field in the course participants page.\r\n *\r\n * @module     core_user/status_field\r\n * @copyright  2017 Jun Pataleta\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport * as DynamicTable from 'core_table/dynamic';\r\nimport * as Repository from './repository';\r\nimport * as Str from 'core/str';\r\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\r\nimport Fragment from 'core/fragment';\r\nimport ModalEvents from 'core/modal_events';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport Notification from 'core/notification';\r\nimport Templates from 'core/templates';\r\nimport {add as notifyUser} from 'core/toast';\r\n\r\nconst Selectors = {\r\n    editEnrolment: '[data-action=\"editenrolment\"]',\r\n    showDetails: '[data-action=\"showdetails\"]',\r\n    unenrol: '[data-action=\"unenrol\"]',\r\n    statusElement: '[data-status]',\r\n};\r\n\r\n/**\r\n * Get the dynamic table from the specified link.\r\n *\r\n * @param {HTMLElement} link\r\n * @returns {HTMLElement}\r\n */\r\nconst getDynamicTableFromLink = link => link.closest(DynamicTableSelectors.main.region);\r\n\r\n/**\r\n * Get the status container from the specified link.\r\n *\r\n * @param {HTMLElement} link\r\n * @returns {HTMLElement}\r\n */\r\nconst getStatusContainer = link => link.closest(Selectors.statusElement);\r\n\r\n/**\r\n * Get user enrolment id from the specified link\r\n *\r\n * @param {HTMLElement} link\r\n * @returns {Number}\r\n */\r\nconst getUserEnrolmentIdFromLink = link => link.getAttribute('rel');\r\n\r\n/**\r\n * Register all event listeners for the status fields.\r\n *\r\n * @param {Number} contextId\r\n * @param {Number} uniqueId\r\n */\r\nconst registerEventListeners = (contextId, uniqueId) => {\r\n    const getBodyFunction = (userEnrolmentId, formData) => getBody(contextId, userEnrolmentId, formData);\r\n\r\n    document.addEventListener('click', e => {\r\n        const tableRoot = e.target.closest(DynamicTableSelectors.main.fromRegionId(uniqueId));\r\n        if (!tableRoot) {\r\n            return;\r\n        }\r\n\r\n        const editLink = e.target.closest(Selectors.editEnrolment);\r\n        if (editLink) {\r\n            e.preventDefault();\r\n\r\n            showEditDialogue(editLink, getBodyFunction);\r\n        }\r\n\r\n        const unenrolLink = e.target.closest(Selectors.unenrol);\r\n        if (unenrolLink) {\r\n            e.preventDefault();\r\n\r\n            showUnenrolConfirmation(unenrolLink);\r\n        }\r\n\r\n        const showDetailsLink = e.target.closest(Selectors.showDetails);\r\n        if (showDetailsLink) {\r\n            e.preventDefault();\r\n\r\n            showStatusDetails(showDetailsLink);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Show the edit dialogue.\r\n *\r\n * @param {HTMLElement} link\r\n * @param {Function} getBody Function to get the body for the specified user enrolment\r\n */\r\nconst showEditDialogue = (link, getBody) => {\r\n    const container = getStatusContainer(link);\r\n    const userEnrolmentId = getUserEnrolmentIdFromLink(link);\r\n\r\n    ModalFactory.create({\r\n        large: true,\r\n        title: Str.get_string('edituserenrolment', 'enrol', container.dataset.fullname),\r\n        type: ModalFactory.types.SAVE_CANCEL,\r\n        body: getBody(userEnrolmentId)\r\n    })\r\n    .then(modal => {\r\n        // Handle save event.\r\n        modal.getRoot().on(ModalEvents.save, e => {\r\n            // Don't close the modal yet.\r\n            e.preventDefault();\r\n\r\n            // Submit form data.\r\n            submitEditFormAjax(link, getBody, modal, userEnrolmentId, container.dataset);\r\n        });\r\n\r\n        // Handle hidden event.\r\n        modal.getRoot().on(ModalEvents.hidden, () => {\r\n            // Destroy when hidden.\r\n            modal.destroy();\r\n        });\r\n\r\n        // Show the modal.\r\n        modal.show();\r\n\r\n        return modal;\r\n    })\r\n    .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Show and handle the unenrolment confirmation dialogue.\r\n *\r\n * @param {HTMLElement} link\r\n */\r\nconst showUnenrolConfirmation = link => {\r\n    const container = getStatusContainer(link);\r\n    const userEnrolmentId = getUserEnrolmentIdFromLink(link);\r\n\r\n    ModalFactory.create({\r\n        type: ModalFactory.types.SAVE_CANCEL,\r\n    })\r\n    .then(modal => {\r\n        // Handle confirm event.\r\n        modal.getRoot().on(ModalEvents.save, e => {\r\n            // Don't close the modal yet.\r\n            e.preventDefault();\r\n\r\n            // Submit data.\r\n            submitUnenrolFormAjax(\r\n                link,\r\n                modal,\r\n                {\r\n                    ueid: userEnrolmentId,\r\n                },\r\n                container.dataset\r\n            );\r\n        });\r\n\r\n        // Handle hidden event.\r\n        modal.getRoot().on(ModalEvents.hidden, () => {\r\n            // Destroy when hidden.\r\n            modal.destroy();\r\n        });\r\n\r\n        // Display the delete confirmation modal.\r\n        modal.show();\r\n\r\n        const stringData = [\r\n            {\r\n                key: 'unenrol',\r\n                component: 'enrol',\r\n            },\r\n            {\r\n                key: 'unenrolconfirm',\r\n                component: 'enrol',\r\n                param: {\r\n                    user: container.dataset.fullname,\r\n                    course: container.dataset.coursename,\r\n                    enrolinstancename: container.dataset.enrolinstancename,\r\n                }\r\n            }\r\n        ];\r\n\r\n        return Promise.all([Str.get_strings(stringData), modal]);\r\n    })\r\n    .then(([strings, modal]) => {\r\n        modal.setTitle(strings[0]);\r\n        modal.setSaveButtonText(strings[0]);\r\n        modal.setBody(strings[1]);\r\n\r\n        return modal;\r\n    })\r\n    .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Show the user details dialogue.\r\n *\r\n * @param {HTMLElement} link\r\n */\r\nconst showStatusDetails = link => {\r\n    const container = getStatusContainer(link);\r\n\r\n    const context = {\r\n        editenrollink: '',\r\n        statusclass: container.querySelector('span.badge').getAttribute('class'),\r\n        ...container.dataset,\r\n    };\r\n\r\n    // Find the edit enrolment link.\r\n    const editEnrolLink = container.querySelector(Selectors.editEnrolment);\r\n    if (editEnrolLink) {\r\n        // If there's an edit enrolment link for this user, clone it into the context for the modal.\r\n        context.editenrollink = editEnrolLink.outerHTML;\r\n    }\r\n\r\n    ModalFactory.create({\r\n        large: true,\r\n        type: ModalFactory.types.CANCEL,\r\n        title: Str.get_string('enroldetails', 'enrol'),\r\n        body: Templates.render('core_user/status_details', context),\r\n    })\r\n    .then(modal => {\r\n        if (editEnrolLink) {\r\n            modal.getRoot().on('click', Selectors.editEnrolment, e => {\r\n                e.preventDefault();\r\n                modal.hide();\r\n\r\n                // Trigger click event for the edit enrolment link to show the edit enrolment modal.\r\n                editEnrolLink.click();\r\n            });\r\n        }\r\n\r\n        modal.show();\r\n\r\n        // Handle hidden event.\r\n        modal.getRoot().on(ModalEvents.hidden, () => modal.destroy());\r\n\r\n        return modal;\r\n    })\r\n    .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Submit the edit dialogue.\r\n *\r\n * @param {HTMLElement} clickedLink\r\n * @param {Function} getBody\r\n * @param {Object} modal\r\n * @param {Number} userEnrolmentId\r\n * @param {Object} userData\r\n */\r\nconst submitEditFormAjax = (clickedLink, getBody, modal, userEnrolmentId, userData) => {\r\n    const form = modal.getRoot().find('form');\r\n\r\n    Repository.submitUserEnrolmentForm(form.serialize())\r\n    .then(data => {\r\n        if (!data.result) {\r\n            throw data.result;\r\n        }\r\n\r\n        // Dismiss the modal.\r\n        modal.hide();\r\n        modal.destroy();\r\n\r\n        return data;\r\n    })\r\n    .then(() => {\r\n        DynamicTable.refreshTableContent(getDynamicTableFromLink(clickedLink))\r\n        .catch(Notification.exception);\r\n\r\n        return Str.get_string('enrolmentupdatedforuser', 'core_enrol', userData);\r\n    })\r\n    .then(notificationString => {\r\n        notifyUser(notificationString);\r\n\r\n        return;\r\n    })\r\n    .catch(() => {\r\n        modal.setBody(getBody(userEnrolmentId, JSON.stringify(form.serialize())));\r\n\r\n        return modal;\r\n    });\r\n};\r\n\r\n/**\r\n * Submit the unenrolment form.\r\n *\r\n * @param {HTMLElement} clickedLink\r\n * @param {Object} modal\r\n * @param {Object} args\r\n * @param {Object} userData\r\n */\r\nconst submitUnenrolFormAjax = (clickedLink, modal, args, userData) => {\r\n    Repository.unenrolUser(args.ueid)\r\n    .then(data => {\r\n        if (!data.result) {\r\n            // Display an alert containing the error message\r\n            Notification.alert(data.errors[0].key, data.errors[0].message);\r\n\r\n            return data;\r\n        }\r\n\r\n        // Dismiss the modal.\r\n        modal.hide();\r\n        modal.destroy();\r\n\r\n        return data;\r\n    })\r\n    .then(() => {\r\n        DynamicTable.refreshTableContent(getDynamicTableFromLink(clickedLink))\r\n        .catch(Notification.exception);\r\n\r\n        return Str.get_string('unenrolleduser', 'core_enrol', userData);\r\n    })\r\n    .then(notificationString => {\r\n        notifyUser(notificationString);\r\n\r\n        return;\r\n    })\r\n    .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Get the body fragment.\r\n *\r\n * @param {Number} contextId\r\n * @param {Number} ueid The user enrolment id\r\n * @param {Object} formdata\r\n * @returns {Promise}\r\n */\r\nconst getBody = (contextId, ueid, formdata = null) => Fragment.loadFragment(\r\n    'enrol',\r\n    'user_enrolment_form',\r\n    contextId,\r\n    {\r\n        ueid,\r\n        formdata,\r\n    }\r\n);\r\n\r\n/**\r\n * Initialise the statu field handler.\r\n *\r\n * @param {object} param\r\n * @param {Number} param.contextid\r\n * @param {Number} param.uniqueid\r\n */\r\nexport const init = ({contextid, uniqueid}) => {\r\n    registerEventListeners(contextid, uniqueid);\r\n};\r\n"],"names":["Selectors","getDynamicTableFromLink","link","closest","DynamicTableSelectors","main","region","getStatusContainer","getUserEnrolmentIdFromLink","getAttribute","showEditDialogue","getBody","container","userEnrolmentId","create","large","title","Str","get_string","dataset","fullname","type","ModalFactory","types","SAVE_CANCEL","body","then","modal","getRoot","on","ModalEvents","save","e","preventDefault","submitEditFormAjax","hidden","destroy","show","catch","Notification","exception","showUnenrolConfirmation","submitUnenrolFormAjax","ueid","stringData","key","component","param","user","course","coursename","enrolinstancename","Promise","all","get_strings","_ref","strings","setTitle","setSaveButtonText","setBody","showStatusDetails","context","editenrollink","statusclass","querySelector","editEnrolLink","outerHTML","CANCEL","Templates","render","hide","click","clickedLink","userData","form","find","Repository","submitUserEnrolmentForm","serialize","data","result","DynamicTable","refreshTableContent","notificationString","JSON","stringify","args","unenrolUser","alert","errors","message","contextId","formdata","Fragment","loadFragment","_ref2","contextid","uniqueid","uniqueId","getBodyFunction","formData","document","addEventListener","target","fromRegionId","editLink","unenrolLink","showDetailsLink","registerEventListeners"],"mappings":";;;;;;;igBAkCMA,wBACa,gCADbA,sBAEW,8BAFXA,kBAGO,0BAHPA,wBAIa,gBASbC,wBAA0BC,MAAQA,KAAKC,QAAQC,mBAAsBC,KAAKC,QAQ1EC,mBAAqBL,MAAQA,KAAKC,QAAQH,yBAQ1CQ,2BAA6BN,MAAQA,KAAKO,aAAa,OA8CvDC,iBAAmB,CAACR,KAAMS,iBACtBC,UAAYL,mBAAmBL,MAC/BW,gBAAkBL,2BAA2BN,6BAEtCY,OAAO,CAChBC,OAAO,EACPC,MAAOC,IAAIC,WAAW,oBAAqB,QAASN,UAAUO,QAAQC,UACtEC,KAAMC,uBAAaC,MAAMC,YACzBC,KAAMd,QAAQE,mBAEjBa,MAAKC,QAEFA,MAAMC,UAAUC,GAAGC,sBAAYC,MAAMC,IAEjCA,EAAEC,iBAGFC,mBAAmBhC,KAAMS,QAASgB,MAAOd,gBAAiBD,UAAUO,YAIxEQ,MAAMC,UAAUC,GAAGC,sBAAYK,QAAQ,KAEnCR,MAAMS,aAIVT,MAAMU,OAECV,SAEVW,MAAMC,sBAAaC,YAQlBC,wBAA0BvC,aACtBU,UAAYL,mBAAmBL,MAC/BW,gBAAkBL,2BAA2BN,6BAEtCY,OAAO,CAChBO,KAAMC,uBAAaC,MAAMC,cAE5BE,MAAKC,QAEFA,MAAMC,UAAUC,GAAGC,sBAAYC,MAAMC,IAEjCA,EAAEC,iBAGFS,sBACIxC,KACAyB,MACA,CACIgB,KAAM9B,iBAEVD,UAAUO,YAKlBQ,MAAMC,UAAUC,GAAGC,sBAAYK,QAAQ,KAEnCR,MAAMS,aAIVT,MAAMU,aAEAO,WAAa,CACf,CACIC,IAAK,UACLC,UAAW,SAEf,CACID,IAAK,iBACLC,UAAW,QACXC,MAAO,CACHC,KAAMpC,UAAUO,QAAQC,SACxB6B,OAAQrC,UAAUO,QAAQ+B,WAC1BC,kBAAmBvC,UAAUO,QAAQgC,4BAK1CC,QAAQC,IAAI,CAACpC,IAAIqC,YAAYV,YAAajB,WAEpDD,MAAK6B,WAAEC,QAAS7B,mBACbA,MAAM8B,SAASD,QAAQ,IACvB7B,MAAM+B,kBAAkBF,QAAQ,IAChC7B,MAAMgC,QAAQH,QAAQ,IAEf7B,SAEVW,MAAMC,sBAAaC,YAQlBoB,kBAAoB1D,aAChBU,UAAYL,mBAAmBL,MAE/B2D,QAAU,CACZC,cAAe,GACfC,YAAanD,UAAUoD,cAAc,cAAcvD,aAAa,YAC7DG,UAAUO,SAIX8C,cAAgBrD,UAAUoD,cAAchE,yBAC1CiE,gBAEAJ,QAAQC,cAAgBG,cAAcC,kCAG7BpD,OAAO,CAChBC,OAAO,EACPM,KAAMC,uBAAaC,MAAM4C,OACzBnD,MAAOC,IAAIC,WAAW,eAAgB,SACtCO,KAAM2C,mBAAUC,OAAO,2BAA4BR,WAEtDnC,MAAKC,QACEsC,eACAtC,MAAMC,UAAUC,GAAG,QAAS7B,yBAAyBgC,IACjDA,EAAEC,iBACFN,MAAM2C,OAGNL,cAAcM,WAItB5C,MAAMU,OAGNV,MAAMC,UAAUC,GAAGC,sBAAYK,QAAQ,IAAMR,MAAMS,YAE5CT,SAEVW,MAAMC,sBAAaC,YAYlBN,mBAAqB,CAACsC,YAAa7D,QAASgB,MAAOd,gBAAiB4D,kBAChEC,KAAO/C,MAAMC,UAAU+C,KAAK,QAElCC,WAAWC,wBAAwBH,KAAKI,aACvCpD,MAAKqD,WACGA,KAAKC,aACAD,KAAKC,cAIfrD,MAAM2C,OACN3C,MAAMS,UAEC2C,QAEVrD,MAAK,KACFuD,aAAaC,oBAAoBjF,wBAAwBuE,cACxDlC,MAAMC,sBAAaC,WAEbvB,IAAIC,WAAW,0BAA2B,aAAcuD,aAElE/C,MAAKyD,oCACSA,uBAId7C,OAAM,KACHX,MAAMgC,QAAQhD,QAAQE,gBAAiBuE,KAAKC,UAAUX,KAAKI,eAEpDnD,UAYTe,sBAAwB,CAAC8B,YAAa7C,MAAO2D,KAAMb,YACrDG,WAAWW,YAAYD,KAAK3C,MAC3BjB,MAAKqD,MACGA,KAAKC,QAQVrD,MAAM2C,OACN3C,MAAMS,UAEC2C,6BATUS,MAAMT,KAAKU,OAAO,GAAG5C,IAAKkC,KAAKU,OAAO,GAAGC,SAE/CX,QASdrD,MAAK,KACFuD,aAAaC,oBAAoBjF,wBAAwBuE,cACxDlC,MAAMC,sBAAaC,WAEbvB,IAAIC,WAAW,iBAAkB,aAAcuD,aAEzD/C,MAAKyD,oCACSA,uBAId7C,MAAMC,sBAAaC,YAWlB7B,QAAU,SAACgF,UAAWhD,UAAMiD,gEAAW,YAASC,kBAASC,aAC3D,QACA,sBACAH,UACA,CACIhD,KAAAA,KACAiD,SAAAA,0BAWYG,YAACC,UAACA,UAADC,SAAYA,gBAnSF,EAACN,UAAWO,kBACjCC,gBAAkB,CAACtF,gBAAiBuF,WAAazF,QAAQgF,UAAW9E,gBAAiBuF,UAE3FC,SAASC,iBAAiB,SAAStE,QACbA,EAAEuE,OAAOpG,QAAQC,mBAAsBC,KAAKmG,aAAaN,wBAKrEO,SAAWzE,EAAEuE,OAAOpG,QAAQH,yBAC9ByG,WACAzE,EAAEC,iBAEFvB,iBAAiB+F,SAAUN,wBAGzBO,YAAc1E,EAAEuE,OAAOpG,QAAQH,mBACjC0G,cACA1E,EAAEC,iBAEFQ,wBAAwBiE,oBAGtBC,gBAAkB3E,EAAEuE,OAAOpG,QAAQH,uBACrC2G,kBACA3E,EAAEC,iBAEF2B,kBAAkB+C,sBAyQ1BC,CAAuBZ,UAAWC"}