{"version":3,"file":"sort.min.js","sources":["../src/sort.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Content bank UI actions.\r\n *\r\n * @module     core_contentbank/sort\r\n * @copyright  2020 Bas Brands <bas@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport selectors from './selectors';\r\nimport {get_string as getString} from 'core/str';\r\nimport Prefetch from 'core/prefetch';\r\nimport Ajax from 'core/ajax';\r\nimport Notification from 'core/notification';\r\n\r\n/**\r\n * Set up the contentbank views.\r\n *\r\n * @method init\r\n */\r\nexport const init = () => {\r\n    const contentBank = document.querySelector(selectors.regions.contentbank);\r\n    Prefetch.prefetchStrings('contentbank', ['contentname', 'uses', 'lastmodified', 'size', 'type', 'author']);\r\n    Prefetch.prefetchStrings('moodle', ['sortbyx', 'sortbyxreverse']);\r\n    registerListenerEvents(contentBank);\r\n};\r\n\r\n/**\r\n * Register contentbank related event listeners.\r\n *\r\n * @method registerListenerEvents\r\n * @param {HTMLElement} contentBank The DOM node of the content bank\r\n */\r\nconst registerListenerEvents = (contentBank) => {\r\n\r\n    contentBank.addEventListener('click', e => {\r\n        const viewList = contentBank.querySelector(selectors.actions.viewlist);\r\n        const viewGrid = contentBank.querySelector(selectors.actions.viewgrid);\r\n        const fileArea = contentBank.querySelector(selectors.regions.filearea);\r\n        const shownItems = fileArea.querySelectorAll(selectors.elements.listitem);\r\n\r\n        // View as Grid button.\r\n        if (e.target.closest(selectors.actions.viewgrid)) {\r\n            contentBank.classList.remove('view-list');\r\n            contentBank.classList.add('view-grid');\r\n            if (fileArea && shownItems) {\r\n                fileArea.setAttribute('role', 'list');\r\n                shownItems.forEach(listItem => {\r\n                    listItem.setAttribute('role', 'listitem');\r\n                    listItem.querySelectorAll(selectors.elements.cell).forEach(cell => cell.removeAttribute('role'));\r\n                });\r\n\r\n                const heading = fileArea.querySelector(selectors.elements.heading);\r\n                if (heading) {\r\n                    heading.removeAttribute('role');\r\n                    heading.querySelectorAll(selectors.elements.cell).forEach(cell => cell.removeAttribute('role'));\r\n                }\r\n            }\r\n            viewGrid.classList.add('active');\r\n            viewList.classList.remove('active');\r\n            setViewListPreference(false);\r\n\r\n            return;\r\n        }\r\n\r\n        // View as List button.\r\n        if (e.target.closest(selectors.actions.viewlist)) {\r\n            contentBank.classList.remove('view-grid');\r\n            contentBank.classList.add('view-list');\r\n            if (fileArea && shownItems) {\r\n                fileArea.setAttribute('role', 'table');\r\n                shownItems.forEach(listItem => {\r\n                    listItem.setAttribute('role', 'row');\r\n                    listItem.querySelectorAll(selectors.elements.cell).forEach(cell => cell.setAttribute('role', 'cell'));\r\n                });\r\n\r\n                const heading = fileArea.querySelector(selectors.elements.heading);\r\n                if (heading) {\r\n                    heading.setAttribute('role', 'row');\r\n                    heading.querySelectorAll(selectors.elements.cell).forEach(cell => cell.setAttribute('role', 'columnheader'));\r\n                }\r\n            }\r\n            viewList.classList.add('active');\r\n            viewGrid.classList.remove('active');\r\n            setViewListPreference(true);\r\n\r\n            return;\r\n        }\r\n\r\n        if (fileArea && shownItems) {\r\n\r\n            // Sort by file name alphabetical\r\n            const sortByName = e.target.closest(selectors.actions.sortname);\r\n            if (sortByName) {\r\n                const ascending = updateSortButtons(contentBank, sortByName);\r\n                updateSortOrder(fileArea, shownItems, 'data-file', ascending);\r\n                return;\r\n            }\r\n\r\n            // Sort by uses.\r\n            const sortByUses = e.target.closest(selectors.actions.sortuses);\r\n            if (sortByUses) {\r\n                const ascending = updateSortButtons(contentBank, sortByUses);\r\n                updateSortOrder(fileArea, shownItems, 'data-uses', ascending);\r\n                return;\r\n            }\r\n\r\n            // Sort by date.\r\n            const sortByDate = e.target.closest(selectors.actions.sortdate);\r\n            if (sortByDate) {\r\n                const ascending = updateSortButtons(contentBank, sortByDate);\r\n                updateSortOrder(fileArea, shownItems, 'data-timemodified', ascending);\r\n                return;\r\n            }\r\n\r\n            // Sort by size.\r\n            const sortBySize = e.target.closest(selectors.actions.sortsize);\r\n            if (sortBySize) {\r\n                const ascending = updateSortButtons(contentBank, sortBySize);\r\n                updateSortOrder(fileArea, shownItems, 'data-bytes', ascending);\r\n                return;\r\n            }\r\n\r\n            // Sort by type.\r\n            const sortByType = e.target.closest(selectors.actions.sorttype);\r\n            if (sortByType) {\r\n                const ascending = updateSortButtons(contentBank, sortByType);\r\n                updateSortOrder(fileArea, shownItems, 'data-type', ascending);\r\n                return;\r\n            }\r\n\r\n            // Sort by author.\r\n            const sortByAuthor = e.target.closest(selectors.actions.sortauthor);\r\n            if (sortByAuthor) {\r\n                const ascending = updateSortButtons(contentBank, sortByAuthor);\r\n                updateSortOrder(fileArea, shownItems, 'data-author', ascending);\r\n            }\r\n            return;\r\n        }\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Set the contentbank user preference in list view\r\n *\r\n * @param  {Bool} viewList view ContentBank as list.\r\n * @return {Promise} Repository promise.\r\n */\r\nconst setViewListPreference = function(viewList) {\r\n\r\n    // If the given status is not hidden, the preference has to be deleted with a null value.\r\n    if (viewList === false) {\r\n        viewList = null;\r\n    }\r\n\r\n    const request = {\r\n        methodname: 'core_user_update_user_preferences',\r\n        args: {\r\n            preferences: [\r\n                {\r\n                    type: 'core_contentbank_view_list',\r\n                    value: viewList\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    return Ajax.call([request])[0].catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Update the sort button view.\r\n *\r\n * @method updateSortButtons\r\n * @param {HTMLElement} contentBank The DOM node of the contentbank button\r\n * @param {HTMLElement} sortButton The DOM node of the sort button\r\n * @return {Bool} sort ascending\r\n */\r\nconst updateSortButtons = (contentBank, sortButton) => {\r\n    const sortButtons = contentBank.querySelectorAll(selectors.elements.sortbutton);\r\n\r\n    sortButtons.forEach((button) => {\r\n        if (button !== sortButton) {\r\n            button.classList.remove('dir-asc');\r\n            button.classList.remove('dir-desc');\r\n            button.classList.add('dir-none');\r\n\r\n            button.closest(selectors.elements.cell).setAttribute('aria-sort', 'none');\r\n\r\n            updateButtonTitle(button, false);\r\n        }\r\n    });\r\n\r\n    let ascending = true;\r\n\r\n    if (sortButton.classList.contains('dir-none')) {\r\n        sortButton.classList.remove('dir-none');\r\n        sortButton.classList.add('dir-asc');\r\n        sortButton.closest(selectors.elements.cell).setAttribute('aria-sort', 'ascending');\r\n    } else if (sortButton.classList.contains('dir-asc')) {\r\n        sortButton.classList.remove('dir-asc');\r\n        sortButton.classList.add('dir-desc');\r\n        sortButton.closest(selectors.elements.cell).setAttribute('aria-sort', 'descending');\r\n        ascending = false;\r\n    } else if (sortButton.classList.contains('dir-desc')) {\r\n        sortButton.classList.remove('dir-desc');\r\n        sortButton.classList.add('dir-asc');\r\n        sortButton.closest(selectors.elements.cell).setAttribute('aria-sort', 'ascending');\r\n    }\r\n\r\n    updateButtonTitle(sortButton, ascending);\r\n\r\n    return ascending;\r\n};\r\n\r\n/**\r\n * Update the button title.\r\n *\r\n * @method updateButtonTitle\r\n * @param {HTMLElement} button Button to update\r\n * @param {Bool} ascending Sort direction\r\n * @return {Promise} string promise\r\n */\r\nconst updateButtonTitle = (button, ascending) => {\r\n\r\n    const sortString = (ascending ? 'sortbyxreverse' : 'sortbyx');\r\n\r\n    return getString(button.dataset.string, 'contentbank')\r\n    .then(columnName => {\r\n        return getString(sortString, 'core', columnName);\r\n    })\r\n    .then(sortByString => {\r\n        button.setAttribute('title', sortByString);\r\n        return sortByString;\r\n    })\r\n    .catch();\r\n};\r\n\r\n/**\r\n * Update the sort order of the itemlist and update the DOM\r\n *\r\n * @method updateSortOrder\r\n * @param {HTMLElement} fileArea the Dom container for the itemlist\r\n * @param {Array} itemList Nodelist of Dom elements\r\n * @param {String} attribute the attribut to sort on\r\n * @param {Bool} ascending Sort Ascending\r\n */\r\nconst updateSortOrder = (fileArea, itemList, attribute, ascending) => {\r\n    const sortList = [].slice.call(itemList).sort(function(a, b) {\r\n\r\n        let aa = a.getAttribute(attribute);\r\n        let bb = b.getAttribute(attribute);\r\n        if (!isNaN(aa)) {\r\n           aa = parseInt(aa);\r\n           bb = parseInt(bb);\r\n        }\r\n\r\n        if (ascending) {\r\n            return aa > bb ? 1 : -1;\r\n        } else {\r\n            return aa < bb ? 1 : -1;\r\n        }\r\n    });\r\n    sortList.forEach(listItem => fileArea.appendChild(listItem));\r\n};\r\n"],"names":["contentBank","document","querySelector","selectors","regions","contentbank","prefetchStrings","registerListenerEvents","addEventListener","e","viewList","actions","viewlist","viewGrid","viewgrid","fileArea","filearea","shownItems","querySelectorAll","elements","listitem","target","closest","classList","remove","add","setAttribute","forEach","listItem","cell","removeAttribute","heading","setViewListPreference","sortByName","sortname","ascending","updateSortButtons","updateSortOrder","sortByUses","sortuses","sortByDate","sortdate","sortBySize","sortsize","sortByType","sorttype","sortByAuthor","sortauthor","request","methodname","args","preferences","type","value","Ajax","call","catch","Notification","exception","sortButton","sortbutton","button","updateButtonTitle","contains","sortString","dataset","string","then","columnName","sortByString","itemList","attribute","slice","sort","a","b","aa","getAttribute","bb","isNaN","parseInt","appendChild"],"mappings":"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"}