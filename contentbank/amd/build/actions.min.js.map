{"version":3,"file":"actions.min.js","sources":["../src/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Module to manage content bank actions, such as delete or rename.\r\n *\r\n * @module     core_contentbank/actions\r\n * @copyright  2020 Sara Arjona <sara@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/ajax',\r\n    'core/notification',\r\n    'core/str',\r\n    'core/templates',\r\n    'core/url',\r\n    'core/modal_factory',\r\n    'core/modal_events'],\r\nfunction($, Ajax, Notification, Str, Templates, Url, ModalFactory, ModalEvents) {\r\n\r\n    /**\r\n     * List of action selectors.\r\n     *\r\n     * @type {{DELETE_CONTENT: string}}\r\n     */\r\n    var ACTIONS = {\r\n        DELETE_CONTENT: '[data-action=\"deletecontent\"]',\r\n        RENAME_CONTENT: '[data-action=\"renamecontent\"]',\r\n        SET_CONTENT_VISIBILITY: '[data-action=\"setcontentvisibility\"]',\r\n    };\r\n\r\n    /**\r\n     * Actions class.\r\n     */\r\n    var Actions = function() {\r\n        this.registerEvents();\r\n    };\r\n\r\n    /**\r\n     * Register event listeners.\r\n     */\r\n    Actions.prototype.registerEvents = function() {\r\n        $(ACTIONS.DELETE_CONTENT).click(function(e) {\r\n            e.preventDefault();\r\n\r\n            var contentname = $(this).data('contentname');\r\n            var contentuses = $(this).data('uses');\r\n            var contentid = $(this).data('contentid');\r\n            var contextid = $(this).data('contextid');\r\n\r\n            var strings = [\r\n                {\r\n                    key: 'deletecontent',\r\n                    component: 'core_contentbank'\r\n                },\r\n                {\r\n                    key: 'deletecontentconfirm',\r\n                    component: 'core_contentbank',\r\n                    param: {\r\n                        name: contentname,\r\n                    }\r\n                },\r\n                {\r\n                    key: 'deletecontentconfirmlinked',\r\n                    component: 'core_contentbank',\r\n                },\r\n                {\r\n                    key: 'delete',\r\n                    component: 'core'\r\n                },\r\n            ];\r\n\r\n            var deleteButtonText = '';\r\n            Str.get_strings(strings).then(function(langStrings) {\r\n                var modalTitle = langStrings[0];\r\n                var modalContent = langStrings[1];\r\n                if (contentuses > 0) {\r\n                    modalContent += ' ' + langStrings[2];\r\n                }\r\n                deleteButtonText = langStrings[3];\r\n\r\n                return ModalFactory.create({\r\n                    title: modalTitle,\r\n                    body: modalContent,\r\n                    type: ModalFactory.types.SAVE_CANCEL,\r\n                    large: true\r\n                });\r\n            }).done(function(modal) {\r\n                modal.setSaveButtonText(deleteButtonText);\r\n                modal.getRoot().on(ModalEvents.save, function() {\r\n                    // The action is now confirmed, sending an action for it.\r\n                    return deleteContent(contentid, contextid);\r\n                });\r\n\r\n                // Handle hidden event.\r\n                modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    // Destroy when hidden.\r\n                    modal.destroy();\r\n                });\r\n\r\n                // Show the modal.\r\n                modal.show();\r\n\r\n                return;\r\n            }).catch(Notification.exception);\r\n        });\r\n\r\n        $(ACTIONS.RENAME_CONTENT).click(function(e) {\r\n            e.preventDefault();\r\n\r\n            var contentname = $(this).data('contentname');\r\n            var contentid = $(this).data('contentid');\r\n\r\n            var strings = [\r\n                {\r\n                    key: 'renamecontent',\r\n                    component: 'core_contentbank'\r\n                },\r\n                {\r\n                    key: 'rename',\r\n                    component: 'core_contentbank'\r\n                },\r\n            ];\r\n\r\n            var saveButtonText = '';\r\n            Str.get_strings(strings).then(function(langStrings) {\r\n                var modalTitle = langStrings[0];\r\n                saveButtonText = langStrings[1];\r\n\r\n                return ModalFactory.create({\r\n                    title: modalTitle,\r\n                    body: Templates.render('core_contentbank/renamecontent', {'contentid': contentid, 'name': contentname}),\r\n                    type: ModalFactory.types.SAVE_CANCEL\r\n                });\r\n            }).then(function(modal) {\r\n                modal.setSaveButtonText(saveButtonText);\r\n                modal.getRoot().on(ModalEvents.save, function(e) {\r\n                    // The action is now confirmed, sending an action for it.\r\n                    var newname = $(\"#newname\").val().trim();\r\n                    if (newname) {\r\n                        renameContent(contentid, newname);\r\n                    } else {\r\n                        var errorStrings = [\r\n                            {\r\n                                key: 'error',\r\n                            },\r\n                            {\r\n                                key: 'emptynamenotallowed',\r\n                                component: 'core_contentbank',\r\n                            },\r\n                        ];\r\n                        Str.get_strings(errorStrings).then(function(langStrings) {\r\n                            Notification.alert(langStrings[0], langStrings[1]);\r\n                        }).catch(Notification.exception);\r\n                        e.preventDefault();\r\n                    }\r\n                });\r\n\r\n                // Handle hidden event.\r\n                modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    // Destroy when hidden.\r\n                    modal.destroy();\r\n                });\r\n\r\n                // Show the modal.\r\n                modal.show();\r\n\r\n                return;\r\n            }).catch(Notification.exception);\r\n        });\r\n\r\n        $(ACTIONS.SET_CONTENT_VISIBILITY).click(function(e) {\r\n            e.preventDefault();\r\n\r\n            var contentid = $(this).data('contentid');\r\n            var visibility = $(this).data('visibility');\r\n\r\n            setContentVisibility(contentid, visibility);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Delete content from the content bank.\r\n     *\r\n     * @param {int} contentid The content to delete.\r\n     * @param {int} contextid The contextid where the content belongs.\r\n     */\r\n    function deleteContent(contentid, contextid) {\r\n        var request = {\r\n            methodname: 'core_contentbank_delete_content',\r\n            args: {\r\n                contentids: {contentid}\r\n            }\r\n        };\r\n\r\n        var requestType = 'success';\r\n        Ajax.call([request])[0].then(function(data) {\r\n            if (data.result) {\r\n                return 'contentdeleted';\r\n            }\r\n            requestType = 'error';\r\n            return 'contentnotdeleted';\r\n\r\n        }).done(function(message) {\r\n            var params = {\r\n                contextid: contextid\r\n            };\r\n            if (requestType == 'success') {\r\n                params.statusmsg = message;\r\n            } else {\r\n                params.errormsg = message;\r\n            }\r\n            // Redirect to the main content bank page and display the message as a notification.\r\n            window.location.href = Url.relativeUrl('contentbank/index.php', params, false);\r\n        }).fail(Notification.exception);\r\n    }\r\n\r\n    /**\r\n     * Rename content in the content bank.\r\n     *\r\n     * @param {int} contentid The content to rename.\r\n     * @param {string} name The new name for the content.\r\n     */\r\n    function renameContent(contentid, name) {\r\n        var request = {\r\n            methodname: 'core_contentbank_rename_content',\r\n            args: {\r\n                contentid: contentid,\r\n                name: name\r\n            }\r\n        };\r\n        var requestType = 'success';\r\n        Ajax.call([request])[0].then(function(data) {\r\n            if (data.result) {\r\n                return 'contentrenamed';\r\n            }\r\n            requestType = 'error';\r\n            return data.warnings[0].message;\r\n\r\n        }).then(function(message) {\r\n            var params = null;\r\n            if (requestType == 'success') {\r\n                params = {\r\n                    id: contentid,\r\n                    statusmsg: message\r\n                };\r\n                // Redirect to the content view page and display the message as a notification.\r\n                window.location.href = Url.relativeUrl('contentbank/view.php', params, false);\r\n            } else {\r\n                // Fetch error notifications.\r\n                Notification.addNotification({\r\n                    message: message,\r\n                    type: 'error'\r\n                });\r\n                Notification.fetchNotifications();\r\n            }\r\n            return;\r\n        }).catch(Notification.exception);\r\n    }\r\n\r\n    /**\r\n     * Set content visibility in the content bank.\r\n     *\r\n     * @param {int} contentid The content to modify\r\n     * @param {int} visibility The new visibility value\r\n     */\r\n    function setContentVisibility(contentid, visibility) {\r\n        var request = {\r\n            methodname: 'core_contentbank_set_content_visibility',\r\n            args: {\r\n                contentid: contentid,\r\n                visibility: visibility\r\n            }\r\n        };\r\n        var requestType = 'success';\r\n        Ajax.call([request])[0].then(function(data) {\r\n            if (data.result) {\r\n                return 'contentvisibilitychanged';\r\n            }\r\n            requestType = 'error';\r\n            return data.warnings[0].message;\r\n\r\n        }).then(function(message) {\r\n            var params = null;\r\n            if (requestType == 'success') {\r\n                params = {\r\n                    id: contentid,\r\n                    statusmsg: message\r\n                };\r\n                // Redirect to the content view page and display the message as a notification.\r\n                window.location.href = Url.relativeUrl('contentbank/view.php', params, false);\r\n            } else {\r\n                // Fetch error notifications.\r\n                Notification.addNotification({\r\n                    message: message,\r\n                    type: 'error'\r\n                });\r\n                Notification.fetchNotifications();\r\n            }\r\n            return;\r\n        }).catch(Notification.exception);\r\n    }\r\n\r\n    return /** @alias module:core_contentbank/actions */ {\r\n        // Public variables and functions.\r\n\r\n        /**\r\n         * Initialise the contentbank actions.\r\n         *\r\n         * @method init\r\n         * @return {Actions}\r\n         */\r\n        'init': function() {\r\n            return new Actions();\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","Ajax","Notification","Str","Templates","Url","ModalFactory","ModalEvents","ACTIONS","Actions","registerEvents","prototype","click","e","preventDefault","contentname","this","data","contentuses","contentid","contextid","strings","key","component","param","name","deleteButtonText","get_strings","then","langStrings","modalTitle","modalContent","create","title","body","type","types","SAVE_CANCEL","large","done","modal","setSaveButtonText","getRoot","on","save","request","methodname","args","contentids","requestType","call","result","message","params","statusmsg","errormsg","window","location","href","relativeUrl","fail","exception","deleteContent","hidden","destroy","show","catch","saveButtonText","render","newname","val","trim","warnings","id","addNotification","fetchNotifications","renameContent","alert","visibility","setContentVisibility"],"mappings":"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"}