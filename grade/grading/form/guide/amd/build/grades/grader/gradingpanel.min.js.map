{"version":3,"file":"gradingpanel.min.js","sources":["../../../src/grades/grader/gradingpanel.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Grading panel for gradingform_guide.\r\n *\r\n * @module     gradingform_guide/grades/grader/gradingpanel\r\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {call as fetchMany} from 'core/ajax';\r\nimport {normaliseResult} from 'core_grades/grades/grader/gradingpanel/normalise';\r\nimport {compareData} from 'core_grades/grades/grader/gradingpanel/comparison';\r\n\r\n// Note: We use jQuery.serializer here until we can rewrite Ajax to use XHR.send()\r\nimport jQuery from 'jquery';\r\n\r\n/**\r\n * For a given component, contextid, itemname & gradeduserid we can fetch the currently assigned grade.\r\n *\r\n * @param {String} component\r\n * @param {Number} contextid\r\n * @param {String} itemname\r\n * @param {Number} gradeduserid\r\n *\r\n * @returns {Promise}\r\n */\r\nexport const fetchCurrentGrade = (component, contextid, itemname, gradeduserid) => {\r\n    return fetchMany([{\r\n        methodname: `gradingform_guide_grader_gradingpanel_fetch`,\r\n        args: {\r\n            component,\r\n            contextid,\r\n            itemname,\r\n            gradeduserid,\r\n        },\r\n    }])[0];\r\n};\r\n\r\n/**\r\n * For a given component, contextid, itemname & gradeduserid we can store the currently assigned grade in a given form.\r\n *\r\n * @param {String} component\r\n * @param {Number} contextid\r\n * @param {String} itemname\r\n * @param {Number} gradeduserid\r\n * @param {Boolean} notifyUser\r\n * @param {HTMLElement} rootNode\r\n *\r\n * @returns {Promise}\r\n */\r\nexport const storeCurrentGrade = async(component, contextid, itemname, gradeduserid, notifyUser, rootNode) => {\r\n    const form = rootNode.querySelector('form');\r\n\r\n    if (compareData(form) === true) {\r\n        return normaliseResult(await fetchMany([{\r\n            methodname: `gradingform_guide_grader_gradingpanel_store`,\r\n            args: {\r\n                component,\r\n                contextid,\r\n                itemname,\r\n                gradeduserid,\r\n                notifyuser: notifyUser,\r\n                formdata: jQuery(form).serialize(),\r\n            },\r\n        }])[0]);\r\n    } else {\r\n        return '';\r\n    }\r\n};\r\n"],"names":["component","contextid","itemname","gradeduserid","methodname","args","async","notifyUser","rootNode","form","querySelector","notifyuser","formdata","serialize"],"mappings":";;;;;;;6MAwCiC,CAACA,UAAWC,UAAWC,SAAUC,gBACvD,cAAU,CAAC,CACdC,yDACAC,KAAM,CACFL,UAAAA,UACAC,UAAAA,UACAC,SAAAA,SACAC,aAAAA,iBAEJ,8BAeyBG,MAAMN,UAAWC,UAAWC,SAAUC,aAAcI,WAAYC,kBACvFC,KAAOD,SAASE,cAAc,eAEV,KAAtB,2BAAYD,OACL,oCAAsB,cAAU,CAAC,CACpCL,yDACAC,KAAM,CACFL,UAAAA,UACAC,UAAAA,UACAC,SAAAA,SACAC,aAAAA,aACAQ,WAAYJ,WACZK,UAAU,mBAAOH,MAAMI,gBAE3B,IAEG"}