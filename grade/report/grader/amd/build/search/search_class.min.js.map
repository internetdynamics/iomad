{"version":3,"file":"search_class.min.js","sources":["../../src/search/search_class.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport $ from 'jquery';\r\nimport CustomEvents from \"core/custom_interaction_events\";\r\nimport {debounce} from 'core/utils';\r\n\r\n/**\r\n * The class that manages the state of the search.\r\n *\r\n * @module    gradereport_grader/search/search_class\r\n * @copyright 2023 Mathew May <mathew.solutions>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n// Reused variables for the class.\r\nconst events = [\r\n    'keydown',\r\n    CustomEvents.events.activate,\r\n    CustomEvents.events.keyboardActivate\r\n];\r\nconst UP = -1;\r\nconst DOWN = 1;\r\n\r\nexport default class {\r\n    // Define our standard lookups.\r\n    selectors = {\r\n        component: this.setComponentSelector(),\r\n        trigger: this.setTriggerSelector(),\r\n        input: '[data-action=\"search\"]',\r\n        clearSearch: '[data-action=\"clearsearch\"]',\r\n        dropdown: this.setDropdownSelector(),\r\n        resultitems: '[role=\"option\"]',\r\n        viewall: '#select-all',\r\n    };\r\n\r\n    // The results from the called filter function.\r\n    matchedResults = [];\r\n\r\n    // What did the user search for?\r\n    searchTerm = '';\r\n\r\n    // What the user searched for as a lowercase.\r\n    preppedSearchTerm = null;\r\n\r\n    // The DOM nodes after the dropdown render.\r\n    resultNodes = [];\r\n\r\n    // Where does the user currently have focus?\r\n    currentNode = null;\r\n\r\n    // The current node for the view all link.\r\n    currentViewAll = null;\r\n\r\n    dataset = null;\r\n\r\n    datasetSize = 0;\r\n\r\n    // DOM nodes that persist.\r\n    component = document.querySelector(this.selectors.component);\r\n    searchInput = this.component.querySelector(this.selectors.input);\r\n    searchDropdown = this.component.querySelector(this.selectors.dropdown);\r\n    $searchButton = $(this.selectors.trigger);\r\n    clearSearchButton = this.component.querySelector(this.selectors.clearSearch);\r\n    $component = $(this.component);\r\n\r\n    constructor() {\r\n        // If we have a search input, try to get the value otherwise fallback.\r\n        this.setSearchTerms(this.searchInput?.value ?? '');\r\n        // Begin handling the base search component.\r\n        this.registerClickHandlers();\r\n        this.registerKeyHandlers();\r\n        // Conditionally set up the input handler since we don't know exactly how we were called.\r\n        if (this.searchInput !== null) {\r\n            this.registerInputHandlers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     */\r\n    fetchDataset() {\r\n        throw new Error(`fetchDataset() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     * @param {Array} dataset\r\n     */\r\n    filterDataset(dataset) {\r\n        throw new Error(`filterDataset(${dataset}) must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     */\r\n    filterMatchDataset() {\r\n        throw new Error(`filterMatchDataset() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     */\r\n    renderDropdown() {\r\n        throw new Error(`renderDropdown() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     */\r\n    setComponentSelector() {\r\n        throw new Error(`setComponentSelector() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     */\r\n    setDropdownSelector() {\r\n        throw new Error(`setDropdownSelector() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Stub out a required function.\r\n     */\r\n    setTriggerSelector() {\r\n        throw new Error(`setTriggerSelector() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Return the dataset that we will be searching upon.\r\n     *\r\n     * @returns {Promise<null>}\r\n     */\r\n    async getDataset() {\r\n        if (!this.dataset) {\r\n            this.dataset = await this.fetchDataset();\r\n        }\r\n        this.datasetSize = this.dataset.length;\r\n        return this.dataset;\r\n    }\r\n\r\n    /**\r\n     * Return the size of the dataset.\r\n     *\r\n     * @returns {number}\r\n     */\r\n    getDatasetSize() {\r\n        return this.datasetSize;\r\n    }\r\n\r\n    /**\r\n     * Return the results of the filter upon the dataset.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    getMatchedResults() {\r\n        return this.matchedResults;\r\n    }\r\n\r\n    /**\r\n     * Given a filter has been run across the dataset, store the matched results.\r\n     *\r\n     * @param {Array} result\r\n     */\r\n    setMatchedResults(result) {\r\n        this.matchedResults = result;\r\n    }\r\n\r\n    /**\r\n     * Get the value that the user entered.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getSearchTerm() {\r\n        return this.searchTerm;\r\n    }\r\n\r\n    /**\r\n     * Get the transformed search value.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getPreppedSearchTerm() {\r\n        return this.preppedSearchTerm;\r\n    }\r\n\r\n    /**\r\n     * When a user searches for something, set our variable to manage it.\r\n     *\r\n     * @param {string} result\r\n     */\r\n    setSearchTerms(result) {\r\n        this.searchTerm = result;\r\n        this.preppedSearchTerm = result.toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Return an object containing a handfull of dom nodes that we sometimes need the value of.\r\n     *\r\n     * @returns {object}\r\n     */\r\n    getHTMLElements() {\r\n        this.updateNodes();\r\n        return {\r\n            searchDropdown: this.searchDropdown,\r\n            currentViewAll: this.currentViewAll,\r\n            searchInput: this.searchInput,\r\n            clearSearchButton: this.clearSearchButton\r\n        };\r\n    }\r\n\r\n    /**\r\n     * When called, close the dropdown and reset the input field attributes.\r\n     *\r\n     * @param {Boolean} clear Conditionality clear the input box.\r\n     */\r\n    closeSearch(clear = false) {\r\n        this.toggleDropdown();\r\n        // Hide the \"clear\" search button search bar.\r\n        this.clearSearchButton.classList.add('d-none');\r\n        if (clear) {\r\n            // Clear the entered search query in the search bar and hide the search results container.\r\n            this.setSearchTerms('');\r\n            this.searchInput.value = \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When called, update the dropdown fields.\r\n     *\r\n     * @param {Boolean} on Flag to toggle hiding or showing values.\r\n     */\r\n    toggleDropdown(on = false) {\r\n        this.$component.dropdown('toggle');\r\n        this.$searchButton.attr('aria-expanded', on);\r\n        if (on) {\r\n            this.searchDropdown.classList.add('show');\r\n            $(this.searchDropdown).show();\r\n        } else {\r\n            this.searchDropdown.classList.remove('show');\r\n            $(this.searchDropdown).hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * These class members change when a new result set is rendered. So update for fresh data.\r\n     */\r\n    updateNodes() {\r\n        this.resultNodes = [...this.component.querySelectorAll(this.selectors.resultitems)];\r\n        this.currentNode = this.resultNodes.find(r => r.id === document.activeElement.id);\r\n        this.currentViewAll = this.component.querySelector(this.selectors.viewall);\r\n        this.clearSearchButton = this.component.querySelector(this.selectors.clearSearch);\r\n        this.searchInput = this.component.querySelector(this.selectors.input);\r\n        this.searchDropdown = this.component.querySelector(this.selectors.dropdown);\r\n    }\r\n\r\n    /**\r\n     * Register clickable event listeners.\r\n     */\r\n    registerClickHandlers() {\r\n        // Prevent the click triggering the dropdown.\r\n        this.$searchButton.on('click', () => {\r\n            this.toggleDropdown();\r\n        });\r\n\r\n        // Register click events within the component.\r\n        this.component.addEventListener('click', this.clickHandler.bind(this));\r\n\r\n        // Register a small click event onto the document since we need to check if they are clicking off the component.\r\n        document.addEventListener('click', (e) => {\r\n            // Since we are handling dropdowns manually, ensure we can close it when clicking off.\r\n            if (!e.target.closest(this.selectors.component) && this.searchDropdown.classList.contains('show')) {\r\n                this.toggleDropdown();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register key event listeners.\r\n     */\r\n    registerKeyHandlers() {\r\n        CustomEvents.define(document, events);\r\n\r\n        // Register click events.\r\n        events.forEach((event) => {\r\n            this.component.addEventListener(event, this.keyHandler.bind(this));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register input event listener for the text input area.\r\n     */\r\n    registerInputHandlers() {\r\n        // Register & handle the text input.\r\n        this.searchInput.addEventListener('input', debounce(async() => {\r\n            this.setSearchTerms(this.searchInput.value);\r\n            // We can also require a set amount of input before search.\r\n            if (this.getSearchTerm() === '') {\r\n                this.toggleDropdown();\r\n                // Hide the \"clear\" search button in the search bar.\r\n                this.clearSearchButton.classList.add('d-none');\r\n            } else {\r\n                // Display the \"clear\" search button in the search bar.\r\n                this.clearSearchButton.classList.remove('d-none');\r\n                await this.renderAndShow();\r\n            }\r\n        }, 300));\r\n    }\r\n\r\n    /**\r\n     * A combo method to take the matching fields and render out the results.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    async renderAndShow() {\r\n        // User has given something for us to filter against.\r\n        this.setMatchedResults(await this.filterDataset(await this.getDataset()));\r\n        await this.filterMatchDataset();\r\n        // Replace the dropdown node contents and show the results.\r\n        await this.renderDropdown();\r\n        // Set the dropdown to open.\r\n        this.toggleDropdown(true);\r\n    }\r\n\r\n    /**\r\n     * Set the current focus either on the preceding or next result item.\r\n     *\r\n     * @param {Number} direction Is the user moving up or down the resultset?\r\n     * @param {KeyboardEvent} e The JS event from the event handler.\r\n     */\r\n    keyUpDown(direction, e) {\r\n        e.preventDefault();\r\n        // Stop Bootstrap from being clever.\r\n        e.stopPropagation();\r\n        // Current focus is on the input box so depending on direction, go to the top or the bottom of the displayed results.\r\n        if (document.activeElement === this.searchInput && this.resultNodes.length > 0) {\r\n            if (direction === UP) {\r\n                this.moveToLastNode();\r\n            } else {\r\n                this.moveToFirstNode();\r\n            }\r\n        }\r\n        const index = this.resultNodes.indexOf(this.currentNode);\r\n        if (this.currentNode) {\r\n            if (direction === UP) {\r\n                if (index === 0) {\r\n                    this.moveToLastNode();\r\n                } else {\r\n                    this.moveToNode(index - 1);\r\n                }\r\n            } else {\r\n                if (index + 1 >= this.resultNodes.length) {\r\n                    this.moveToFirstNode();\r\n                } else {\r\n                    this.moveToNode(index + 1);\r\n                }\r\n            }\r\n        } else {\r\n            if (direction === UP) {\r\n                this.moveToLastNode();\r\n            } else {\r\n                this.moveToFirstNode();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The handler for when a user interacts with the component.\r\n     *\r\n     * @param {MouseEvent} e The triggering event that we are working with.\r\n     */\r\n    async clickHandler(e) {\r\n        this.updateNodes();\r\n\r\n        // Prevent normal key presses activating this.\r\n        if (e.target.closest('.dropdown-item') && e.button === 0) {\r\n            window.location = e.target.closest('.dropdown-item').href;\r\n        }\r\n        // The \"clear search\" button is triggered.\r\n        if (e.target.closest(this.selectors.clearSearch) && e.button === 0) {\r\n            this.closeSearch(true);\r\n            this.searchInput.focus({preventScroll: true});\r\n        }\r\n        // User may have accidentally clicked off the dropdown and wants to reopen it.\r\n        if (e.target.closest(this.selectors.input) && this.getSearchTerm() !== '' && e.button === 0) {\r\n            await this.renderAndShow();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The handler for when a user presses a key within the component.\r\n     *\r\n     * @param {KeyboardEvent} e The triggering event that we are working with.\r\n     */\r\n    keyHandler(e) {\r\n        this.updateNodes();\r\n        // Switch the key presses to handle keyboard nav.\r\n        switch (e.key) {\r\n            case 'ArrowUp':\r\n                this.keyUpDown(UP, e);\r\n                break;\r\n            case 'ArrowDown':\r\n                this.keyUpDown(DOWN, e);\r\n                break;\r\n            case 'Home':\r\n                e.preventDefault();\r\n                this.moveToFirstNode();\r\n                break;\r\n            case 'End':\r\n                e.preventDefault();\r\n                this.moveToLastNode();\r\n                break;\r\n            case 'Tab':\r\n                // If the current focus is on the view all link, then close the widget then set focus on the next tertiary nav item.\r\n                if (e.target.closest(this.selectors.viewall)) {\r\n                    this.closeSearch();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set focus on a given node after parsed through the calling functions.\r\n     *\r\n     * @param {HTMLElement} node The node to set focus upon.\r\n     */\r\n    selectNode = (node) => {\r\n        node.focus({preventScroll: true});\r\n        this.searchDropdown.scrollTop = node.offsetTop - (node.clientHeight / 2);\r\n    };\r\n\r\n    /**\r\n     * Set the focus on the first node within the array.\r\n     */\r\n    moveToFirstNode = () => {\r\n        if (this.resultNodes.length > 0) {\r\n            this.selectNode(this.resultNodes[0]);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set the focus to the final node within the array.\r\n     */\r\n    moveToLastNode = () => {\r\n        if (this.resultNodes.length > 0) {\r\n            this.selectNode(this.resultNodes[this.resultNodes.length - 1]);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set focus on any given specified node within the node array.\r\n     *\r\n     * @param {Number} index Which item within the array to set focus upon.\r\n     */\r\n    moveToNode = (index) => {\r\n        if (this.resultNodes.length > 0) {\r\n            this.selectNode(this.resultNodes[index]);\r\n        }\r\n    };\r\n}\r\n"],"names":["events","activate","CustomEvents","keyboardActivate","constructor","component","this","setComponentSelector","trigger","setTriggerSelector","input","clearSearch","dropdown","setDropdownSelector","resultitems","viewall","document","querySelector","selectors","node","focus","preventScroll","searchDropdown","scrollTop","offsetTop","clientHeight","resultNodes","length","selectNode","index","setSearchTerms","searchInput","_this$searchInput","value","registerClickHandlers","registerKeyHandlers","registerInputHandlers","fetchDataset","Error","name","filterDataset","dataset","filterMatchDataset","renderDropdown","datasetSize","getDatasetSize","getMatchedResults","matchedResults","setMatchedResults","result","getSearchTerm","searchTerm","getPreppedSearchTerm","preppedSearchTerm","toLowerCase","getHTMLElements","updateNodes","currentViewAll","clearSearchButton","closeSearch","clear","toggleDropdown","classList","add","on","$component","$searchButton","attr","show","remove","hide","querySelectorAll","currentNode","find","r","id","activeElement","addEventListener","clickHandler","bind","e","target","closest","contains","define","forEach","event","keyHandler","async","renderAndShow","getDataset","keyUpDown","direction","preventDefault","stopPropagation","moveToLastNode","moveToFirstNode","indexOf","moveToNode","button","window","location","href","key"],"mappings":"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"}