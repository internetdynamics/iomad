{"version":3,"file":"collapse.min.js","sources":["../src/collapse.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Allow the user to show and hide columns of the report at will.\r\n *\r\n * @module    gradereport_grader/collapse\r\n * @copyright 2023 Mathew May <mathew.solutions>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport * as Repository from 'gradereport_grader/collapse/repository';\r\nimport GradebookSearchClass from 'gradereport_grader/search/search_class';\r\nimport {renderForPromise, replaceNodeContents, replaceNode} from 'core/templates';\r\nimport {debounce} from 'core/utils';\r\nimport $ from 'jquery';\r\nimport {get_strings as getStrings} from 'core/str';\r\nimport CustomEvents from \"core/custom_interaction_events\";\r\nimport storage from 'core/localstorage';\r\nimport {addIconToContainer} from 'core/loadingicon';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\n\r\n// Contain our selectors within this file until they could be of use elsewhere.\r\nconst selectors = {\r\n    component: '.collapse-columns',\r\n    formDropdown: '.columnsdropdownform',\r\n    formItems: {\r\n        cancel: 'cancel',\r\n        save: 'save',\r\n        checked: 'input[type=\"checkbox\"]:checked'\r\n    },\r\n    hider: 'hide',\r\n    expand: 'expand',\r\n    colVal: '[data-col]',\r\n    itemVal: '[data-itemid]',\r\n    content: '[data-collapse=\"content\"]',\r\n    sort: '[data-collapse=\"sort\"]',\r\n    expandbutton: '[data-collapse=\"expandbutton\"]',\r\n    rangerowcell: '[data-collapse=\"rangerowcell\"]',\r\n    avgrowcell: '[data-collapse=\"avgrowcell\"]',\r\n    menu: '[data-collapse=\"menu\"]',\r\n    icons: '.data-collapse_gradeicons',\r\n    count: '[data-collapse=\"count\"]',\r\n    placeholder: '.collapsecolumndropdown [data-region=\"placeholder\"]',\r\n    fullDropdown: '.collapsecolumndropdown',\r\n};\r\n\r\nconst countIndicator = document.querySelector(selectors.count);\r\n\r\nexport default class ColumnSearch extends GradebookSearchClass {\r\n\r\n    userID = -1;\r\n    courseID = null;\r\n    defaultSort = '';\r\n\r\n    nodes = [];\r\n\r\n    gradeStrings = null;\r\n    userStrings = null;\r\n    stringMap = [];\r\n\r\n    static init(userID, courseID, defaultSort) {\r\n        return new ColumnSearch(userID, courseID, defaultSort);\r\n    }\r\n\r\n    constructor(userID, courseID, defaultSort) {\r\n        super();\r\n        this.userID = userID;\r\n        this.courseID = courseID;\r\n        this.defaultSort = defaultSort;\r\n        this.component = document.querySelector(selectors.component);\r\n\r\n        const pendingPromise = new Pending();\r\n        // Display a loader whilst collapsing appropriate columns (based on the locally stored state for the current user).\r\n        addIconToContainer(document.querySelector('.gradeparent')).then((loader) => {\r\n            setTimeout(() => {\r\n                // Get the users' checked columns to change.\r\n                this.getDataset().forEach((item) => {\r\n                    this.nodesUpdate(item);\r\n                });\r\n                this.renderDefault();\r\n\r\n                // Once the grade categories have been re-collapsed, remove the loader and display the Gradebook setup content.\r\n                loader.remove();\r\n                document.querySelector('.gradereport-grader-table').classList.remove('d-none');\r\n            }, 10);\r\n        }).then(() => pendingPromise.resolve()).catch(Notification.exception);\r\n    }\r\n\r\n    /**\r\n     * The overall div that contains the searching widget.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    setComponentSelector() {\r\n        return '.collapse-columns';\r\n    }\r\n\r\n    /**\r\n     * The dropdown div that contains the searching widget result space.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    setDropdownSelector() {\r\n        return '.searchresultitemscontainer';\r\n    }\r\n\r\n    /**\r\n     * The triggering div that contains the searching widget.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    setTriggerSelector() {\r\n        return '.collapsecolumn';\r\n    }\r\n\r\n    /**\r\n     * Return the dataset that we will be searching upon.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    getDataset() {\r\n        if (!this.dataset) {\r\n            const cols = this.fetchDataset();\r\n            this.dataset = JSON.parse(cols) ? JSON.parse(cols).split(',') : [];\r\n        }\r\n        this.datasetSize = this.dataset.length;\r\n        return this.dataset;\r\n    }\r\n\r\n    /**\r\n     * Get the data we will be searching against in this component.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    fetchDataset() {\r\n        return storage.get(`gradereport_grader_collapseditems_${this.courseID}_${this.userID}`);\r\n    }\r\n\r\n    /**\r\n     * Given a user performs an action, update the users' preferences.\r\n     */\r\n    setPreferences() {\r\n        storage.set(`gradereport_grader_collapseditems_${this.courseID}_${this.userID}`,\r\n            JSON.stringify(this.getDataset().join(','))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Register clickable event listeners.\r\n     */\r\n    registerClickHandlers() {\r\n        // Register click events within the component.\r\n        this.component.addEventListener('click', this.clickHandler.bind(this));\r\n\r\n        document.addEventListener('click', this.docClickHandler.bind(this));\r\n    }\r\n\r\n    /**\r\n     * The handler for when a user interacts with the component.\r\n     *\r\n     * @param {MouseEvent} e The triggering event that we are working with.\r\n     */\r\n    clickHandler(e) {\r\n        super.clickHandler(e);\r\n        // Prevent BS from closing the dropdown if they click elsewhere within the dropdown besides the form.\r\n        if (e.target.closest(selectors.fullDropdown)) {\r\n            e.stopPropagation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Externally defined click function to improve memory handling.\r\n     *\r\n     * @param {MouseEvent} e\r\n     * @returns {Promise<void>}\r\n     */\r\n    async docClickHandler(e) {\r\n        if (e.target.dataset.hider === selectors.hider) {\r\n            e.preventDefault();\r\n            const desiredToHide = e.target.closest(selectors.colVal) ?\r\n                e.target.closest(selectors.colVal)?.dataset.col :\r\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\r\n            const idx = this.getDataset().indexOf(desiredToHide);\r\n            if (idx === -1) {\r\n                this.getDataset().push(desiredToHide);\r\n            }\r\n            await this.prefcountpippe();\r\n\r\n            this.nodesUpdate(desiredToHide);\r\n        }\r\n\r\n        if (e.target.closest('button')?.dataset.hider === selectors.expand) {\r\n            e.preventDefault();\r\n            const desiredToHide = e.target.closest(selectors.colVal) ?\r\n                e.target.closest(selectors.colVal)?.dataset.col :\r\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\r\n            const idx = this.getDataset().indexOf(desiredToHide);\r\n            this.getDataset().splice(idx, 1);\r\n\r\n            await this.prefcountpippe();\r\n\r\n            this.nodesUpdate(e.target.closest(selectors.colVal)?.dataset.col);\r\n            this.nodesUpdate(e.target.closest(selectors.colVal)?.dataset.itemid);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The handler for when a user presses a key within the component.\r\n     *\r\n     * @param {KeyboardEvent} e The triggering event that we are working with.\r\n     */\r\n    async keyHandler(e) {\r\n        super.keyHandler(e);\r\n\r\n        // Switch the key presses to handle keyboard nav.\r\n        switch (e.key) {\r\n            case 'Tab':\r\n                if (e.target.closest(this.selectors.input)) {\r\n                    e.preventDefault();\r\n                    this.clearSearchButton.focus({preventScroll: true});\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle any keyboard inputs.\r\n     */\r\n    registerInputEvents() {\r\n        // Register & handle the text input.\r\n        this.searchInput.addEventListener('input', debounce(async() => {\r\n            this.setSearchTerms(this.searchInput.value);\r\n            // We can also require a set amount of input before search.\r\n            if (this.searchInput.value === '') {\r\n                // Hide the \"clear\" search button in the search bar.\r\n                this.clearSearchButton.classList.add('d-none');\r\n            } else {\r\n                // Display the \"clear\" search button in the search bar.\r\n                this.clearSearchButton.classList.remove('d-none');\r\n            }\r\n            // User has given something for us to filter against.\r\n            await this.filterrenderpipe();\r\n        }, 300));\r\n    }\r\n\r\n    /**\r\n     * Handle the form submission within the dropdown.\r\n     */\r\n    registerFormEvents() {\r\n        const form = this.component.querySelector(selectors.formDropdown);\r\n        const events = [\r\n            'click',\r\n            CustomEvents.events.activate,\r\n            CustomEvents.events.keyboardActivate\r\n        ];\r\n        CustomEvents.define(document, events);\r\n\r\n        // Register clicks & keyboard form handling.\r\n        events.forEach((event) => {\r\n            form.addEventListener(event, (e) => {\r\n                // Stop Bootstrap from being clever.\r\n                e.stopPropagation();\r\n                const submitBtn = form.querySelector(`[data-action=\"${selectors.formItems.save}\"`);\r\n                if (e.target.closest('input')) {\r\n                    const checkedCount = Array.from(form.querySelectorAll(selectors.formItems.checked)).length;\r\n                    // Check if any are clicked or not then change disabled.\r\n                    submitBtn.disabled = checkedCount <= 0;\r\n                }\r\n            }, false);\r\n\r\n            // Stop Bootstrap from being clever.\r\n            this.searchInput.addEventListener(event, e => e.stopPropagation());\r\n            this.clearSearchButton.addEventListener(event, async(e) => {\r\n                e.stopPropagation();\r\n                this.searchInput.value = '';\r\n                this.setSearchTerms(this.searchInput.value);\r\n                await this.filterrenderpipe();\r\n            });\r\n        });\r\n\r\n        form.addEventListener('submit', async(e) => {\r\n            e.preventDefault();\r\n            if (e.submitter.dataset.action === selectors.formItems.cancel) {\r\n                $(this.component).dropdown('toggle');\r\n                return;\r\n            }\r\n            // Get the users' checked columns to change.\r\n            const checkedItems = [...form.elements].filter(item => item.checked);\r\n            checkedItems.forEach((item) => {\r\n                const idx = this.getDataset().indexOf(item.dataset.collapse);\r\n                this.getDataset().splice(idx, 1);\r\n                this.nodesUpdate(item.dataset.collapse);\r\n            });\r\n            await this.prefcountpippe();\r\n        });\r\n    }\r\n\r\n    nodesUpdate(item) {\r\n        const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${item}\"]`)];\r\n        const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${item}\"]`)];\r\n        this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\r\n        this.updateDisplay();\r\n    }\r\n\r\n    /**\r\n     * Update the user preferences, count display then render the results.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    async prefcountpippe() {\r\n        this.setPreferences();\r\n        this.countUpdate();\r\n        await this.filterrenderpipe();\r\n    }\r\n\r\n    /**\r\n     * Dictate to the search component how and what we want to match upon.\r\n     *\r\n     * @param {Array} filterableData\r\n     * @returns {Array} An array of objects containing the system reference and the user readable value.\r\n     */\r\n    async filterDataset(filterableData) {\r\n        const stringUserMap = await this.fetchRequiredUserStrings();\r\n        const stringGradeMap = await this.fetchRequiredGradeStrings();\r\n        // Custom user profile fields are not in our string map and need a bit of extra love.\r\n        const customFieldMap = this.fetchCustomFieldValues();\r\n        this.stringMap = new Map([...stringGradeMap, ...stringUserMap, ...customFieldMap]);\r\n\r\n        const searching = filterableData.map(s => {\r\n            const mapObj = this.stringMap.get(s);\r\n            if (mapObj === undefined) {\r\n                return {key: s, string: s};\r\n            }\r\n            return {\r\n                key: s,\r\n                string: mapObj.itemname ?? this.stringMap.get(s),\r\n                category: mapObj.category ?? '',\r\n            };\r\n        });\r\n        // Sometimes we just want to show everything.\r\n        if (this.getPreppedSearchTerm() === '') {\r\n            return searching;\r\n        }\r\n        // Other times we want to actually filter the content.\r\n        return searching.filter((col) => {\r\n            return col.string.toString().toLowerCase().includes(this.getPreppedSearchTerm());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\r\n     */\r\n    filterMatchDataset() {\r\n        this.setMatchedResults(\r\n            this.getMatchedResults().map((column) => {\r\n                return {\r\n                    name: column.key,\r\n                    displayName: column.string ?? column.key,\r\n                    category: column.category ?? '',\r\n                };\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update any changeable nodes, filter and then render the result.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    async filterrenderpipe() {\r\n        this.updateNodes();\r\n        this.setMatchedResults(await this.filterDataset(this.getDataset()));\r\n        this.filterMatchDataset();\r\n        await this.renderDropdown();\r\n    }\r\n\r\n    /**\r\n     * With an array of nodes, switch their classes and values.\r\n     */\r\n    updateDisplay() {\r\n        this.nodes.forEach((element) => {\r\n            const content = element.querySelector(selectors.content);\r\n            const sort = element.querySelector(selectors.sort);\r\n            const expandButton = element.querySelector(selectors.expandbutton);\r\n            const rangeRowCell = element.querySelector(selectors.rangerowcell);\r\n            const avgRowCell = element.querySelector(selectors.avgrowcell);\r\n            const nodeSet = [\r\n                element.querySelector(selectors.menu),\r\n                element.querySelector(selectors.icons),\r\n                content\r\n            ];\r\n\r\n            // This can be further improved to reduce redundant similar calls.\r\n            if (element.classList.contains('cell')) {\r\n                // The column is actively being sorted, lets reset that and reload the page.\r\n                if (sort !== null) {\r\n                    window.location = this.defaultSort;\r\n                }\r\n                if (content === null) {\r\n                    // If it's not a content cell, it must be an overall average or a range cell.\r\n                    const rowCell = avgRowCell ?? rangeRowCell;\r\n\r\n                    rowCell?.classList.toggle('d-none');\r\n                    rowCell?.setAttribute('aria-hidden',\r\n                        rowCell?.classList.contains('d-none') ? 'true' : 'false');\r\n                } else if (content.classList.contains('d-none')) {\r\n                    // We should always have content but some cells do not contain menus or other actions.\r\n                    element.classList.remove('collapsed');\r\n                    // If there are many nodes, apply the following.\r\n                    if (content.childNodes.length > 1) {\r\n                        content.classList.add('d-flex');\r\n                    }\r\n                    nodeSet.forEach(node => {\r\n                        node?.classList.remove('d-none');\r\n                        node?.setAttribute('aria-hidden', 'false');\r\n                    });\r\n                    expandButton?.classList.add('d-none');\r\n                    expandButton?.setAttribute('aria-hidden', 'true');\r\n                } else {\r\n                    element.classList.add('collapsed');\r\n                    content.classList.remove('d-flex');\r\n                    nodeSet.forEach(node => {\r\n                        node?.classList.add('d-none');\r\n                        node?.setAttribute('aria-hidden', 'true');\r\n                    });\r\n                    expandButton?.classList.remove('d-none');\r\n                    expandButton?.setAttribute('aria-hidden', 'false');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update the visual count of collapsed columns or hide the count all together.\r\n     */\r\n    countUpdate() {\r\n        countIndicator.textContent = this.getDatasetSize();\r\n        if (this.getDatasetSize() > 0) {\r\n            this.component.parentElement.classList.add('d-flex');\r\n            this.component.parentElement.classList.remove('d-none');\r\n        } else {\r\n            this.component.parentElement.classList.remove('d-flex');\r\n            this.component.parentElement.classList.add('d-none');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Build the content then replace the node by default we want our form to exist.\r\n     */\r\n    async renderDefault() {\r\n        this.setMatchedResults(await this.filterDataset(this.getDataset()));\r\n        this.filterMatchDataset();\r\n\r\n        // Update the collapsed button pill.\r\n        this.countUpdate();\r\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapsebody', {\r\n            'results': this.getMatchedResults(),\r\n            'userid': this.userID,\r\n        });\r\n        replaceNode(selectors.placeholder, html, js);\r\n        this.updateNodes();\r\n\r\n        // Given we now have the body, we can set up more triggers.\r\n        this.registerFormEvents();\r\n        this.registerInputEvents();\r\n\r\n        // Add a small BS listener so that we can set the focus correctly on open.\r\n        this.$component.on('shown.bs.dropdown', () => {\r\n            this.searchInput.focus({preventScroll: true});\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Build the content then replace the node.\r\n     */\r\n    async renderDropdown() {\r\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapseresults', {\r\n            'results': this.getMatchedResults(),\r\n            'searchTerm': this.getSearchTerm(),\r\n        });\r\n        replaceNodeContents(this.getHTMLElements().searchDropdown, html, js);\r\n    }\r\n\r\n    /**\r\n     * If we have any custom user profile fields, grab their system & readable names to add to our string map.\r\n     *\r\n     * @returns {array<string,*>} An array of associated string arrays ready for our map.\r\n     */\r\n    fetchCustomFieldValues() {\r\n        const customFields = document.querySelectorAll('[data-collapse-name]');\r\n        // Cast from NodeList to array to grab all the values.\r\n        return [...customFields].map(field => [field.parentElement.dataset.col, field.dataset.collapseName]);\r\n    }\r\n\r\n    /**\r\n     * Given the set of profile fields we can possibly search, fetch their strings,\r\n     * so we can report to screen readers the field that matched.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    fetchRequiredUserStrings() {\r\n        if (!this.userStrings) {\r\n            const requiredStrings = [\r\n                'username',\r\n                'firstname',\r\n                'lastname',\r\n                'email',\r\n                'city',\r\n                'country',\r\n                'department',\r\n                'institution',\r\n                'idnumber',\r\n                'phone1',\r\n                'phone2',\r\n            ];\r\n            this.userStrings = getStrings(requiredStrings.map((key) => ({key})))\r\n                .then((stringArray) => new Map(\r\n                    requiredStrings.map((key, index) => ([key, stringArray[index]]))\r\n                ));\r\n        }\r\n        return this.userStrings;\r\n    }\r\n\r\n    /**\r\n     * Given the set of gradable items we can possibly search, fetch their strings,\r\n     * so we can report to screen readers the field that matched.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    fetchRequiredGradeStrings() {\r\n        if (!this.gradeStrings) {\r\n            this.gradeStrings = Repository.gradeItems(this.courseID)\r\n                .then((result) => new Map(\r\n                    result.gradeItems.map(key => ([key.id, key]))\r\n                ));\r\n        }\r\n        return this.gradeStrings;\r\n    }\r\n}\r\n"],"names":["selectors","cancel","save","checked","countIndicator","document","querySelector","ColumnSearch","GradebookSearchClass","userID","courseID","defaultSort","constructor","component","pendingPromise","Pending","then","loader","setTimeout","getDataset","forEach","item","nodesUpdate","renderDefault","remove","classList","resolve","catch","Notification","exception","setComponentSelector","setDropdownSelector","setTriggerSelector","this","dataset","cols","fetchDataset","JSON","parse","split","datasetSize","length","storage","get","setPreferences","set","stringify","join","registerClickHandlers","addEventListener","clickHandler","bind","docClickHandler","e","target","closest","stopPropagation","hider","preventDefault","desiredToHide","_e$target$closest","col","_e$target$closest2","itemid","indexOf","push","prefcountpippe","_e$target$closest4","_e$target$closest5","idx","splice","_e$target$closest6","_e$target$closest7","keyHandler","key","input","clearSearchButton","focus","preventScroll","registerInputEvents","searchInput","async","setSearchTerms","value","add","filterrenderpipe","registerFormEvents","form","events","CustomEvents","activate","keyboardActivate","define","event","submitBtn","checkedCount","Array","from","querySelectorAll","disabled","submitter","action","dropdown","elements","filter","collapse","colNodesToHide","itemIDNodesToHide","nodes","updateDisplay","countUpdate","filterableData","stringUserMap","fetchRequiredUserStrings","stringGradeMap","fetchRequiredGradeStrings","customFieldMap","fetchCustomFieldValues","stringMap","Map","searching","map","s","mapObj","undefined","string","itemname","category","getPreppedSearchTerm","toString","toLowerCase","includes","filterMatchDataset","setMatchedResults","getMatchedResults","column","name","displayName","updateNodes","filterDataset","renderDropdown","element","content","sort","expandButton","rangeRowCell","avgRowCell","nodeSet","contains","window","location","rowCell","toggle","setAttribute","childNodes","node","textContent","getDatasetSize","parentElement","html","js","$component","on","getSearchTerm","getHTMLElements","searchDropdown","field","collapseName","userStrings","requiredStrings","stringArray","index","gradeStrings","Repository","gradeItems","result","id"],"mappings":"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"}