{"version":3,"file":"user.min.js","sources":["../src/user.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A widget to search users within the gradebook.\r\n *\r\n * @module    gradereport_user/user\r\n * @copyright 2022 Mathew May <mathew.solutions>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport * as FocusLockManager from 'core/local/aria/focuslock';\r\nimport Pending from 'core/pending';\r\nimport * as Templates from 'core/templates';\r\nimport * as Repository from 'core_grades/searchwidget/repository';\r\nimport * as WidgetBase from 'core_grades/searchwidget/basewidget';\r\nimport {get_string as getString} from 'core/str';\r\nimport Url from 'core/url';\r\nimport $ from 'jquery';\r\nimport * as Selectors from 'core_grades/searchwidget/selectors';\r\n\r\n/**\r\n * Our entry point into starting to build the search widget.\r\n * It'll eventually, based upon the listeners, open the search widget and allow filtering.\r\n *\r\n * @method init\r\n */\r\nexport const init = () => {\r\n    const pendingPromise = new Pending();\r\n    registerListenerEvents();\r\n    pendingPromise.resolve();\r\n};\r\n\r\n/**\r\n * Register user search widget related event listeners.\r\n *\r\n * @method registerListenerEvents\r\n */\r\nconst registerListenerEvents = () => {\r\n    let {bodyPromiseResolver, bodyPromise} = WidgetBase.promisesAndResolvers();\r\n    const dropdownMenuContainer = document.querySelector(Selectors.elements.getSearchWidgetDropdownSelector('user'));\r\n    const menuContainer = document.querySelector(Selectors.elements.getSearchWidgetSelector('user'));\r\n    const inputElement = menuContainer.querySelector('input[name=\"userid\"]');\r\n\r\n    // Handle the 'shown.bs.dropdown' event (Fired when the dropdown menu is fully displayed).\r\n    $(menuContainer).on('show.bs.dropdown', async(e) => {\r\n        const courseID = e.relatedTarget.dataset.courseid;\r\n        const groupId = e.relatedTarget.dataset.groupid;\r\n        // Display a loading icon in the dropdown menu container until the body promise is resolved.\r\n        await WidgetBase.showLoader(dropdownMenuContainer);\r\n\r\n        // If an error occurs while fetching the data, display the error within the dropdown menu.\r\n        const data = await Repository.userFetch(courseID, groupId).catch(async(e) => {\r\n            const errorTemplateData = {\r\n                'errormessage': e.message\r\n            };\r\n            bodyPromiseResolver(\r\n                await Templates.render('core_grades/searchwidget/error', errorTemplateData)\r\n            );\r\n        });\r\n\r\n        // Early return if there is no module data.\r\n        if (data === []) {\r\n            return;\r\n        }\r\n\r\n        // The HTML for the 'All users' option which will be rendered in the non-searchable content are of the widget.\r\n        const allUsersOptionName = await getString('allusersnum', 'gradereport_user', data.users.length);\r\n        const allUsersOption = await Templates.render('gradereport_user/all_users_item', {\r\n            id: 0,\r\n            name: allUsersOptionName,\r\n            url: Url.relativeUrl('/grade/report/user/index.php', {id: courseID, userid: 0}, false),\r\n        });\r\n\r\n        await WidgetBase.init(\r\n            dropdownMenuContainer,\r\n            bodyPromise,\r\n            data.users,\r\n            searchUsers(),\r\n            allUsersOption,\r\n            afterSelect\r\n        );\r\n\r\n        // Resolvers for passed functions in the dropdown menu creation.\r\n        bodyPromiseResolver(Templates.render(\r\n            'core_grades/searchwidget/user/usersearch_body', {displayunsearchablecontent: true}\r\n        ));\r\n\r\n        // Lock tab control. It has to be locked because the dropdown's role is dialog.\r\n        FocusLockManager.trapFocus(dropdownMenuContainer);\r\n    });\r\n\r\n    // Handle the 'hide.bs.dropdown' event (Fired when the dropdown menu is being closed).\r\n    $(menuContainer).on('hide.bs.dropdown', () => {\r\n        FocusLockManager.untrapFocus();\r\n    });\r\n\r\n    inputElement.addEventListener('change', e => {\r\n        const toggle = menuContainer.querySelector('.dropdown-toggle');\r\n        const courseID = toggle.dataset.courseid;\r\n        const actionUrl = Url.relativeUrl('/grade/report/user/index.php', {id: courseID, userid: e.target.value}, false);\r\n        location.href = actionUrl;\r\n\r\n        e.stopPropagation();\r\n    });\r\n};\r\n\r\n/**\r\n * Define how we want to search and filter users when the user decides to input a search value.\r\n *\r\n * @method searchUsers\r\n * @returns {function(): function(*, *): (*)}\r\n */\r\nconst searchUsers = () => {\r\n    return () => {\r\n        return (users, searchTerm) => {\r\n            if (searchTerm === '') {\r\n                return users;\r\n            }\r\n            searchTerm = searchTerm.toLowerCase();\r\n            const searchResults = [];\r\n            users.forEach((user) => {\r\n                const userName = user.fullname.toLowerCase();\r\n                if (userName.includes(searchTerm)) {\r\n                    searchResults.push(user);\r\n                }\r\n            });\r\n            return searchResults;\r\n        };\r\n    };\r\n};\r\n\r\n/**\r\n * Define the action to be performed when an item is selected by the search widget.\r\n *\r\n * @param {String} selected The selected item's value.\r\n */\r\nconst afterSelect = (selected) => {\r\n    const menuContainer = document.querySelector(Selectors.elements.getSearchWidgetSelector('user'));\r\n    const inputElement = menuContainer.querySelector('input[name=\"userid\"]');\r\n\r\n    $(menuContainer).dropdown('hide'); // Otherwise the dropdown stays open when user choose an option using keyboard.\r\n\r\n    if (inputElement.value != selected) {\r\n        inputElement.value = selected;\r\n        inputElement.dispatchEvent(new Event('change', {bubbles: true}));\r\n    }\r\n};\r\n"],"names":["pendingPromise","Pending","registerListenerEvents","resolve","bodyPromiseResolver","bodyPromise","WidgetBase","promisesAndResolvers","dropdownMenuContainer","document","querySelector","Selectors","elements","getSearchWidgetDropdownSelector","menuContainer","getSearchWidgetSelector","inputElement","on","async","courseID","e","relatedTarget","dataset","courseid","groupId","groupid","showLoader","data","Repository","userFetch","catch","errorTemplateData","message","Templates","render","allUsersOptionName","users","length","allUsersOption","id","name","url","Url","relativeUrl","userid","init","searchUsers","afterSelect","displayunsearchablecontent","FocusLockManager","trapFocus","untrapFocus","addEventListener","actionUrl","target","value","location","href","stopPropagation","searchTerm","toLowerCase","searchResults","forEach","user","fullname","includes","push","selected","dropdown","dispatchEvent","Event","bubbles"],"mappings":";;;;;;;ucAuCoB,WACVA,eAAiB,IAAIC,iBAC3BC,yBACAF,eAAeG,iBAQbD,uBAAyB,SACvBE,oBAACA,oBAADC,YAAsBA,aAAeC,WAAWC,6BAC9CC,sBAAwBC,SAASC,cAAcC,UAAUC,SAASC,gCAAgC,SAClGC,cAAgBL,SAASC,cAAcC,UAAUC,SAASG,wBAAwB,SAClFC,aAAeF,cAAcJ,cAAc,4CAG/CI,eAAeG,GAAG,oBAAoBC,MAAAA,UAC9BC,SAAWC,EAAEC,cAAcC,QAAQC,SACnCC,QAAUJ,EAAEC,cAAcC,QAAQG,cAElCnB,WAAWoB,WAAWlB,6BAGtBmB,WAAaC,WAAWC,UAAUV,SAAUK,SAASM,OAAMZ,MAAAA,UACvDa,kBAAoB,cACNX,EAAEY,SAEtB5B,0BACU6B,UAAUC,OAAO,iCAAkCH,0BAK7DJ,OAAS,gBAKPQ,yBAA2B,mBAAU,cAAe,mBAAoBR,KAAKS,MAAMC,QACnFC,qBAAuBL,UAAUC,OAAO,kCAAmC,CAC7EK,GAAI,EACJC,KAAML,mBACNM,IAAKC,aAAIC,YAAY,+BAAgC,CAACJ,GAAIpB,SAAUyB,OAAQ,IAAI,WAG9EtC,WAAWuC,KACbrC,sBACAH,YACAsB,KAAKS,MACLU,cACAR,eACAS,aAIJ3C,oBAAoB6B,UAAUC,OAC1B,gDAAiD,CAACc,4BAA4B,KAIlFC,iBAAiBC,UAAU1C,8CAI7BM,eAAeG,GAAG,oBAAoB,KACpCgC,iBAAiBE,iBAGrBnC,aAAaoC,iBAAiB,UAAUhC,UAE9BD,SADSL,cAAcJ,cAAc,oBACnBY,QAAQC,SAC1B8B,UAAYX,aAAIC,YAAY,+BAAgC,CAACJ,GAAIpB,SAAUyB,OAAQxB,EAAEkC,OAAOC,QAAQ,GAC1GC,SAASC,KAAOJ,UAEhBjC,EAAEsC,sBAUJZ,YAAc,IACT,IACI,CAACV,MAAOuB,iBACQ,KAAfA,kBACOvB,MAEXuB,WAAaA,WAAWC,oBAClBC,cAAgB,UACtBzB,MAAM0B,SAASC,OACMA,KAAKC,SAASJ,cAClBK,SAASN,aAClBE,cAAcK,KAAKH,SAGpBF,eAUbd,YAAeoB,iBACXrD,cAAgBL,SAASC,cAAcC,UAAUC,SAASG,wBAAwB,SAClFC,aAAeF,cAAcJ,cAAc,4CAE/CI,eAAesD,SAAS,QAEtBpD,aAAauC,OAASY,WACtBnD,aAAauC,MAAQY,SACrBnD,aAAaqD,cAAc,IAAIC,MAAM,SAAU,CAACC,SAAS"}