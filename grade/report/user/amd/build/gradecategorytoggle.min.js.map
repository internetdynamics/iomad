{"version":3,"file":"gradecategorytoggle.min.js","sources":["../src/gradecategorytoggle.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript module for toggling the visibility of the grade categories in the user report.\r\n *\r\n * @module    gradereport_user/gradecategorytoggle\r\n * @copyright 2022 Mihail Geshoski <mihail@moodle.com>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nconst SELECTORS = {\r\n    CATEGORY_TOGGLE: '.toggle-category',\r\n    USER_REPORT_TABLE: '.user-grade'\r\n};\r\n\r\n/**\r\n * Register related event listeners.\r\n *\r\n * @method registerListenerEvents\r\n * @param {string} userReportId The ID of the user report container element.\r\n */\r\nconst registerListenerEvents = (userReportId) => {\r\n    const reportContainer = document.querySelector('#' + userReportId);\r\n    const userReport = reportContainer.querySelector(SELECTORS.USER_REPORT_TABLE);\r\n\r\n    userReport.addEventListener('click', e => {\r\n        const toggle = e.target.closest(SELECTORS.CATEGORY_TOGGLE);\r\n\r\n        if (toggle) {\r\n            toggleCategory(toggle);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Method that handles the category toggle action.\r\n *\r\n * @method toggleCategory\r\n * @param {object} toggleElement The category toggle node that was clicked.\r\n */\r\nconst toggleCategory = (toggleElement) => {\r\n    const target = toggleElement.dataset.target;\r\n    const categoryId = toggleElement.dataset.categoryid;\r\n    // Whether the toggle action is collapsing the category or not.\r\n    const isCollapsing = toggleElement.getAttribute('aria-expanded') === \"true\";\r\n    const userReport = toggleElement.closest(SELECTORS.USER_REPORT_TABLE);\r\n\r\n    // Find all targeted 'children' rows of the toggled category.\r\n    const targetRows = userReport.querySelectorAll(target);\r\n\r\n    if (isCollapsing) {\r\n        toggleElement.setAttribute('aria-expanded', 'false');\r\n        // Update the 'data-target' of the toggle category node to make sure that when we perform another toggle action\r\n        // to expand this category we only target rows which have been hidden by this category toggle action.\r\n        toggleElement.dataset.target = `[data-hidden-by='${categoryId}']`;\r\n    } else {\r\n        toggleElement.setAttribute('aria-expanded', 'true');\r\n        // Update the 'data-target' of the toggle category node to make sure that when we perform another toggle action\r\n        // to collapse this category we only target rows which are children of this category and are not currently hidden.\r\n        toggleElement.dataset.target = `.cat_${categoryId}[data-hidden='false']`;\r\n    }\r\n\r\n    // Loop through all targeted children row elements and update the required data attributes to either hide or show\r\n    // them depending on the toggle action (collapsing or expanding).\r\n    targetRows.forEach((row) => {\r\n        if (isCollapsing) {\r\n            row.dataset.hidden = 'true';\r\n            row.dataset.hiddenBy = categoryId;\r\n        } else {\r\n            row.dataset.hidden = 'false';\r\n            row.dataset.hiddenBy = '';\r\n        }\r\n    });\r\n\r\n    // Since the user report is presented in an HTML table, rowspans are used under each category to create a visual\r\n    // hierarchy between categories and grading items. When expanding or collapsing a category we need to also update\r\n    // (subtract or add) the rowspan values associated to each parent category row to preserve the correct visual\r\n    // hierarchy in the table.\r\n    updateParentCategoryRowspans(toggleElement, targetRows.length);\r\n};\r\n\r\n/**\r\n * Method that updates the rowspan value of all 'parent' category rows of a given category node.\r\n *\r\n * @method updateParentCategoryRowspans\r\n * @param {object} toggleElement The category toggle node that was clicked.\r\n * @param {int} num The number we want to add or subtract from the rowspan value of the 'parent' category row elements.\r\n */\r\nconst updateParentCategoryRowspans = (toggleElement, num) => {\r\n    const userReport = toggleElement.closest(SELECTORS.USER_REPORT_TABLE);\r\n    // Get the row element which contains the category toggle node.\r\n    const rowElement = toggleElement.closest('tr');\r\n\r\n    // Loop through the class list of the toggle category row element.\r\n    // The list contains classes which identify all parent categories of the toggled category.\r\n    rowElement.classList.forEach((className) => {\r\n        // Find the toggle node of the 'parent' category that is identified by the given class name.\r\n        const parentCategoryToggleElement = userReport.querySelector(`[data-target=\".${className}[data-hidden='false']\"`);\r\n        if (parentCategoryToggleElement) {\r\n            // Get the row element which contains the parent category toggle node.\r\n            const categoryRowElement = parentCategoryToggleElement.closest('tr');\r\n            // Find the rowspan element associated to this parent category.\r\n            const categoryRowSpanElement = categoryRowElement.nextElementSibling.querySelector('[rowspan]');\r\n\r\n            // Depending on whether the toggle action has expanded or collapsed the category, either add or\r\n            // subtract from the 'parent' category rowspan.\r\n            if (toggleElement.getAttribute('aria-expanded') === \"true\") {\r\n                categoryRowSpanElement.rowSpan = categoryRowSpanElement.rowSpan + num;\r\n            } else { // The category has been collapsed.\r\n                categoryRowSpanElement.rowSpan = categoryRowSpanElement.rowSpan - num;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Init method.\r\n *\r\n * @param {string} userReportId The ID of the user report container element.\r\n */\r\nexport const init = (userReportId) => {\r\n    registerListenerEvents(userReportId);\r\n};\r\n"],"names":["SELECTORS","toggleCategory","toggleElement","target","dataset","categoryId","categoryid","isCollapsing","getAttribute","targetRows","closest","querySelectorAll","setAttribute","forEach","row","hidden","hiddenBy","updateParentCategoryRowspans","length","num","userReport","classList","className","parentCategoryToggleElement","querySelector","categoryRowSpanElement","nextElementSibling","rowSpan","userReportId","document","addEventListener","e","toggle","registerListenerEvents"],"mappings":";;;;;;;;MAuBMA,0BACe,mBADfA,4BAEiB,cA4BjBC,eAAkBC,sBACdC,OAASD,cAAcE,QAAQD,OAC/BE,WAAaH,cAAcE,QAAQE,WAEnCC,aAA+D,SAAhDL,cAAcM,aAAa,iBAI1CC,WAHaP,cAAcQ,QAAQV,6BAGXW,iBAAiBR,QAE3CI,cACAL,cAAcU,aAAa,gBAAiB,SAG5CV,cAAcE,QAAQD,kCAA6BE,mBAEnDH,cAAcU,aAAa,gBAAiB,QAG5CV,cAAcE,QAAQD,sBAAiBE,qCAK3CI,WAAWI,SAASC,MACZP,cACAO,IAAIV,QAAQW,OAAS,OACrBD,IAAIV,QAAQY,SAAWX,aAEvBS,IAAIV,QAAQW,OAAS,QACrBD,IAAIV,QAAQY,SAAW,OAQ/BC,6BAA6Bf,cAAeO,WAAWS,SAUrDD,6BAA+B,CAACf,cAAeiB,aAC3CC,WAAalB,cAAcQ,QAAQV,6BAEtBE,cAAcQ,QAAQ,MAI9BW,UAAUR,SAASS,kBAEpBC,4BAA8BH,WAAWI,uCAAgCF,yCAC3EC,4BAA6B,OAIvBE,uBAFqBF,4BAA4Bb,QAAQ,MAEbgB,mBAAmBF,cAAc,aAI/B,SAAhDtB,cAAcM,aAAa,iBAC3BiB,uBAAuBE,QAAUF,uBAAuBE,QAAUR,IAElEM,uBAAuBE,QAAUF,uBAAuBE,QAAUR,uBAW7DS,eAnGWA,CAAAA,eACJC,SAASL,cAAc,IAAMI,cAClBJ,cAAcxB,6BAEtC8B,iBAAiB,SAASC,UAC3BC,OAASD,EAAE5B,OAAOO,QAAQV,2BAE5BgC,QACA/B,eAAe+B,YA4FvBC,CAAuBL"}