{"version":3,"file":"bulkactions.min.js","sources":["../src/bulkactions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript module for bulk actions.\r\n *\r\n * @module      gradereport_singleview/bulkactions\r\n * @copyright   2022 Ilya Tregubov <ilya@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Pending from 'core/pending';\r\nimport CustomEvents from \"core/custom_interaction_events\";\r\nimport ModalFactory from 'core/modal_factory';\r\nimport Templates from 'core/templates';\r\nimport ModalEvents from 'core/modal_events';\r\nimport * as Str from 'core/str';\r\nimport Notification from 'core/notification';\r\nimport selectors from 'gradereport_singleview/selectors';\r\n\r\n/**\r\n * Initialize module.\r\n */\r\nexport const init = () => {\r\n    const pendingPromise = new Pending();\r\n    registerListenerEvents();\r\n    pendingPromise.resolve();\r\n};\r\n\r\n/**\r\n * Register bulk actions related event listeners.\r\n *\r\n * @method registerListenerEvents\r\n */\r\nconst registerListenerEvents = () => {\r\n    const events = [\r\n        'click',\r\n        CustomEvents.events.activate,\r\n        CustomEvents.events.keyboardActivate\r\n    ];\r\n    CustomEvents.define(document, events);\r\n\r\n    // Register events.\r\n    events.forEach((event) => {\r\n        document.addEventListener(event, async(e) => {\r\n            const trigger = e.target.closest(selectors.actions.bulkaction);\r\n\r\n            if (trigger) {\r\n                if ((trigger.dataset.action === 'overrideallgrades') || (trigger.dataset.action === 'overridenonegrades')) {\r\n                    const override = document.querySelectorAll(selectors.elements.override);\r\n\r\n                    if (trigger.dataset.action === 'overridenonegrades') {\r\n                        // Alert for removing all grade overrides on page.\r\n                        Str.get_strings([\r\n                            {key: 'removeoverride', component: 'gradereport_singleview'},\r\n                            {key: 'overridenoneconfirm', component: 'gradereport_singleview'},\r\n                            {key: 'removeoverridesave', component: 'gradereport_singleview'},\r\n                            {key: 'cancel', component: 'moodle'},\r\n                        ]).done((strings) => {\r\n                            Notification.confirm(\r\n                                strings[0],\r\n                                strings[1],\r\n                                strings[2],\r\n                                strings[3],\r\n                                () => {\r\n                                    // Uncheck each override checkbox - this will make grade and feedback input fields disabled.\r\n                                    override.forEach((el) => {\r\n                                        if (el.checked) {\r\n                                            el.click();\r\n                                        }\r\n                                    });\r\n                                });\r\n                        }).fail(Notification.exception);\r\n\r\n                    } else {\r\n                        // Check each override checkbox - this will make grade and feedback input fields enabled.\r\n                        override.forEach((el) => {\r\n                            if (!el.checked) {\r\n                                el.click();\r\n                            }\r\n                        });\r\n                    }\r\n                } else if ((trigger.dataset.action === 'excludeallgrades') || (trigger.dataset.action === 'excludenonegrades')) {\r\n                    const exclude = document.querySelectorAll(selectors.elements.exclude);\r\n                    const checked = (trigger.dataset.action === 'excludeallgrades');\r\n                    // Uncheck or check each exclude checkbox.\r\n                    exclude.forEach((el) => {\r\n                        el.checked = checked;\r\n                    });\r\n                } else if (trigger.dataset.action === 'bulklegend') {\r\n                    // Modal for bulk insert grades.\r\n                    Str.get_strings([\r\n                        {key: 'bulklegend', component: 'gradereport_singleview'},\r\n                        {key: 'save', component: 'moodle'},\r\n                    ]).done((strings) => {\r\n                        ModalFactory.create({\r\n                            type: ModalFactory.types.SAVE_CANCEL,\r\n                            body: Templates.render('gradereport_singleview/bulkinsert', {\r\n                                id: 'bulkinsertmodal',\r\n                                name: 'bulkinsertmodal'\r\n                            }),\r\n                            title: strings[0],\r\n                        }).then((modal) => {\r\n                            modal.setSaveButtonText(strings[1]);\r\n                            modal.getFooter().find(selectors.elements.modalsave).attr('disabled', true);\r\n\r\n                            modal.getRoot().on(ModalEvents.hidden, () => {\r\n                                modal.getRoot().remove();\r\n                            });\r\n\r\n                            // We need to acknowledge that we understand risks of loosing data.\r\n                            // Only when acknowledge checkbox is checked we allow selecting insert options.\r\n                            modal.getRoot().on('change', selectors.elements.warningcheckbox,\r\n                                (e) => {\r\n                                    e.preventDefault();\r\n                                    if (e.target.checked) {\r\n                                        modal.getRoot().find(selectors.elements.modalformdata).removeClass('dimmed_text');\r\n                                        modal.getRoot().find(selectors.elements.modalradio).removeAttr('disabled');\r\n                                        modal.getRoot().find(selectors.elements.modalinput).removeAttr('disabled');\r\n\r\n                                        const formRadioData = modal.getRoot().find(selectors.elements.modalradiochecked).val();\r\n                                        // We allow saving grades only when all needed data present on form.\r\n                                        if (formRadioData) {\r\n                                            modal.getFooter().find(selectors.elements.modalsave).removeAttr('disabled');\r\n                                        }\r\n                                    } else {\r\n                                        modal.getRoot().find(selectors.elements.modalformdata).addClass('dimmed_text');\r\n                                        modal.getRoot().find(selectors.elements.modalradio).attr('disabled', true);\r\n                                        modal.getRoot().find(selectors.elements.modalinput).attr('disabled', true);\r\n                                        modal.getFooter().find(selectors.elements.modalsave).attr('disabled', true);\r\n                                    }\r\n                                });\r\n\r\n                            // We allow saving grades only when all needed data present on form.\r\n                            modal.getRoot().on('change', selectors.elements.modalradio,\r\n                                (e) => {\r\n                                    e.preventDefault();\r\n                                    modal.getFooter().find(selectors.elements.modalsave).removeAttr('disabled');\r\n                                });\r\n\r\n                            modal.getRoot().on(ModalEvents.save, () => {\r\n                                // When save button is clicked in modal form we insert data from modal\r\n                                // into preexisted hidden bulk insert form and Save button for table form.\r\n                                document.querySelector(selectors.elements.enablebulkinsert).checked = true;\r\n                                const formRadioData = modal.getRoot().find(selectors.elements.modalradiochecked).val();\r\n                                const $select = document.querySelector(selectors.elements.formradio);\r\n                                $select.value = formRadioData;\r\n\r\n                                const formData = modal.getRoot().find(selectors.elements.modalgrade).val();\r\n                                document.querySelector(selectors.elements.formgrade).value = formData;\r\n                                document.querySelector(selectors.elements.formsave).click();\r\n                            });\r\n\r\n                            modal.show();\r\n\r\n                            return modal;\r\n                        }).fail(Notification.exception);\r\n                    }).fail(Notification.exception);\r\n                }\r\n            }\r\n        });\r\n    });\r\n};\r\n"],"names":["pendingPromise","Pending","registerListenerEvents","resolve","events","CustomEvents","activate","keyboardActivate","define","document","forEach","event","addEventListener","async","trigger","e","target","closest","selectors","actions","bulkaction","dataset","action","override","querySelectorAll","elements","Str","get_strings","key","component","done","strings","confirm","el","checked","click","fail","Notification","exception","exclude","create","type","ModalFactory","types","SAVE_CANCEL","body","Templates","render","id","name","title","then","modal","setSaveButtonText","getFooter","find","modalsave","attr","getRoot","on","ModalEvents","hidden","remove","warningcheckbox","preventDefault","modalformdata","removeClass","modalradio","removeAttr","modalinput","modalradiochecked","val","addClass","save","querySelector","enablebulkinsert","formRadioData","formradio","value","formData","modalgrade","formgrade","formsave","show"],"mappings":"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"}