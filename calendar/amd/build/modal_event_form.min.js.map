{"version":3,"file":"modal_event_form.min.js","sources":["../src/modal_event_form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Contain the logic for the quick add or update event modal.\r\n *\r\n * @module     core_calendar/modal_event_form\r\n * @copyright  2017 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core_form/events',\r\n    'core/str',\r\n    'core/notification',\r\n    'core/templates',\r\n    'core/custom_interaction_events',\r\n    'core/modal',\r\n    'core/modal_registry',\r\n    'core/fragment',\r\n    'core_calendar/events',\r\n    'core_calendar/repository'\r\n],\r\nfunction(\r\n    $,\r\n    FormEvents,\r\n    Str,\r\n    Notification,\r\n    Templates,\r\n    CustomEvents,\r\n    Modal,\r\n    ModalRegistry,\r\n    Fragment,\r\n    CalendarEvents,\r\n    Repository\r\n) {\r\n    var registered = false;\r\n    var SELECTORS = {\r\n        SAVE_BUTTON: '[data-action=\"save\"]',\r\n        LOADING_ICON_CONTAINER: '[data-region=\"loading-icon-container\"]',\r\n    };\r\n\r\n    /**\r\n     * Constructor for the Modal.\r\n     *\r\n     * @param {object} root The root jQuery element for the modal\r\n     */\r\n    var ModalEventForm = function(root) {\r\n        Modal.call(this, root);\r\n        this.eventId = null;\r\n        this.startTime = null;\r\n        this.courseId = null;\r\n        this.categoryId = null;\r\n        this.contextId = null;\r\n        this.reloadingBody = false;\r\n        this.reloadingTitle = false;\r\n        this.saveButton = this.getFooter().find(SELECTORS.SAVE_BUTTON);\r\n    };\r\n\r\n    ModalEventForm.TYPE = 'core_calendar-modal_event_form';\r\n    ModalEventForm.prototype = Object.create(Modal.prototype);\r\n    ModalEventForm.prototype.constructor = ModalEventForm;\r\n\r\n    /**\r\n     * Set the context id to the given value.\r\n     *\r\n     * @method setContextId\r\n     * @param {Number} id The event id\r\n     */\r\n    ModalEventForm.prototype.setContextId = function(id) {\r\n        this.contextId = id;\r\n    };\r\n\r\n    /**\r\n     * Retrieve the current context id, if any.\r\n     *\r\n     * @method getContextId\r\n     * @return {Number|null} The event id\r\n     */\r\n    ModalEventForm.prototype.getContextId = function() {\r\n        return this.contextId;\r\n    };\r\n\r\n    /**\r\n     * Set the course id to the given value.\r\n     *\r\n     * @method setCourseId\r\n     * @param {int} id The event id\r\n     */\r\n    ModalEventForm.prototype.setCourseId = function(id) {\r\n        this.courseId = id;\r\n    };\r\n\r\n    /**\r\n     * Retrieve the current course id, if any.\r\n     *\r\n     * @method getCourseId\r\n     * @return {int|null} The event id\r\n     */\r\n    ModalEventForm.prototype.getCourseId = function() {\r\n        return this.courseId;\r\n    };\r\n\r\n    /**\r\n     * Set the category id to the given value.\r\n     *\r\n     * @method setCategoryId\r\n     * @param {int} id The event id\r\n     */\r\n    ModalEventForm.prototype.setCategoryId = function(id) {\r\n        this.categoryId = id;\r\n    };\r\n\r\n    /**\r\n     * Retrieve the current category id, if any.\r\n     *\r\n     * @method getCategoryId\r\n     * @return {int|null} The event id\r\n     */\r\n    ModalEventForm.prototype.getCategoryId = function() {\r\n        return this.categoryId;\r\n    };\r\n\r\n    /**\r\n     * Check if the modal has an course id.\r\n     *\r\n     * @method hasCourseId\r\n     * @return {bool}\r\n     */\r\n    ModalEventForm.prototype.hasCourseId = function() {\r\n        return this.courseId !== null;\r\n    };\r\n\r\n    /**\r\n     * Check if the modal has an category id.\r\n     *\r\n     * @method hasCategoryId\r\n     * @return {bool}\r\n     */\r\n    ModalEventForm.prototype.hasCategoryId = function() {\r\n        return this.categoryId !== null;\r\n    };\r\n\r\n    /**\r\n     * Set the event id to the given value.\r\n     *\r\n     * @method setEventId\r\n     * @param {int} id The event id\r\n     */\r\n    ModalEventForm.prototype.setEventId = function(id) {\r\n        this.eventId = id;\r\n    };\r\n\r\n    /**\r\n     * Retrieve the current event id, if any.\r\n     *\r\n     * @method getEventId\r\n     * @return {int|null} The event id\r\n     */\r\n    ModalEventForm.prototype.getEventId = function() {\r\n        return this.eventId;\r\n    };\r\n\r\n    /**\r\n     * Check if the modal has an event id.\r\n     *\r\n     * @method hasEventId\r\n     * @return {bool}\r\n     */\r\n    ModalEventForm.prototype.hasEventId = function() {\r\n        return this.eventId !== null;\r\n    };\r\n\r\n    /**\r\n     * Set the start time to the given value.\r\n     *\r\n     * @method setStartTime\r\n     * @param {int} time The start time\r\n     */\r\n    ModalEventForm.prototype.setStartTime = function(time) {\r\n        this.startTime = time;\r\n    };\r\n\r\n    /**\r\n     * Retrieve the current start time, if any.\r\n     *\r\n     * @method getStartTime\r\n     * @return {int|null} The start time\r\n     */\r\n    ModalEventForm.prototype.getStartTime = function() {\r\n        return this.startTime;\r\n    };\r\n\r\n    /**\r\n     * Check if the modal has start time.\r\n     *\r\n     * @method hasStartTime\r\n     * @return {bool}\r\n     */\r\n    ModalEventForm.prototype.hasStartTime = function() {\r\n        return this.startTime !== null;\r\n    };\r\n\r\n    /**\r\n     * Get the form element from the modal.\r\n     *\r\n     * @method getForm\r\n     * @return {object}\r\n     */\r\n    ModalEventForm.prototype.getForm = function() {\r\n        return this.getBody().find('form');\r\n    };\r\n\r\n    /**\r\n     * Disable the buttons in the footer.\r\n     *\r\n     * @method disableButtons\r\n     */\r\n    ModalEventForm.prototype.disableButtons = function() {\r\n        this.saveButton.prop('disabled', true);\r\n    };\r\n\r\n    /**\r\n     * Enable the buttons in the footer.\r\n     *\r\n     * @method enableButtons\r\n     */\r\n    ModalEventForm.prototype.enableButtons = function() {\r\n        this.saveButton.prop('disabled', false);\r\n    };\r\n\r\n    /**\r\n     * Reload the title for the modal to the appropriate value\r\n     * depending on whether we are creating a new event or\r\n     * editing an existing event.\r\n     *\r\n     * @method reloadTitleContent\r\n     * @return {object} A promise resolved with the new title text\r\n     */\r\n    ModalEventForm.prototype.reloadTitleContent = function() {\r\n        if (this.reloadingTitle) {\r\n            return this.titlePromise;\r\n        }\r\n\r\n        this.reloadingTitle = true;\r\n\r\n        if (this.hasEventId()) {\r\n            this.titlePromise = Str.get_string('editevent', 'calendar');\r\n        } else {\r\n            this.titlePromise = Str.get_string('newevent', 'calendar');\r\n        }\r\n\r\n        this.titlePromise.then(function(string) {\r\n            this.setTitle(string);\r\n            return string;\r\n        }.bind(this))\r\n        .always(function() {\r\n            this.reloadingTitle = false;\r\n            return;\r\n        }.bind(this))\r\n        .fail(Notification.exception);\r\n\r\n        return this.titlePromise;\r\n    };\r\n\r\n    /**\r\n     * Send a request to the server to get the event_form in a fragment\r\n     * and render the result in the body of the modal.\r\n     *\r\n     * If serialised form data is provided then it will be sent in the\r\n     * request to the server to have the form rendered with the data. This\r\n     * is used when the form had a server side error and we need the server\r\n     * to re-render it for us to display the error to the user.\r\n     *\r\n     * @method reloadBodyContent\r\n     * @param {string} formData The serialised form data\r\n     * @return {object} A promise resolved with the fragment html and js from\r\n     */\r\n    ModalEventForm.prototype.reloadBodyContent = function(formData) {\r\n        if (this.reloadingBody) {\r\n            return this.bodyPromise;\r\n        }\r\n\r\n        this.reloadingBody = true;\r\n        this.disableButtons();\r\n\r\n        var args = {};\r\n\r\n        if (this.hasEventId()) {\r\n            args.eventid = this.getEventId();\r\n        }\r\n\r\n        if (this.hasStartTime()) {\r\n            args.starttime = this.getStartTime();\r\n        }\r\n\r\n        if (this.hasCourseId()) {\r\n            args.courseid = this.getCourseId();\r\n        }\r\n\r\n        if (this.hasCategoryId()) {\r\n            args.categoryid = this.getCategoryId();\r\n        }\r\n\r\n        if (typeof formData !== 'undefined') {\r\n            args.formdata = formData;\r\n        }\r\n\r\n        this.bodyPromise = Fragment.loadFragment('calendar', 'event_form', this.getContextId(), args);\r\n\r\n        this.setBody(this.bodyPromise);\r\n\r\n        this.bodyPromise.then(function() {\r\n            this.enableButtons();\r\n            return;\r\n        }.bind(this))\r\n        .fail(Notification.exception)\r\n        .always(function() {\r\n            this.reloadingBody = false;\r\n            return;\r\n        }.bind(this))\r\n        .fail(Notification.exception);\r\n\r\n        return this.bodyPromise;\r\n    };\r\n\r\n    /**\r\n     * Reload both the title and body content.\r\n     *\r\n     * @method reloadAllContent\r\n     * @return {object} promise\r\n     */\r\n    ModalEventForm.prototype.reloadAllContent = function() {\r\n        return $.when(this.reloadTitleContent(), this.reloadBodyContent());\r\n    };\r\n\r\n    /**\r\n     * Kick off a reload the modal content before showing it. This\r\n     * is to allow us to re-use the same modal for creating and\r\n     * editing different events within the page.\r\n     *\r\n     * We do the reload when showing the modal rather than hiding it\r\n     * to save a request to the server if the user closes the modal\r\n     * and never re-opens it.\r\n     *\r\n     * @method show\r\n     */\r\n    ModalEventForm.prototype.show = function() {\r\n        this.reloadAllContent();\r\n        Modal.prototype.show.call(this);\r\n    };\r\n\r\n    /**\r\n     * Clear the event id from the modal when it's closed so\r\n     * that it is loaded fresh next time it's displayed.\r\n     *\r\n     * The event id will be set by the calling code if it wants\r\n     * to edit a specific event.\r\n     *\r\n     * @method hide\r\n     */\r\n    ModalEventForm.prototype.hide = function() {\r\n        Modal.prototype.hide.call(this);\r\n        this.setEventId(null);\r\n        this.setStartTime(null);\r\n        this.setCourseId(null);\r\n        this.setCategoryId(null);\r\n    };\r\n\r\n    /**\r\n     * Get the serialised form data.\r\n     *\r\n     * @method getFormData\r\n     * @return {string} serialised form data\r\n     */\r\n    ModalEventForm.prototype.getFormData = function() {\r\n        return this.getForm().serialize();\r\n    };\r\n\r\n    /**\r\n     * Send the form data to the server to create or update\r\n     * an event.\r\n     *\r\n     * If there is a server side validation error then we re-request the\r\n     * rendered form (with the data) from the server in order to get the\r\n     * server side errors to display.\r\n     *\r\n     * On success the modal is hidden and the page is reloaded so that the\r\n     * new event will display.\r\n     *\r\n     * @method save\r\n     * @return {object} A promise\r\n     */\r\n    ModalEventForm.prototype.save = function() {\r\n        var invalid,\r\n            loadingContainer = this.saveButton.find(SELECTORS.LOADING_ICON_CONTAINER);\r\n\r\n        // Now the change events have run, see if there are any \"invalid\" form fields.\r\n        invalid = this.getForm().find('[aria-invalid=\"true\"]');\r\n\r\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\r\n        if (invalid.length) {\r\n            invalid.first().focus();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        loadingContainer.removeClass('hidden');\r\n        this.disableButtons();\r\n\r\n        var formData = this.getFormData();\r\n        // Send the form data to the server for processing.\r\n        return Repository.submitCreateUpdateForm(formData)\r\n            .then(function(response) {\r\n                if (response.validationerror) {\r\n                    // If there was a server side validation error then\r\n                    // we need to re-request the rendered form from the server\r\n                    // in order to display the error for the user.\r\n                    this.reloadBodyContent(formData);\r\n                    return;\r\n                } else {\r\n                    // Check whether this was a new event or not.\r\n                    // The hide function unsets the form data so grab this before the hide.\r\n                    var isExisting = this.hasEventId();\r\n\r\n                    // No problemo! Our work here is done.\r\n                    this.hide();\r\n\r\n                    // Trigger the appropriate calendar event so that the view can be updated.\r\n                    if (isExisting) {\r\n                        $('body').trigger(CalendarEvents.updated, [response.event]);\r\n                    } else {\r\n                        $('body').trigger(CalendarEvents.created, [response.event]);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            }.bind(this))\r\n            .always(function() {\r\n                // Regardless of success or error we should always stop\r\n                // the loading icon and re-enable the buttons.\r\n                loadingContainer.addClass('hidden');\r\n                this.enableButtons();\r\n\r\n                return;\r\n            }.bind(this))\r\n            .fail(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Set up all of the event handling for the modal.\r\n     *\r\n     * @method registerEventListeners\r\n     * @fires event:uploadStarted\r\n     * @fires event:formSubmittedByJavascript\r\n     */\r\n    ModalEventForm.prototype.registerEventListeners = function() {\r\n        // Apply parent event listeners.\r\n        Modal.prototype.registerEventListeners.call(this);\r\n\r\n        // When the user clicks the save button we trigger the form submission. We need to\r\n        // trigger an actual submission because there is some JS code in the form that is\r\n        // listening for this event and doing some stuff (e.g. saving draft areas etc).\r\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.SAVE_BUTTON, function(e, data) {\r\n            this.getForm().submit();\r\n            data.originalEvent.preventDefault();\r\n            e.stopPropagation();\r\n        }.bind(this));\r\n\r\n        // Catch the submit event before it is actually processed by the browser and\r\n        // prevent the submission. We'll take it from here.\r\n        this.getModal().on('submit', function(e) {\r\n            FormEvents.notifyFormSubmittedByJavascript(this.getForm()[0]);\r\n\r\n            this.save();\r\n\r\n            // Stop the form from actually submitting and prevent it's\r\n            // propagation because we have already handled the event.\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }.bind(this));\r\n    };\r\n\r\n    // Automatically register with the modal registry the first time this module is imported so that you can create modals\r\n    // of this type using the modal factory.\r\n    if (!registered) {\r\n        ModalRegistry.register(ModalEventForm.TYPE, ModalEventForm, 'calendar/modal_event_form');\r\n        registered = true;\r\n    }\r\n\r\n    return ModalEventForm;\r\n});\r\n"],"names":["define","$","FormEvents","Str","Notification","Templates","CustomEvents","Modal","ModalRegistry","Fragment","CalendarEvents","Repository","registered","SELECTORS","ModalEventForm","root","call","this","eventId","startTime","courseId","categoryId","contextId","reloadingBody","reloadingTitle","saveButton","getFooter","find","TYPE","prototype","Object","create","constructor","setContextId","id","getContextId","setCourseId","getCourseId","setCategoryId","getCategoryId","hasCourseId","hasCategoryId","setEventId","getEventId","hasEventId","setStartTime","time","getStartTime","hasStartTime","getForm","getBody","disableButtons","prop","enableButtons","reloadTitleContent","titlePromise","get_string","then","string","setTitle","bind","always","fail","exception","reloadBodyContent","formData","bodyPromise","args","eventid","starttime","courseid","categoryid","formdata","loadFragment","setBody","reloadAllContent","when","show","hide","getFormData","serialize","save","invalid","loadingContainer","length","first","focus","Promise","resolve","removeClass","submitCreateUpdateForm","response","validationerror","isExisting","trigger","updated","event","created","addClass","registerEventListeners","getModal","on","events","activate","e","data","submit","originalEvent","preventDefault","stopPropagation","notifyFormSubmittedByJavascript","register"],"mappings":"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"}