{"version":3,"file":"calendar_mini.min.js","sources":["../src/calendar_mini.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This module is the highest level module for the calendar. It is\r\n * responsible for initialising all of the components required for\r\n * the calendar to run. It also coordinates the interaction between\r\n * components by listening for and responding to different events\r\n * triggered within the calendar UI.\r\n *\r\n * @module     core_calendar/calendar_mini\r\n * @copyright  2017 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core_calendar/selectors',\r\n    'core_calendar/events',\r\n    'core_calendar/view_manager',\r\n],\r\nfunction(\r\n    $,\r\n    CalendarSelectors,\r\n    CalendarEvents,\r\n    CalendarViewManager\r\n) {\r\n\r\n    /**\r\n     * Listen to and handle any calendar events fired by the calendar UI.\r\n     *\r\n     * @method registerCalendarEventListeners\r\n     * @param {object} root The calendar root element\r\n     */\r\n    var registerCalendarEventListeners = function(root) {\r\n        var body = $('body');\r\n        var namespace = '.' + root.attr('id');\r\n\r\n        body.on(CalendarEvents.created + namespace, root, reloadMonth);\r\n        body.on(CalendarEvents.deleted + namespace, root, reloadMonth);\r\n        body.on(CalendarEvents.updated + namespace, root, reloadMonth);\r\n        body.on(CalendarEvents.eventMoved + namespace, root, reloadMonth);\r\n    };\r\n\r\n    /**\r\n     * Reload the month view in this month.\r\n     *\r\n     * @param {EventFacade} e\r\n     */\r\n    var reloadMonth = function(e) {\r\n        var root = e.data;\r\n        var body = $('body');\r\n        var namespace = '.' + root.attr('id');\r\n\r\n        if (root.is(':visible')) {\r\n            CalendarViewManager.reloadCurrentMonth(root);\r\n        } else {\r\n            // The root has been removed.\r\n            // Remove all events in the namespace.\r\n            body.off(CalendarEvents.created + namespace);\r\n            body.off(CalendarEvents.deleted + namespace);\r\n            body.off(CalendarEvents.updated + namespace);\r\n            body.off(CalendarEvents.eventMoved + namespace);\r\n        }\r\n    };\r\n\r\n    var registerEventListeners = function(root) {\r\n        $('body').on(CalendarEvents.filterChanged, function(e, data) {\r\n            var daysWithEvent = root.find(CalendarSelectors.eventType[data.type]);\r\n\r\n            daysWithEvent.toggleClass('calendar_event_' + data.type, !data.hidden);\r\n        });\r\n\r\n        var namespace = '.' + root.attr('id');\r\n        $('body').on('change' + namespace, CalendarSelectors.elements.courseSelector, function() {\r\n            if (root.is(':visible')) {\r\n                var selectElement = $(this);\r\n                var courseId = selectElement.val();\r\n                var categoryId = null;\r\n\r\n                CalendarViewManager.reloadCurrentMonth(root, courseId, categoryId);\r\n            } else {\r\n                $('body').off('change' + namespace);\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n    return {\r\n        init: function(root, loadOnInit) {\r\n            root = $(root);\r\n\r\n            CalendarViewManager.init(root);\r\n            registerEventListeners(root);\r\n            registerCalendarEventListeners(root);\r\n\r\n            if (loadOnInit) {\r\n                // The calendar hasn't yet loaded it's events so we\r\n                // should load them as soon as we've initialised.\r\n                CalendarViewManager.reloadCurrentMonth(root);\r\n            }\r\n\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","CalendarSelectors","CalendarEvents","CalendarViewManager","reloadMonth","e","root","data","body","namespace","attr","is","reloadCurrentMonth","off","created","deleted","updated","eventMoved","init","loadOnInit","on","filterChanged","find","eventType","type","toggleClass","hidden","elements","courseSelector","courseId","this","val","registerEventListeners","registerCalendarEventListeners"],"mappings":";;;;;;;;;;;AA0BAA,qCAAO,CACH,SACA,0BACA,uBACA,+BAEJ,SACIC,EACAC,kBACAC,eACAC,yBAwBIC,YAAc,SAASC,OACnBC,KAAOD,EAAEE,KACTC,KAAOR,EAAE,QACTS,UAAY,IAAMH,KAAKI,KAAK,MAE5BJ,KAAKK,GAAG,YACRR,oBAAoBS,mBAAmBN,OAIvCE,KAAKK,IAAIX,eAAeY,QAAUL,WAClCD,KAAKK,IAAIX,eAAea,QAAUN,WAClCD,KAAKK,IAAIX,eAAec,QAAUP,WAClCD,KAAKK,IAAIX,eAAee,WAAaR,mBA0BtC,CACHS,KAAM,SAASZ,KAAMa,YACjBb,KAAON,EAAEM,MAETH,oBAAoBe,KAAKZ,MA1BJ,SAASA,MAClCN,EAAE,QAAQoB,GAAGlB,eAAemB,eAAe,SAAShB,EAAGE,MAC/BD,KAAKgB,KAAKrB,kBAAkBsB,UAAUhB,KAAKiB,OAEjDC,YAAY,kBAAoBlB,KAAKiB,MAAOjB,KAAKmB,eAG/DjB,UAAY,IAAMH,KAAKI,KAAK,MAChCV,EAAE,QAAQoB,GAAG,SAAWX,UAAWR,kBAAkB0B,SAASC,gBAAgB,cACtEtB,KAAKK,GAAG,YAAa,KAEjBkB,SADgB7B,EAAE8B,MACOC,MAG7B5B,oBAAoBS,mBAAmBN,KAAMuB,SAF5B,WAIjB7B,EAAE,QAAQa,IAAI,SAAWJ,cAW7BuB,CAAuB1B,MA3DM,SAASA,UACtCE,KAAOR,EAAE,QACTS,UAAY,IAAMH,KAAKI,KAAK,MAEhCF,KAAKY,GAAGlB,eAAeY,QAAUL,UAAWH,KAAMF,aAClDI,KAAKY,GAAGlB,eAAea,QAAUN,UAAWH,KAAMF,aAClDI,KAAKY,GAAGlB,eAAec,QAAUP,UAAWH,KAAMF,aAClDI,KAAKY,GAAGlB,eAAee,WAAaR,UAAWH,KAAMF,aAqDjD6B,CAA+B3B,MAE3Ba,YAGAhB,oBAAoBS,mBAAmBN"}