{"version":3,"file":"drag_drop_data_store.min.js","sources":["../src/drag_drop_data_store.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A javascript module to store calendar drag and drop data.\r\n *\r\n * This module is unfortunately required because of the limitations\r\n * of the HTML5 drag and drop API and it's ability to provide data\r\n * between the different stages of the drag/drop lifecycle.\r\n *\r\n * @module     core_calendar/drag_drop_data_store\r\n * @copyright  2017 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([], function() {\r\n    /* @var {int|null} eventId The id of the event being dragged */\r\n    var eventId = null;\r\n    /* @var {int|null} durationDays How many days the event spans */\r\n    var durationDays = null;\r\n    /* @var {int|null} minTimestart The earliest valid timestart */\r\n    var minTimestart = null;\r\n    /* @var {int|null} maxTimestart The latest valid tiemstart */\r\n    var maxTimestart = null;\r\n    /* @var {string|null} minError Error message for min timestamp violation */\r\n    var minError = null;\r\n    /* @var {string|null} maxError Error message for max timestamp violation */\r\n    var maxError = null;\r\n\r\n    /**\r\n     * Store the id of the event being dragged.\r\n     *\r\n     * @param {int} id The event id\r\n     */\r\n    var setEventId = function(id) {\r\n        eventId = id;\r\n    };\r\n\r\n    /**\r\n     * Get the stored event id.\r\n     *\r\n     * @return {int|null}\r\n     */\r\n    var getEventId = function() {\r\n        return eventId;\r\n    };\r\n\r\n    /**\r\n     * Check if the store has an event id.\r\n     *\r\n     * @return {bool}\r\n     */\r\n    var hasEventId = function() {\r\n        return eventId !== null;\r\n    };\r\n\r\n    /**\r\n     * Store the duration (in days) of the event being dragged.\r\n     *\r\n     * @param {int} days Number of days the event spans\r\n     */\r\n    var setDurationDays = function(days) {\r\n        durationDays = days;\r\n    };\r\n\r\n    /**\r\n     * Get the stored number of days.\r\n     *\r\n     * @return {int|null}\r\n     */\r\n    var getDurationDays = function() {\r\n        return durationDays;\r\n    };\r\n\r\n    /**\r\n     * Store the minimum timestart valid for an event being dragged.\r\n     *\r\n     * @param {int} timestamp The unix timstamp\r\n     */\r\n    var setMinTimestart = function(timestamp) {\r\n        minTimestart = timestamp;\r\n    };\r\n\r\n    /**\r\n     * Get the minimum valid timestart.\r\n     *\r\n     * @return {int|null}\r\n     */\r\n    var getMinTimestart = function() {\r\n        return minTimestart;\r\n    };\r\n\r\n    /**\r\n     * Check if a minimum timestamp is set.\r\n     *\r\n     * @return {bool}\r\n     */\r\n    var hasMinTimestart = function() {\r\n        return minTimestart !== null;\r\n    };\r\n\r\n    /**\r\n     * Store the maximum timestart valid for an event being dragged.\r\n     *\r\n     * @param {int} timestamp The unix timstamp\r\n     */\r\n    var setMaxTimestart = function(timestamp) {\r\n        maxTimestart = timestamp;\r\n    };\r\n\r\n    /**\r\n     * Get the maximum valid timestart.\r\n     *\r\n     * @return {int|null}\r\n     */\r\n    var getMaxTimestart = function() {\r\n        return maxTimestart;\r\n    };\r\n\r\n    /**\r\n     * Check if a maximum timestamp is set.\r\n     *\r\n     * @return {bool}\r\n     */\r\n    var hasMaxTimestart = function() {\r\n        return maxTimestart !== null;\r\n    };\r\n\r\n    /**\r\n     * Store the error string to display if trying to drag an event\r\n     * earlier than the minimum allowed date.\r\n     *\r\n     * @param {string} message The error message\r\n     */\r\n    var setMinError = function(message) {\r\n        minError = message;\r\n    };\r\n\r\n    /**\r\n     * Get the error message for a minimum time start violation.\r\n     *\r\n     * @return {string|null}\r\n     */\r\n    var getMinError = function() {\r\n        return minError;\r\n    };\r\n\r\n    /**\r\n     * Store the error string to display if trying to drag an event\r\n     * later than the maximum allowed date.\r\n     *\r\n     * @param {string} message The error message\r\n     */\r\n    var setMaxError = function(message) {\r\n        maxError = message;\r\n    };\r\n\r\n    /**\r\n     * Get the error message for a maximum time start violation.\r\n     *\r\n     * @return {string|null}\r\n     */\r\n    var getMaxError = function() {\r\n        return maxError;\r\n    };\r\n\r\n    /**\r\n     * Reset all of the stored values.\r\n     */\r\n    var clearAll = function() {\r\n        setEventId(null);\r\n        setDurationDays(null);\r\n        setMinTimestart(null);\r\n        setMaxTimestart(null);\r\n        setMinError(null);\r\n        setMaxError(null);\r\n    };\r\n\r\n    return {\r\n        setEventId: setEventId,\r\n        getEventId: getEventId,\r\n        hasEventId: hasEventId,\r\n        setDurationDays: setDurationDays,\r\n        getDurationDays: getDurationDays,\r\n        setMinTimestart: setMinTimestart,\r\n        getMinTimestart: getMinTimestart,\r\n        hasMinTimestart: hasMinTimestart,\r\n        setMaxTimestart: setMaxTimestart,\r\n        getMaxTimestart: getMaxTimestart,\r\n        hasMaxTimestart: hasMaxTimestart,\r\n        setMinError: setMinError,\r\n        getMinError: getMinError,\r\n        setMaxError: setMaxError,\r\n        getMaxError: getMaxError,\r\n        clearAll: clearAll\r\n    };\r\n});\r\n"],"names":["define","eventId","durationDays","minTimestart","maxTimestart","minError","maxError","setEventId","id","setDurationDays","days","setMinTimestart","timestamp","setMaxTimestart","setMinError","message","setMaxError","getEventId","hasEventId","getDurationDays","getMinTimestart","hasMinTimestart","getMaxTimestart","hasMaxTimestart","getMinError","getMaxError","clearAll"],"mappings":";;;;;;;;;;;AA0BAA,4CAAO,IAAI,eAEHC,QAAU,KAEVC,aAAe,KAEfC,aAAe,KAEfC,aAAe,KAEfC,SAAW,KAEXC,SAAW,KAOXC,WAAa,SAASC,IACtBP,QAAUO,IA0BVC,gBAAkB,SAASC,MAC3BR,aAAeQ,MAiBfC,gBAAkB,SAASC,WAC3BT,aAAeS,WA0BfC,gBAAkB,SAASD,WAC3BR,aAAeQ,WA2BfE,YAAc,SAASC,SACvBV,SAAWU,SAkBXC,YAAc,SAASD,SACvBT,SAAWS,eAwBR,CACHR,WAAYA,WACZU,WAzIa,kBACNhB,SAyIPiB,WAjIa,kBACM,OAAZjB,SAiIPQ,gBAAiBA,gBACjBU,gBAjHkB,kBACXjB,cAiHPS,gBAAiBA,gBACjBS,gBAjGkB,kBACXjB,cAiGPkB,gBAzFkB,kBACM,OAAjBlB,cAyFPU,gBAAiBA,gBACjBS,gBAzEkB,kBACXlB,cAyEPmB,gBAjEkB,kBACM,OAAjBnB,cAiEPU,YAAaA,YACbU,YAhDc,kBACPnB,UAgDPW,YAAaA,YACbS,YA/Bc,kBACPnB,UA+BPoB,SAzBW,WACXnB,WAAW,MACXE,gBAAgB,MAChBE,gBAAgB,MAChBE,gBAAgB,MAChBC,YAAY,MACZE,YAAY"}