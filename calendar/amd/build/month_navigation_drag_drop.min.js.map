{"version":3,"file":"month_navigation_drag_drop.min.js","sources":["../src/month_navigation_drag_drop.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A javascript module to handle calendar drag and drop in the calendar\r\n * month view navigation.\r\n *\r\n * This code is run each time the calendar month view is re-rendered. We\r\n * only register the event handlers once per page load so that the in place\r\n * DOM updates that happen on month change don't continue to register handlers.\r\n *\r\n * @module     core_calendar/month_navigation_drag_drop\r\n * @copyright  2017 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n            'jquery',\r\n            'core_calendar/drag_drop_data_store',\r\n        ],\r\n        function(\r\n            $,\r\n            DataStore\r\n        ) {\r\n\r\n    var SELECTORS = {\r\n        DRAGGABLE: '[draggable=\"true\"][data-region=\"event-item\"]',\r\n        DROP_ZONE: '[data-drop-zone=\"nav-link\"]',\r\n    };\r\n    var HOVER_CLASS = 'bg-primary text-white';\r\n    var TARGET_CLASS = 'drop-target';\r\n    var HOVER_TIME = 1000; // 1 second hover to change month.\r\n\r\n    // We store some static variables at the module level because this\r\n    // module is called each time the calendar month view is reloaded but\r\n    // we want some actions to only occur ones.\r\n\r\n    /* @var {bool} registered If the event listeners have been added */\r\n    var registered = false;\r\n    /* @var {int} hoverTimer The timeout id of any timeout waiting for hover */\r\n    var hoverTimer = null;\r\n    /* @var {object} root The root nav element we're operating on */\r\n    var root = null;\r\n\r\n    /**\r\n     * Add or remove the appropriate styling to indicate whether\r\n     * the drop target is being hovered over.\r\n     *\r\n     * @param {object} target The target drop zone element\r\n     * @param {bool} hovered If the element is hovered over ot not\r\n     */\r\n    var updateHoverState = function(target, hovered) {\r\n        if (hovered) {\r\n            target.addClass(HOVER_CLASS);\r\n        } else {\r\n            target.removeClass(HOVER_CLASS);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add some styling to the UI to indicate that the nav links\r\n     * are an acceptable drop target.\r\n     */\r\n    var addDropZoneIndicator = function() {\r\n        root.find(SELECTORS.DROP_ZONE).addClass(TARGET_CLASS);\r\n    };\r\n\r\n    /**\r\n     * Remove the styling from the nav links.\r\n     */\r\n    var removeDropZoneIndicator = function() {\r\n        root.find(SELECTORS.DROP_ZONE).removeClass(TARGET_CLASS);\r\n    };\r\n\r\n    /**\r\n     * Get the drop zone target from the event, if one is found.\r\n     *\r\n     * @param {event} e Javascript event\r\n     * @return {object|null}\r\n     */\r\n    var getTargetFromEvent = function(e) {\r\n        var target = $(e.target).closest(SELECTORS.DROP_ZONE);\r\n        return (target.length) ? target : null;\r\n    };\r\n\r\n    /**\r\n     * This will add a visual indicator to the calendar UI to\r\n     * indicate which nav link is a valid drop zone.\r\n     *\r\n     * @param {Event} e\r\n     */\r\n    var dragstartHandler = function(e) {\r\n        // Make sure the drag event is for a calendar event.\r\n        var eventElement = $(e.target).closest(SELECTORS.DRAGGABLE);\r\n\r\n        if (eventElement.length) {\r\n            addDropZoneIndicator();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update the hover state of the target nav element when\r\n     * the user is dragging an event over it.\r\n     *\r\n     * This will add a visual indicator to the calendar UI to\r\n     * indicate which nav link is being hovered.\r\n     *\r\n     * @param {event} e The dragover event\r\n     */\r\n    var dragoverHandler = function(e) {\r\n        // Ignore dragging of non calendar events.\r\n        if (!DataStore.hasEventId()) {\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n        var target = getTargetFromEvent(e);\r\n\r\n        if (!target) {\r\n            return;\r\n        }\r\n\r\n        // If we're not draggin a calendar event then\r\n        // ignore it.\r\n        if (!DataStore.hasEventId()) {\r\n            return;\r\n        }\r\n\r\n        if (!hoverTimer) {\r\n            hoverTimer = setTimeout(function() {\r\n                target.click();\r\n                hoverTimer = null;\r\n            }, HOVER_TIME);\r\n        }\r\n\r\n        updateHoverState(target, true);\r\n        removeDropZoneIndicator();\r\n    };\r\n\r\n    /**\r\n     * Update the hover state of the target nav element that was\r\n     * previously dragged over but has is no longer a drag target.\r\n     *\r\n     * This will remove the visual indicator from the calendar UI\r\n     * that was added by the dragoverHandler.\r\n     *\r\n     * @param {event} e The dragstart event\r\n     */\r\n    var dragleaveHandler = function(e) {\r\n        // Ignore dragging of non calendar events.\r\n        if (!DataStore.hasEventId()) {\r\n            return;\r\n        }\r\n\r\n        var target = getTargetFromEvent(e);\r\n\r\n        if (!target) {\r\n            return;\r\n        }\r\n\r\n        if (hoverTimer) {\r\n            clearTimeout(hoverTimer);\r\n            hoverTimer = null;\r\n        }\r\n\r\n        updateHoverState(target, false);\r\n        addDropZoneIndicator();\r\n        e.preventDefault();\r\n    };\r\n\r\n    /**\r\n     * Remove the visual indicator from the calendar UI that was\r\n     * added by the dragoverHandler.\r\n     *\r\n     * @param {event} e The drop event\r\n     */\r\n    var dropHandler = function(e) {\r\n        // Ignore dragging of non calendar events.\r\n        if (!DataStore.hasEventId()) {\r\n            return;\r\n        }\r\n\r\n        removeDropZoneIndicator();\r\n        var target = getTargetFromEvent(e);\r\n\r\n        if (!target) {\r\n            return;\r\n        }\r\n\r\n        updateHoverState(target, false);\r\n        e.preventDefault();\r\n    };\r\n\r\n    return {\r\n        /**\r\n         * Initialise the event handlers for the drag events.\r\n         *\r\n         * @param {object} rootElement The element containing calendar nav links\r\n         */\r\n        init: function(rootElement) {\r\n            // Only register the handlers once on the first load.\r\n            if (!registered) {\r\n                // These handlers are only added the first time the module\r\n                // is loaded because we don't want to have a new listener\r\n                // added each time the \"init\" function is called otherwise we'll\r\n                // end up with lots of stale handlers.\r\n                document.addEventListener('dragstart', dragstartHandler, false);\r\n                document.addEventListener('dragover', dragoverHandler, false);\r\n                document.addEventListener('dragleave', dragleaveHandler, false);\r\n                document.addEventListener('drop', dropHandler, false);\r\n                document.addEventListener('dragend', removeDropZoneIndicator, false);\r\n                registered = true;\r\n            }\r\n\r\n            // Update the module variable to operate on the given\r\n            // root element.\r\n            root = $(rootElement);\r\n\r\n            // If we're currently dragging then add the indicators.\r\n            if (DataStore.hasEventId()) {\r\n                addDropZoneIndicator();\r\n            }\r\n        },\r\n    };\r\n});\r\n"],"names":["define","$","DataStore","SELECTORS","registered","hoverTimer","root","updateHoverState","target","hovered","addClass","removeClass","addDropZoneIndicator","find","removeDropZoneIndicator","getTargetFromEvent","e","closest","length","dragstartHandler","dragoverHandler","hasEventId","preventDefault","setTimeout","click","dragleaveHandler","clearTimeout","dropHandler","init","rootElement","document","addEventListener"],"mappings":";;;;;;;;;;;;AA2BAA,kDAAO,CACK,SACA,uCAEJ,SACIC,EACAC,eAGJC,oBACW,+CADXA,oBAEW,8BAWXC,YAAa,EAEbC,WAAa,KAEbC,KAAO,KASPC,iBAAmB,SAASC,OAAQC,SAChCA,QACAD,OAAOE,SAxBG,yBA0BVF,OAAOG,YA1BG,0BAkCdC,qBAAuB,WACvBN,KAAKO,KAAKV,qBAAqBO,SAlChB,gBAwCfI,wBAA0B,WAC1BR,KAAKO,KAAKV,qBAAqBQ,YAzChB,gBAkDfI,mBAAqB,SAASC,OAC1BR,OAASP,EAAEe,EAAER,QAAQS,QAAQd,4BACzBK,OAAOU,OAAUV,OAAS,MASlCW,iBAAmB,SAASH,GAETf,EAAEe,EAAER,QAAQS,QAAQd,qBAEtBe,QACbN,wBAaJQ,gBAAkB,SAASJ,MAEtBd,UAAUmB,cAIfL,EAAEM,qBACEd,OAASO,mBAAmBC,GAE3BR,QAMAN,UAAUmB,eAIVhB,aACDA,WAAakB,YAAW,WACpBf,OAAOgB,QACPnB,WAAa,OApGR,MAwGbE,iBAAiBC,QAAQ,GACzBM,6BAYAW,iBAAmB,SAAST,MAEvBd,UAAUmB,kBAIXb,OAASO,mBAAmBC,GAE3BR,SAIDH,aACAqB,aAAarB,YACbA,WAAa,MAGjBE,iBAAiBC,QAAQ,GACzBI,uBACAI,EAAEM,oBASFK,YAAc,SAASX,MAElBd,UAAUmB,cAIfP,8BACIN,OAASO,mBAAmBC,GAE3BR,SAILD,iBAAiBC,QAAQ,GACzBQ,EAAEM,0BAGC,CAMHM,KAAM,SAASC,aAENzB,aAKD0B,SAASC,iBAAiB,YAAaZ,kBAAkB,GACzDW,SAASC,iBAAiB,WAAYX,iBAAiB,GACvDU,SAASC,iBAAiB,YAAaN,kBAAkB,GACzDK,SAASC,iBAAiB,OAAQJ,aAAa,GAC/CG,SAASC,iBAAiB,UAAWjB,yBAAyB,GAC9DV,YAAa,GAKjBE,KAAOL,EAAE4B,aAGL3B,UAAUmB,cACVT"}