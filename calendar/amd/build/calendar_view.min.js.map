{"version":3,"file":"calendar_view.min.js","sources":["../src/calendar_view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This module is responsible for handle calendar day and upcoming view.\r\n *\r\n * @module     core_calendar/calendar_view\r\n * @copyright  2017 Simey Lameze <simey@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n        'jquery',\r\n        'core/str',\r\n        'core/notification',\r\n        'core_calendar/selectors',\r\n        'core_calendar/events',\r\n        'core_calendar/view_manager',\r\n        'core_calendar/repository',\r\n        'core/modal_factory',\r\n        'core_calendar/modal_event_form',\r\n        'core/modal_events',\r\n        'core_calendar/crud'\r\n    ],\r\n    function(\r\n        $,\r\n        Str,\r\n        Notification,\r\n        CalendarSelectors,\r\n        CalendarEvents,\r\n        CalendarViewManager,\r\n        CalendarRepository,\r\n        ModalFactory,\r\n        ModalEventForm,\r\n        ModalEvents,\r\n        CalendarCrud\r\n    ) {\r\n\r\n        var registerEventListeners = function(root, type) {\r\n            var body = $('body');\r\n\r\n            CalendarCrud.registerRemove(root);\r\n\r\n            var reloadFunction = 'reloadCurrent' + type.charAt(0).toUpperCase() + type.slice(1);\r\n\r\n            body.on(CalendarEvents.created, function() {\r\n                CalendarViewManager[reloadFunction](root);\r\n            });\r\n            body.on(CalendarEvents.deleted, function() {\r\n                CalendarViewManager[reloadFunction](root);\r\n            });\r\n            body.on(CalendarEvents.updated, function() {\r\n                CalendarViewManager[reloadFunction](root);\r\n            });\r\n\r\n            root.on('change', CalendarSelectors.courseSelector, function() {\r\n                var selectElement = $(this);\r\n                var courseId = selectElement.val();\r\n                CalendarViewManager[reloadFunction](root, courseId, null)\r\n                    .then(function() {\r\n                        // We need to get the selector again because the content has changed.\r\n                        return root.find(CalendarSelectors.courseSelector).val(courseId);\r\n                    })\r\n                    .then(function() {\r\n                        CalendarViewManager.updateUrl('?view=upcoming&course=' + courseId);\r\n                    })\r\n                    .fail(Notification.exception);\r\n            });\r\n\r\n            body.on(CalendarEvents.filterChanged, function(e, data) {\r\n                var daysWithEvent = root.find(CalendarSelectors.eventType[data.type]);\r\n                if (data.hidden == true) {\r\n                    daysWithEvent.addClass('hidden');\r\n                } else {\r\n                    daysWithEvent.removeClass('hidden');\r\n                }\r\n                CalendarViewManager.foldDayEvents(root);\r\n            });\r\n\r\n            var eventFormPromise = CalendarCrud.registerEventFormModal(root);\r\n            CalendarCrud.registerEditListeners(root, eventFormPromise);\r\n        };\r\n\r\n        return {\r\n            init: function(root, type) {\r\n                root = $(root);\r\n\r\n                CalendarViewManager.init(root, type);\r\n                registerEventListeners(root, type);\r\n            }\r\n        };\r\n    });\r\n"],"names":["define","$","Str","Notification","CalendarSelectors","CalendarEvents","CalendarViewManager","CalendarRepository","ModalFactory","ModalEventForm","ModalEvents","CalendarCrud","init","root","type","body","registerRemove","reloadFunction","charAt","toUpperCase","slice","on","created","deleted","updated","courseSelector","courseId","this","val","then","find","updateUrl","fail","exception","filterChanged","e","data","daysWithEvent","eventType","hidden","addClass","removeClass","foldDayEvents","eventFormPromise","registerEventFormModal","registerEditListeners","registerEventListeners"],"mappings":";;;;;;;AAsBAA,qCAAO,CACC,SACA,WACA,oBACA,0BACA,uBACA,6BACA,2BACA,qBACA,iCACA,oBACA,uBAEJ,SACIC,EACAC,IACAC,aACAC,kBACAC,eACAC,oBACAC,mBACAC,aACAC,eACAC,YACAC,oBAgDO,CACHC,KAAM,SAASC,KAAMC,MACjBD,KAAOZ,EAAEY,MAETP,oBAAoBM,KAAKC,KAAMC,MAjDV,SAASD,KAAMC,UACpCC,KAAOd,EAAE,QAEbU,aAAaK,eAAeH,UAExBI,eAAiB,gBAAkBH,KAAKI,OAAO,GAAGC,cAAgBL,KAAKM,MAAM,GAEjFL,KAAKM,GAAGhB,eAAeiB,SAAS,WAC5BhB,oBAAoBW,gBAAgBJ,SAExCE,KAAKM,GAAGhB,eAAekB,SAAS,WAC5BjB,oBAAoBW,gBAAgBJ,SAExCE,KAAKM,GAAGhB,eAAemB,SAAS,WAC5BlB,oBAAoBW,gBAAgBJ,SAGxCA,KAAKQ,GAAG,SAAUjB,kBAAkBqB,gBAAgB,eAE5CC,SADgBzB,EAAE0B,MACOC,MAC7BtB,oBAAoBW,gBAAgBJ,KAAMa,SAAU,MAC/CG,MAAK,kBAEKhB,KAAKiB,KAAK1B,kBAAkBqB,gBAAgBG,IAAIF,aAE1DG,MAAK,WACFvB,oBAAoByB,UAAU,yBAA2BL,aAE5DM,KAAK7B,aAAa8B,cAG3BlB,KAAKM,GAAGhB,eAAe6B,eAAe,SAASC,EAAGC,UAC1CC,cAAgBxB,KAAKiB,KAAK1B,kBAAkBkC,UAAUF,KAAKtB,OAC5C,GAAfsB,KAAKG,OACLF,cAAcG,SAAS,UAEvBH,cAAcI,YAAY,UAE9BnC,oBAAoBoC,cAAc7B,aAGlC8B,iBAAmBhC,aAAaiC,uBAAuB/B,MAC3DF,aAAakC,sBAAsBhC,KAAM8B,kBAQrCG,CAAuBjC,KAAMC"}