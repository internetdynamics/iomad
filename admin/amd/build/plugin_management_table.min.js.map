{"version":3,"file":"plugin_management_table.min.js","sources":["../src/plugin_management_table.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport {refreshTableContent} from 'core_table/dynamic';\r\nimport * as Selectors from 'core_table/local/dynamic/selectors';\r\nimport {call as fetchMany} from 'core/ajax';\r\nimport Pending from 'core/pending';\r\nimport {fetchNotifications} from 'core/notification';\r\n\r\nlet watching = false;\r\n\r\nexport default class {\r\n    /**\r\n     * @property {function[]} clickHandlers a list of handlers to call on click.\r\n     */\r\n    clickHandlers = [];\r\n\r\n    constructor() {\r\n        this.addClickHandler(this.handleStateToggle);\r\n        this.addClickHandler(this.handleMoveUpDown);\r\n        this.registerEventListeners();\r\n    }\r\n\r\n    /**\r\n     * Initialise an instance of the class.\r\n     *\r\n     * This is just a way of making it easier to initialise an instance of the class from PHP.\r\n     */\r\n    static init() {\r\n        if (watching) {\r\n            return;\r\n        }\r\n        watching = true;\r\n        new this();\r\n    }\r\n\r\n    /**\r\n     * Add a click handler to the list of handlers.\r\n     *\r\n     * @param {Function} handler A handler to call on a click event\r\n     */\r\n    addClickHandler(handler) {\r\n        this.clickHandlers.push(handler.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Register the event listeners for this instance.\r\n     */\r\n    registerEventListeners() {\r\n        document.addEventListener('click', function(e) {\r\n            const tableRoot = this.getTableRoot(e);\r\n\r\n            if (!tableRoot) {\r\n                return;\r\n            }\r\n\r\n            this.clickHandlers.forEach((handler) => handler(tableRoot, e));\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Get the table root from an event.\r\n     *\r\n     * @param {Event} e\r\n     * @returns {HTMLElement|bool}\r\n     */\r\n    getTableRoot(e) {\r\n        const tableRoot = e.target.closest(Selectors.main.region);\r\n        if (!tableRoot) {\r\n            return false;\r\n        }\r\n\r\n        return tableRoot;\r\n    }\r\n\r\n    /**\r\n     * Set the plugin state (enabled or disabled)\r\n     *\r\n     * @param {string} methodname The web service to call\r\n     * @param {string} plugin The name of the plugin to set the state for\r\n     * @param {number} state The state to set\r\n     * @returns {Promise}\r\n     */\r\n    setPluginState(methodname, plugin, state) {\r\n        return fetchMany([{\r\n            methodname,\r\n            args: {\r\n                plugin,\r\n                state,\r\n            },\r\n        }])[0];\r\n    }\r\n\r\n    setPluginOrder(methodname, plugin, direction) {\r\n        return fetchMany([{\r\n            methodname,\r\n            args: {\r\n                plugin,\r\n                direction,\r\n            },\r\n        }])[0];\r\n    }\r\n\r\n    /**\r\n     * Handle state toggling.\r\n     *\r\n     * @param {HTMLElement} tableRoot\r\n     * @param {Event} e\r\n     */\r\n    async handleStateToggle(tableRoot, e) {\r\n        const stateToggle = e.target.closest('[data-action=\"togglestate\"][data-toggle-method]');\r\n        if (stateToggle) {\r\n            e.preventDefault();\r\n            const pendingPromise = new Pending('core_table/dynamic:togglestate');\r\n\r\n            await this.setPluginState(\r\n                stateToggle.dataset.toggleMethod,\r\n                stateToggle.dataset.plugin,\r\n                stateToggle.dataset.state === '1' ? 0 : 1\r\n            );\r\n\r\n            const [updatedRoot] = await Promise.all([\r\n                refreshTableContent(tableRoot),\r\n                fetchNotifications(),\r\n            ]);\r\n\r\n            // Refocus on the link that as pressed in the first place.\r\n            updatedRoot.querySelector(`[data-action=\"togglestate\"][data-plugin=\"${stateToggle.dataset.plugin}\"]`).focus();\r\n            pendingPromise.resolve();\r\n        }\r\n    }\r\n\r\n    async handleMoveUpDown(tableRoot, e) {\r\n        const actionLink = e.target.closest('[data-action=\"move\"][data-method][data-direction]');\r\n        if (!actionLink) {\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n\r\n        const pendingPromise = new Pending('core_table/dynamic:processAction');\r\n\r\n        await this.setPluginOrder(\r\n            actionLink.dataset.method,\r\n            actionLink.dataset.plugin,\r\n            actionLink.dataset.direction === 'up' ? -1 : 1,\r\n        );\r\n\r\n        const [updatedRoot] = await Promise.all([\r\n            refreshTableContent(tableRoot),\r\n            fetchNotifications(),\r\n        ]);\r\n\r\n        // Refocus on the link that as pressed in the first place.\r\n        const exactMatch = updatedRoot.querySelector(\r\n            `[data-action=\"move\"][data-plugin=\"${actionLink.dataset.plugin}\"][data-direction=\"${actionLink.dataset.direction}\"]`\r\n        );\r\n        if (exactMatch) {\r\n            exactMatch.focus();\r\n        } else {\r\n            // The move link is not present anymore, so we need to focus on the other one.\r\n            updatedRoot.querySelector(`[data-action=\"move\"][data-plugin=\"${actionLink.dataset.plugin}\"]`)?.focus();\r\n        }\r\n\r\n        pendingPromise.resolve();\r\n    }\r\n}\r\n"],"names":["watching","constructor","addClickHandler","this","handleStateToggle","handleMoveUpDown","registerEventListeners","handler","clickHandlers","push","bind","document","addEventListener","e","tableRoot","getTableRoot","forEach","target","closest","Selectors","main","region","setPluginState","methodname","plugin","state","args","setPluginOrder","direction","stateToggle","preventDefault","pendingPromise","Pending","dataset","toggleMethod","updatedRoot","Promise","all","querySelector","focus","resolve","actionLink","method","exactMatch"],"mappings":"gzCAqBIA,UAAW,gCAQXC,8KAFgB,SAGPC,gBAAgBC,KAAKC,wBACrBF,gBAAgBC,KAAKE,uBACrBC,uCASDN,WAGJA,UAAW,MACPG,MAQRD,gBAAgBK,cACPC,cAAcC,KAAKF,QAAQG,KAAKP,OAMzCG,yBACIK,SAASC,iBAAiB,QAAS,SAASC,SAClCC,UAAYX,KAAKY,aAAaF,GAE/BC,gBAIAN,cAAcQ,SAAST,SAAYA,QAAQO,UAAWD,MAC7DH,KAAKP,OASXY,aAAaF,SACHC,UAAYD,EAAEI,OAAOC,QAAQC,UAAUC,KAAKC,eAC7CP,YACM,EAcfQ,eAAeC,WAAYC,OAAQC,cACxB,cAAU,CAAC,CACdF,WAAAA,WACAG,KAAM,CACFF,OAAAA,OACAC,MAAAA,UAEJ,GAGRE,eAAeJ,WAAYC,OAAQI,kBACxB,cAAU,CAAC,CACdL,WAAAA,WACAG,KAAM,CACFF,OAAAA,OACAI,UAAAA,cAEJ,2BASgBd,UAAWD,SACzBgB,YAAchB,EAAEI,OAAOC,QAAQ,sDACjCW,YAAa,CACbhB,EAAEiB,uBACIC,eAAiB,IAAIC,iBAAQ,wCAE7B7B,KAAKmB,eACPO,YAAYI,QAAQC,aACpBL,YAAYI,QAAQT,OACU,MAA9BK,YAAYI,QAAQR,MAAgB,EAAI,SAGrCU,mBAAqBC,QAAQC,IAAI,EACpC,gCAAoBvB,YACpB,wCAIJqB,YAAYG,iEAA0DT,YAAYI,QAAQT,cAAYe,QACtGR,eAAeS,kCAIA1B,UAAWD,SACxB4B,WAAa5B,EAAEI,OAAOC,QAAQ,yDAC/BuB,kBAIL5B,EAAEiB,uBAEIC,eAAiB,IAAIC,iBAAQ,0CAE7B7B,KAAKwB,eACPc,WAAWR,QAAQS,OACnBD,WAAWR,QAAQT,OACc,OAAjCiB,WAAWR,QAAQL,WAAsB,EAAI,SAG1CO,mBAAqBC,QAAQC,IAAI,EACpC,gCAAoBvB,YACpB,wCAIE6B,WAAaR,YAAYG,0DACUG,WAAWR,QAAQT,qCAA4BiB,WAAWR,QAAQL,2CAEvGe,WACAA,WAAWJ,sCAGXJ,YAAYG,0DAAmDG,WAAWR,QAAQT,sEAAae,QAGnGR,eAAeS"}