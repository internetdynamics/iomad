{"version":3,"file":"search.min.js","sources":["../src/search.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Add search filtering of capabilities\r\n *\r\n * @module      tool_capability/search\r\n * @copyright   2023 Paul Holden <paulh@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Pending from 'core/pending';\r\nimport {debounce} from 'core/utils';\r\n\r\nconst Selectors = {\r\n    capabilityOverviewForm: '#capability-overview-form',\r\n    capabilitySelect: '[data-search=\"capability\"]',\r\n    capabilitySearch: '[data-action=\"search\"]',\r\n};\r\n\r\nconst debounceTimer = 250;\r\n\r\n/**\r\n * Initialize module\r\n */\r\nexport const init = () => {\r\n    const capabilityOverviewForm = document.querySelector(Selectors.capabilityOverviewForm);\r\n    if (!capabilityOverviewForm) {\r\n        return;\r\n    }\r\n\r\n    const capabilitySelect = capabilityOverviewForm.querySelector(Selectors.capabilitySelect);\r\n    const capabilitySearch = capabilityOverviewForm.querySelector(Selectors.capabilitySearch);\r\n\r\n    const capabilitySelectFilter = searchTerm => {\r\n        const pendingPromise = new Pending('tool_capability/search:filter');\r\n\r\n        // Remove existing options, remembering which were previously selected.\r\n        let capabilitySelected = [];\r\n        capabilitySelect.querySelectorAll('option').forEach(option => {\r\n            if (option.selected) {\r\n                capabilitySelected.push(option.value);\r\n            }\r\n            option.remove();\r\n        });\r\n\r\n        // Filter for matching capabilities.\r\n        const availableCapabilities = JSON.parse(capabilitySelect.dataset.availableCapabilities);\r\n        const filteredCapabilities = Object.keys(availableCapabilities).reduce((matches, capability) => {\r\n            if (availableCapabilities[capability].toLowerCase().includes(searchTerm)) {\r\n                matches[capability] = availableCapabilities[capability];\r\n            }\r\n            return matches;\r\n        }, []);\r\n\r\n        // Re-create filtered options.\r\n        Object.entries(filteredCapabilities).forEach(([capability, capabilityText]) => {\r\n            const option = document.createElement('option');\r\n            option.value = capability;\r\n            option.innerText = capabilityText;\r\n            option.selected = capabilitySelected.indexOf(capability) > -1;\r\n            capabilitySelect.append(option);\r\n        });\r\n\r\n        pendingPromise.resolve();\r\n    };\r\n\r\n    // Cache initial capability options.\r\n    const availableCapabilities = {};\r\n    capabilitySelect.querySelectorAll('option').forEach(option => {\r\n        availableCapabilities[option.value] = option.text;\r\n    });\r\n    capabilitySelect.dataset.availableCapabilities = JSON.stringify(availableCapabilities);\r\n\r\n    // Debounce the event listener on the search element to allow user to finish typing.\r\n    const capabilitySearchDebounce = debounce(capabilitySelectFilter, debounceTimer);\r\n    capabilitySearch.addEventListener('keyup', event => {\r\n        const pendingPromise = new Pending('tool_capability/search:keyup');\r\n\r\n        capabilitySearchDebounce(event.target.value.toLowerCase());\r\n        setTimeout(() => {\r\n            pendingPromise.resolve();\r\n        }, debounceTimer);\r\n    });\r\n\r\n    // Ensure filter is applied on form load.\r\n    if (capabilitySearch.value !== '') {\r\n        capabilitySelectFilter(capabilitySearch.value.toLowerCase());\r\n    }\r\n};\r\n"],"names":["Selectors","capabilityOverviewForm","document","querySelector","capabilitySelect","capabilitySearch","capabilitySelectFilter","searchTerm","pendingPromise","Pending","capabilitySelected","querySelectorAll","forEach","option","selected","push","value","remove","availableCapabilities","JSON","parse","dataset","filteredCapabilities","Object","keys","reduce","matches","capability","toLowerCase","includes","entries","_ref","capabilityText","createElement","innerText","indexOf","append","resolve","text","stringify","capabilitySearchDebounce","addEventListener","event","target","setTimeout"],"mappings":";;;;;;;kJA0BMA,iCACsB,4BADtBA,2BAEgB,6BAFhBA,2BAGgB,uCAQF,WACVC,uBAAyBC,SAASC,cAAcH,sCACjDC,oCAICG,iBAAmBH,uBAAuBE,cAAcH,4BACxDK,iBAAmBJ,uBAAuBE,cAAcH,4BAExDM,uBAAyBC,mBACrBC,eAAiB,IAAIC,iBAAQ,qCAG/BC,mBAAqB,GACzBN,iBAAiBO,iBAAiB,UAAUC,SAAQC,SAC5CA,OAAOC,UACPJ,mBAAmBK,KAAKF,OAAOG,OAEnCH,OAAOI,kBAILC,sBAAwBC,KAAKC,MAAMhB,iBAAiBiB,QAAQH,uBAC5DI,qBAAuBC,OAAOC,KAAKN,uBAAuBO,QAAO,CAACC,QAASC,cACzET,sBAAsBS,YAAYC,cAAcC,SAAStB,cACzDmB,QAAQC,YAAcT,sBAAsBS,aAEzCD,UACR,IAGHH,OAAOO,QAAQR,sBAAsBV,SAAQmB,WAAEJ,WAAYK,2BACjDnB,OAASX,SAAS+B,cAAc,UACtCpB,OAAOG,MAAQW,WACfd,OAAOqB,UAAYF,eACnBnB,OAAOC,SAAWJ,mBAAmByB,QAAQR,aAAe,EAC5DvB,iBAAiBgC,OAAOvB,WAG5BL,eAAe6B,WAIbnB,sBAAwB,GAC9Bd,iBAAiBO,iBAAiB,UAAUC,SAAQC,SAChDK,sBAAsBL,OAAOG,OAASH,OAAOyB,QAEjDlC,iBAAiBiB,QAAQH,sBAAwBC,KAAKoB,UAAUrB,6BAG1DsB,0BAA2B,mBAASlC,uBAvDxB,KAwDlBD,iBAAiBoC,iBAAiB,SAASC,cACjClC,eAAiB,IAAIC,iBAAQ,gCAEnC+B,yBAAyBE,MAAMC,OAAO3B,MAAMY,eAC5CgB,YAAW,KACPpC,eAAe6B,YA7DL,QAkEa,KAA3BhC,iBAAiBW,OACjBV,uBAAuBD,iBAAiBW,MAAMY"}