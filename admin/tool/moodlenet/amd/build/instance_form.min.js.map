{"version":3,"file":"instance_form.min.js","sources":["../src/instance_form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Our basic form manager for when a user either enters\r\n * their profile url or just wants to browse.\r\n *\r\n * This file is a mishmash of JS functions we need for both the standalone (M3.7, M3.8)\r\n * plugin & Moodle 3.9 functions. The 3.9 Functions have a base understanding that certain\r\n * things exist i.e. directory structures for templates. When this feature goes 3.9+ only\r\n * The goal is that we can quickly gut all AMD modules into bare JS files and use ES6 guidelines.\r\n * Till then this will have to do.\r\n *\r\n * @module     tool_moodlenet/instance_form\r\n * @copyright  2020 Mathew May <mathew.solutions>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['tool_moodlenet/validator',\r\n        'tool_moodlenet/selectors',\r\n        'core/loadingicon',\r\n        'core/templates',\r\n        'core/notification',\r\n        'jquery'],\r\n    function(Validator,\r\n             Selectors,\r\n             LoadingIcon,\r\n             Templates,\r\n             Notification,\r\n             $) {\r\n\r\n    /**\r\n     * Add the event listeners to our form.\r\n     *\r\n     * @method registerListenerEvents\r\n     * @param {HTMLElement} page The whole page element for our form area\r\n     */\r\n    var registerListenerEvents = function registerListenerEvents(page) {\r\n        page.addEventListener('click', function(e) {\r\n\r\n            // Our fake submit button / browse button.\r\n            if (e.target.matches(Selectors.action.submit)) {\r\n                var input = page.querySelector('[data-var=\"mnet-link\"]');\r\n                var overlay = page.querySelector(Selectors.region.spinner);\r\n                var validationArea = document.querySelector(Selectors.region.validationArea);\r\n\r\n                overlay.classList.remove('d-none');\r\n                var spinner = LoadingIcon.addIconToContainerWithPromise(overlay);\r\n                Validator.validation(input)\r\n                    .then(function(result) {\r\n                        spinner.resolve();\r\n                        overlay.classList.add('d-none');\r\n                        if (result.result) {\r\n                            input.classList.remove('is-invalid'); // Just in case the class has been applied already.\r\n                            input.classList.add('is-valid');\r\n                            validationArea.innerText = result.message;\r\n                            validationArea.classList.remove('text-danger');\r\n                            validationArea.classList.add('text-success');\r\n                            // Give the user some time to see their input is valid.\r\n                            setTimeout(function() {\r\n                                window.location = result.domain;\r\n                            }, 1000);\r\n                        } else {\r\n                            input.classList.add('is-invalid');\r\n                            validationArea.innerText = result.message;\r\n                            validationArea.classList.add('text-danger');\r\n                        }\r\n                        return;\r\n                }).catch();\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Given a user wishes to see the MoodleNet profile url form transition them there.\r\n     *\r\n     * @method chooserNavigateToMnet\r\n     * @param {HTMLElement} showMoodleNet The chooser's area for ment\r\n     * @param {Object} footerData Our footer object to render out\r\n     * @param {jQuery} carousel Our carousel instance to manage\r\n     * @param {jQuery} modal Our modal instance to manage\r\n     */\r\n    var chooserNavigateToMnet = function(showMoodleNet, footerData, carousel, modal) {\r\n        showMoodleNet.innerHTML = '';\r\n\r\n        // Add a spinner.\r\n        var spinnerPromise = LoadingIcon.addIconToContainer(showMoodleNet);\r\n\r\n        // Used later...\r\n        var transitionPromiseResolver = null;\r\n        var transitionPromise = new Promise(resolve => {\r\n            transitionPromiseResolver = resolve;\r\n        });\r\n\r\n        $.when(\r\n            spinnerPromise,\r\n            transitionPromise\r\n        ).then(function() {\r\n                Templates.replaceNodeContents(showMoodleNet, footerData.customcarouseltemplate, '');\r\n                return;\r\n        }).catch(Notification.exception);\r\n\r\n        // We apply our handlers in here to minimise plugin dependency in the Chooser.\r\n        registerListenerEvents(showMoodleNet);\r\n\r\n        // Move to the next slide, and resolve the transition promise when it's done.\r\n        carousel.one('slid.bs.carousel', function() {\r\n            transitionPromiseResolver();\r\n        });\r\n        // Trigger the transition between 'pages'.\r\n        carousel.carousel(2);\r\n        // eslint-disable-next-line max-len\r\n        modal.setFooter(Templates.render('tool_moodlenet/chooser_footer_close_mnet', {}));\r\n    };\r\n\r\n    /**\r\n     * Given a user no longer wishes to see the MoodleNet profile url form transition them from there.\r\n     *\r\n     * @method chooserNavigateFromMnet\r\n     * @param {jQuery} carousel Our carousel instance to manage\r\n     * @param {jQuery} modal Our modal instance to manage\r\n     * @param {Object} footerData Our footer object to render out\r\n     */\r\n    var chooserNavigateFromMnet = function(carousel, modal, footerData) {\r\n        // Trigger the transition between 'pages'.\r\n        carousel.carousel(0);\r\n        modal.setFooter(footerData.customfootertemplate);\r\n    };\r\n\r\n        /**\r\n         * Create the custom listener that would handle anything in the footer.\r\n         *\r\n         * @param {Event} e The event being triggered.\r\n         * @param {Object} footerData The data generated from the exporter.\r\n         * @param {Object} modal The chooser modal.\r\n         */\r\n    var footerClickListener = function(e, footerData, modal) {\r\n        if (e.target.matches(Selectors.action.showMoodleNet) || e.target.closest(Selectors.action.showMoodleNet)) {\r\n            e.preventDefault();\r\n            const carousel = $(modal.getBody()[0].querySelector(Selectors.region.carousel));\r\n            const showMoodleNet = carousel.find(Selectors.region.moodleNet)[0];\r\n\r\n            chooserNavigateToMnet(showMoodleNet, footerData, carousel, modal);\r\n        }\r\n        // From the help screen go back to the module overview.\r\n        if (e.target.matches(Selectors.action.closeOption)) {\r\n            const carousel = $(modal.getBody()[0].querySelector(Selectors.region.carousel));\r\n\r\n            chooserNavigateFromMnet(carousel, modal, footerData);\r\n        }\r\n    };\r\n\r\n    return {\r\n        footerClickListener: footerClickListener\r\n    };\r\n});\r\n"],"names":["define","Validator","Selectors","LoadingIcon","Templates","Notification","$","chooserNavigateToMnet","showMoodleNet","footerData","carousel","modal","innerHTML","page","spinnerPromise","addIconToContainer","transitionPromiseResolver","transitionPromise","Promise","resolve","when","then","replaceNodeContents","customcarouseltemplate","catch","exception","addEventListener","e","target","matches","action","submit","input","querySelector","overlay","region","spinner","validationArea","document","classList","remove","addIconToContainerWithPromise","validation","result","add","innerText","message","setTimeout","window","location","domain","one","setFooter","render","footerClickListener","closest","preventDefault","getBody","find","moodleNet","closeOption","customfootertemplate","chooserNavigateFromMnet"],"mappings":";;;;;;;;;;;;;;AA8BAA,sCAAO,CAAC,2BACA,2BACA,mBACA,iBACA,oBACA,WACJ,SAASC,UACAC,UACAC,YACAC,UACAC,aACAC,OAqDLC,sBAAwB,SAASC,cAAeC,WAAYC,SAAUC,OACtEH,cAAcI,UAAY,OA9C+BC,KAiDrDC,eAAiBX,YAAYY,mBAAmBP,eAGhDQ,0BAA4B,KAC5BC,kBAAoB,IAAIC,SAAQC,UAChCH,0BAA4BG,WAGhCb,EAAEc,KACEN,eACAG,mBACFI,MAAK,WACCjB,UAAUkB,oBAAoBd,cAAeC,WAAWc,uBAAwB,OAErFC,MAAMnB,aAAaoB,YA/DmCZ,KAkElCL,eAjElBkB,iBAAiB,SAAS,SAASC,MAGhCA,EAAEC,OAAOC,QAAQ3B,UAAU4B,OAAOC,QAAS,KACvCC,MAAQnB,KAAKoB,cAAc,0BAC3BC,QAAUrB,KAAKoB,cAAc/B,UAAUiC,OAAOC,SAC9CC,eAAiBC,SAASL,cAAc/B,UAAUiC,OAAOE,gBAE7DH,QAAQK,UAAUC,OAAO,cACrBJ,QAAUjC,YAAYsC,8BAA8BP,SACxDjC,UAAUyC,WAAWV,OAChBX,MAAK,SAASsB,QACXP,QAAQjB,UACRe,QAAQK,UAAUK,IAAI,UAClBD,OAAOA,QACPX,MAAMO,UAAUC,OAAO,cACvBR,MAAMO,UAAUK,IAAI,YACpBP,eAAeQ,UAAYF,OAAOG,QAClCT,eAAeE,UAAUC,OAAO,eAChCH,eAAeE,UAAUK,IAAI,gBAE7BG,YAAW,WACPC,OAAOC,SAAWN,OAAOO,SAC1B,OAEHlB,MAAMO,UAAUK,IAAI,cACpBP,eAAeQ,UAAYF,OAAOG,QAClCT,eAAeE,UAAUK,IAAI,mBAGtCpB,YAsCXd,SAASyC,IAAI,oBAAoB,WAC7BnC,+BAGJN,SAASA,SAAS,GAElBC,MAAMyC,UAAUhD,UAAUiD,OAAO,2CAA4C,YAwC1E,CACHC,oBAjBsB,SAAS3B,EAAGlB,WAAYE,UAC1CgB,EAAEC,OAAOC,QAAQ3B,UAAU4B,OAAOtB,gBAAkBmB,EAAEC,OAAO2B,QAAQrD,UAAU4B,OAAOtB,eAAgB,CACtGmB,EAAE6B,uBACI9C,SAAWJ,EAAEK,MAAM8C,UAAU,GAAGxB,cAAc/B,UAAUiC,OAAOzB,WAC/DF,cAAgBE,SAASgD,KAAKxD,UAAUiC,OAAOwB,WAAW,GAEhEpD,sBAAsBC,cAAeC,WAAYC,SAAUC,UAG3DgB,EAAEC,OAAOC,QAAQ3B,UAAU4B,OAAO8B,aAAc,EAtB1B,SAASlD,SAAUC,MAAOF,YAEpDC,SAASA,SAAS,GAClBC,MAAMyC,UAAU3C,WAAWoD,sBAsBvBC,CAFiBxD,EAAEK,MAAM8C,UAAU,GAAGxB,cAAc/B,UAAUiC,OAAOzB,WAEnCC,MAAOF"}