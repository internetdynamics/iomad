{"version":3,"file":"competencypicker_user_plans.min.js","sources":["../src/competencypicker_user_plans.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Competency picker from user plans.\r\n *\r\n * To handle 'save' events use: picker.on('save').\r\n *\r\n * This will receive a object with either a single 'competencyId', or an array in 'competencyIds'\r\n * depending on the value of multiSelect.\r\n *\r\n * @module     tool_lp/competencypicker_user_plans\r\n * @copyright  2015 Frédéric Massart - FMCorz.net\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery',\r\n        'core/notification',\r\n        'core/ajax',\r\n        'core/templates',\r\n        'core/str',\r\n        'tool_lp/tree',\r\n        'tool_lp/competencypicker'\r\n        ],\r\n        function($, Notification, Ajax, Templates, Str, Tree, PickerBase) {\r\n\r\n    /**\r\n     * Competency picker in plan class.\r\n     *\r\n     * @class tool_lp/competencypicker_user_plans\r\n     * @param {Number} userId\r\n     * @param {Number|false} singlePlan The ID of the plan when limited to one.\r\n     * @param {Boolean} multiSelect Support multi-select in the tree.\r\n     */\r\n    var Picker = function(userId, singlePlan, multiSelect) {\r\n        PickerBase.prototype.constructor.apply(this, [1, false, 'self', multiSelect]);\r\n        this._userId = userId;\r\n        this._plans = [];\r\n\r\n        if (singlePlan) {\r\n            this._planId = singlePlan;\r\n            this._singlePlan = true;\r\n        }\r\n    };\r\n    Picker.prototype = Object.create(PickerBase.prototype);\r\n\r\n    /** @property {Array} The list of plans fetched. */\r\n    Picker.prototype._plans = null;\r\n    /** @property {Number} The current plan ID. */\r\n    Picker.prototype._planId = null;\r\n    /** @property {Boolean} Whether we can browse plans or not. */\r\n    Picker.prototype._singlePlan = false;\r\n    /** @property {Number} The user the plans belongs to. */\r\n    Picker.prototype._userId = null;\r\n\r\n    /**\r\n     * Hook to executed after the view is rendered.\r\n     *\r\n     * @method _afterRender\r\n     */\r\n    Picker.prototype._afterRender = function() {\r\n        var self = this;\r\n        PickerBase.prototype._afterRender.apply(self, arguments);\r\n\r\n        // Add listener for framework change.\r\n        if (!self._singlePlan) {\r\n            self._find('[data-action=\"chooseplan\"]').change(function(e) {\r\n                self._planId = $(e.target).val();\r\n                self._loadCompetencies().then(self._refresh.bind(self))\r\n                .catch(Notification.exception);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fetch the competencies.\r\n     *\r\n     * @param {Number} planId The planId.\r\n     * @param {String} searchText Limit the competencies to those matching the text.\r\n     * @method _fetchCompetencies\r\n     * @return {Promise} The promise object.\r\n     */\r\n    Picker.prototype._fetchCompetencies = function(planId, searchText) {\r\n        var self = this;\r\n\r\n        return Ajax.call([\r\n            {methodname: 'core_competency_list_plan_competencies', args: {\r\n                id: planId\r\n            }}\r\n        ])[0].done(function(competencies) {\r\n\r\n            // Expand the list of competencies into a fake tree.\r\n            var i, comp;\r\n            var tree = [];\r\n            for (i = 0; i < competencies.length; i++) {\r\n                comp = competencies[i].competency;\r\n                if (comp.shortname.toLowerCase().indexOf(searchText.toLowerCase()) < 0) {\r\n                    continue;\r\n                }\r\n                comp.children = [];\r\n                comp.haschildren = 0;\r\n                tree.push(comp);\r\n            }\r\n\r\n            self._competencies = tree;\r\n\r\n        }).fail(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Convenience method to get a plan object.\r\n     *\r\n     * @param {Number} id The plan ID.\r\n     * @return {Object|undefined} The plan.\r\n     * @method _getPlan\r\n     */\r\n    Picker.prototype._getPlan = function(id) {\r\n        var plan;\r\n        $.each(this._plans, function(i, f) {\r\n            if (f.id == id) {\r\n                plan = f;\r\n                return;\r\n            }\r\n        });\r\n        return plan;\r\n    };\r\n\r\n    /**\r\n     * Load the competencies.\r\n     *\r\n     * @method _loadCompetencies\r\n     * @return {Promise}\r\n     */\r\n    Picker.prototype._loadCompetencies = function() {\r\n        return this._fetchCompetencies(this._planId, this._searchText);\r\n    };\r\n\r\n    /**\r\n     * Load the plans.\r\n     *\r\n     * @method _loadPlans\r\n     * @return {Promise}\r\n     */\r\n    Picker.prototype._loadPlans = function() {\r\n        var promise,\r\n            self = this;\r\n\r\n        // Quit early because we already have the data.\r\n        if (self._plans.length > 0) {\r\n            return $.when();\r\n        }\r\n\r\n        if (self._singlePlan) {\r\n            promise = Ajax.call([\r\n                {methodname: 'core_competency_read_plan', args: {\r\n                    id: this._planId\r\n                }}\r\n            ])[0].then(function(plan) {\r\n                return [plan];\r\n            });\r\n        } else {\r\n            promise = Ajax.call([\r\n                {methodname: 'core_competency_list_user_plans', args: {\r\n                    userid: self._userId\r\n                }}\r\n            ])[0];\r\n        }\r\n\r\n        return promise.done(function(plans) {\r\n            self._plans = plans;\r\n        }).fail(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Hook to executed before render.\r\n     *\r\n     * @method _preRender\r\n     * @return {Promise}\r\n     */\r\n    Picker.prototype._preRender = function() {\r\n        var self = this;\r\n        return self._loadPlans().then(function() {\r\n            if (!self._planId && self._plans.length > 0) {\r\n                self._planId = self._plans[0].id;\r\n            }\r\n\r\n            // We could not set a framework ID, that probably means there are no frameworks accessible.\r\n            if (!self._planId) {\r\n                self._plans = [];\r\n                return $.when();\r\n            }\r\n\r\n            return self._loadCompetencies();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Render the dialogue.\r\n     *\r\n     * @method _render\r\n     * @return {Promise}\r\n     */\r\n    Picker.prototype._render = function() {\r\n        var self = this;\r\n        return self._preRender().then(function() {\r\n\r\n            if (!self._singlePlan) {\r\n                $.each(self._plans, function(i, plan) {\r\n                    if (plan.id == self._planId) {\r\n                        plan.selected = true;\r\n                    } else {\r\n                        plan.selected = false;\r\n                    }\r\n                });\r\n            }\r\n\r\n            var context = {\r\n                competencies: self._competencies,\r\n                plan: self._getPlan(self._planId),\r\n                plans: self._plans,\r\n                search: self._searchText,\r\n                singlePlan: self._singlePlan,\r\n            };\r\n\r\n            return Templates.render('tool_lp/competency_picker_user_plans', context);\r\n        });\r\n    };\r\n\r\n    return Picker;\r\n});\r\n"],"names":["define","$","Notification","Ajax","Templates","Str","Tree","PickerBase","Picker","userId","singlePlan","multiSelect","prototype","constructor","apply","this","_userId","_plans","_planId","_singlePlan","Object","create","_afterRender","self","arguments","_find","change","e","target","val","_loadCompetencies","then","_refresh","bind","catch","exception","_fetchCompetencies","planId","searchText","call","methodname","args","id","done","competencies","i","comp","tree","length","competency","shortname","toLowerCase","indexOf","children","haschildren","push","_competencies","fail","_getPlan","plan","each","f","_searchText","_loadPlans","when","userid","plans","_preRender","_render","selected","context","search","render"],"mappings":"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"}