{"version":3,"file":"scaleconfig.min.js","sources":["../src/scaleconfig.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Handle opening a dialogue to configure scale data.\r\n *\r\n * @module     tool_lp/scaleconfig\r\n * @copyright  2015 Adrian Greeve <adrian@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/notification', 'core/templates', 'core/ajax', 'tool_lp/dialogue', 'tool_lp/scalevalues'],\r\n    function($, notification, templates, ajax, Dialogue, ModScaleValues) {\r\n\r\n    /**\r\n     * Scale config object.\r\n     * @param {String} selectSelector The select box selector.\r\n     * @param {String} inputSelector The hidden input field selector.\r\n     * @param {String} triggerSelector The trigger selector.\r\n     */\r\n    var ScaleConfig = function(selectSelector, inputSelector, triggerSelector) {\r\n        this.selectSelector = selectSelector;\r\n        this.inputSelector = inputSelector;\r\n        this.triggerSelector = triggerSelector;\r\n\r\n        // Get the current scale ID.\r\n        this.originalscaleid = $(selectSelector).val();\r\n        $(selectSelector).on('change', this.scaleChangeHandler.bind(this)).change();\r\n        $(triggerSelector).click(this.showConfig.bind(this));\r\n    };\r\n\r\n    /** @var {String} The select box selector. */\r\n    ScaleConfig.prototype.selectSelector = null;\r\n    /** @var {String} The hidden field selector. */\r\n    ScaleConfig.prototype.inputSelector = null;\r\n    /** @var {String} The trigger selector. */\r\n    ScaleConfig.prototype.triggerSelector = null;\r\n    /** @var {Array} scalevalues ID and name of the scales. */\r\n    ScaleConfig.prototype.scalevalues = null;\r\n    /** @var {Number) originalscaleid Original scale ID when the page loads. */\r\n    ScaleConfig.prototype.originalscaleid = 0;\r\n    /** @var {Number} scaleid Current scale ID. */\r\n    ScaleConfig.prototype.scaleid = 0;\r\n    /** @var {Dialogue} Reference to the popup. */\r\n    ScaleConfig.prototype.popup = null;\r\n\r\n    /**\r\n     * Displays the scale configuration dialogue.\r\n     *\r\n     * @method showConfig\r\n     */\r\n    ScaleConfig.prototype.showConfig = function() {\r\n        var self = this;\r\n\r\n        this.scaleid = $(this.selectSelector).val();\r\n        if (this.scaleid <= 0) {\r\n            // This should not happen.\r\n            return;\r\n        }\r\n\r\n        var scalename = $(this.selectSelector).find(\"option:selected\").text();\r\n        this.getScaleValues(this.scaleid).done(function() {\r\n\r\n            var context = {\r\n                scalename: scalename,\r\n                scales: self.scalevalues\r\n            };\r\n\r\n            // Dish up the form.\r\n            templates.render('tool_lp/scale_configuration_page', context)\r\n                .done(function(html) {\r\n                    new Dialogue(\r\n                        scalename,\r\n                        html,\r\n                        self.initScaleConfig.bind(self)\r\n                    );\r\n                }).fail(notification.exception);\r\n        }).fail(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Gets the original scale configuration if it was set.\r\n     *\r\n     * @method retrieveOriginalScaleConfig\r\n     * @return {Object|String} scale configuration or empty string.\r\n     */\r\n    ScaleConfig.prototype.retrieveOriginalScaleConfig = function() {\r\n        var jsonstring = $(this.inputSelector).val();\r\n        if (jsonstring !== '') {\r\n            var scaleconfiguration = $.parseJSON(jsonstring);\r\n            // The first object should contain the scale ID for the configuration.\r\n            var scaledetail = scaleconfiguration.shift();\r\n            // Check that this scale id matches the one from the page before returning the configuration.\r\n            if (scaledetail.scaleid === this.originalscaleid) {\r\n                return scaleconfiguration;\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n\r\n    /**\r\n     * Initialises the scale configuration dialogue.\r\n     *\r\n     * @method initScaleConfig\r\n     * @param {Dialogue} popup Dialogue object to initialise.\r\n     */\r\n    ScaleConfig.prototype.initScaleConfig = function(popup) {\r\n        this.popup = popup;\r\n        var body = $(popup.getContent());\r\n        if (this.originalscaleid === this.scaleid) {\r\n            // Set up the popup to show the current configuration.\r\n            var currentconfig = this.retrieveOriginalScaleConfig();\r\n            // Set up the form only if there is configuration settings to set.\r\n            if (currentconfig !== '') {\r\n                currentconfig.forEach(function(value) {\r\n                    if (value.scaledefault === 1) {\r\n                        body.find('[data-field=\"tool_lp_scale_default_' + value.id + '\"]').attr('checked', true);\r\n                    }\r\n                    if (value.proficient === 1) {\r\n                        body.find('[data-field=\"tool_lp_scale_proficient_' + value.id + '\"]').attr('checked', true);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        body.on('click', '[data-action=\"close\"]', function() {\r\n            this.setScaleConfig();\r\n            popup.close();\r\n        }.bind(this));\r\n        body.on('click', '[data-action=\"cancel\"]', function() {\r\n            popup.close();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Set the scale configuration back into a JSON string in the hidden element.\r\n     *\r\n     * @method setScaleConfig\r\n     */\r\n    ScaleConfig.prototype.setScaleConfig = function() {\r\n        var body = $(this.popup.getContent());\r\n        // Get the data.\r\n        var data = [{scaleid: this.scaleid}];\r\n        this.scalevalues.forEach(function(value) {\r\n            var scaledefault = 0;\r\n            var proficient = 0;\r\n            if (body.find('[data-field=\"tool_lp_scale_default_' + value.id + '\"]').is(':checked')) {\r\n                scaledefault = 1;\r\n            }\r\n            if (body.find('[data-field=\"tool_lp_scale_proficient_' + value.id + '\"]').is(':checked')) {\r\n                proficient = 1;\r\n            }\r\n\r\n            if (!scaledefault && !proficient) {\r\n                return;\r\n            }\r\n\r\n            data.push({\r\n                id: value.id,\r\n                scaledefault: scaledefault,\r\n                proficient: proficient\r\n            });\r\n         });\r\n        var datastring = JSON.stringify(data);\r\n        // Send to the hidden field on the form.\r\n        $(this.inputSelector).val(datastring);\r\n        // Once the configuration has been saved then the original scale ID is set to the current scale ID.\r\n        this.originalscaleid = this.scaleid;\r\n    };\r\n\r\n    /**\r\n     * Get the scale values for the selected scale.\r\n     *\r\n     * @method getScaleValues\r\n     * @param {Number} scaleid The scale ID of the selected scale.\r\n     * @return {Promise} A deffered object with the scale values.\r\n     */\r\n    ScaleConfig.prototype.getScaleValues = function(scaleid) {\r\n        return ModScaleValues.get_values(scaleid).then(function(values) {\r\n            this.scalevalues = values;\r\n            return values;\r\n        }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * Triggered when a scale is selected.\r\n     *\r\n     * @name   scaleChangeHandler\r\n     * @param  {Event} e\r\n     * @function\r\n     */\r\n    ScaleConfig.prototype.scaleChangeHandler = function(e) {\r\n        if ($(e.target).val() <= 0) {\r\n            $(this.triggerSelector).prop('disabled', true);\r\n        } else {\r\n            $(this.triggerSelector).prop('disabled', false);\r\n        }\r\n\r\n    };\r\n\r\n    return {\r\n\r\n        /**\r\n         * Main initialisation.\r\n         *\r\n         * @param {String} selectSelector The select box selector.\r\n         * @param {String} inputSelector The hidden input field selector.\r\n         * @param {String} triggerSelector The trigger selector.\r\n         * @return {ScaleConfig} A new instance of ScaleConfig.\r\n         * @method init\r\n         */\r\n        init: function(selectSelector, inputSelector, triggerSelector) {\r\n            return new ScaleConfig(selectSelector, inputSelector, triggerSelector);\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","notification","templates","ajax","Dialogue","ModScaleValues","ScaleConfig","selectSelector","inputSelector","triggerSelector","originalscaleid","val","on","this","scaleChangeHandler","bind","change","click","showConfig","prototype","scalevalues","scaleid","popup","self","scalename","find","text","getScaleValues","done","context","scales","render","html","initScaleConfig","fail","exception","retrieveOriginalScaleConfig","jsonstring","scaleconfiguration","parseJSON","shift","body","getContent","currentconfig","forEach","value","scaledefault","id","attr","proficient","setScaleConfig","close","data","is","push","datastring","JSON","stringify","get_values","then","values","e","target","prop","init"],"mappings":"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"}