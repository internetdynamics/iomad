{"version":3,"file":"menubar.min.js","sources":["../src/menubar.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Aria menubar functionality. Enhances a simple nested list structure into a full aria widget.\r\n * Based on the open ajax example: http://oaa-accessibility.org/example/26/\r\n *\r\n * @module     tool_lp/menubar\r\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery'], function($) {\r\n\r\n    /** @property {boolean}  Flag to indicate if we have already registered a click event handler for the document. */\r\n    var documentClickHandlerRegistered = false;\r\n\r\n    /** @property {boolean} Flag to indicate whether there's an active, open menu. */\r\n    var menuActive = false;\r\n\r\n    /**\r\n     * Close all open submenus anywhere in the page (there should only ever be one open at a time).\r\n     *\r\n     * @method closeAllSubMenus\r\n     */\r\n    var closeAllSubMenus = function() {\r\n        $('.tool-lp-menu .tool-lp-sub-menu').attr('aria-hidden', 'true');\r\n        // Every menu's closed at this point, so set the menu active flag to false.\r\n        menuActive = false;\r\n    };\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {jQuery} menuRoot Jquery collection matching the root of the menu.\r\n     * @param {Function[]} handlers called when a menu item is chosen.\r\n     */\r\n    var Menubar = function(menuRoot, handlers) {\r\n        // Setup private class variables.\r\n        this.menuRoot = menuRoot;\r\n        this.handlers = handlers;\r\n        this.rootMenus = this.menuRoot.children('li');\r\n        this.subMenus = this.rootMenus.children('ul');\r\n        this.subMenuItems = this.subMenus.children('li');\r\n        this.allItems = this.rootMenus.add(this.subMenuItems);\r\n        this.activeItem = null;\r\n        this.isChildOpen = false;\r\n\r\n        this.keys = {\r\n            tab:    9,\r\n            enter:  13,\r\n            esc:    27,\r\n            space:  32,\r\n            left:   37,\r\n            up:     38,\r\n            right:  39,\r\n            down:   40\r\n        };\r\n\r\n        this.addAriaAttributes();\r\n        // Add the event listeners.\r\n        this.addEventListeners();\r\n    };\r\n\r\n    /**\r\n     * Open a submenu, first it closes all other sub-menus and sets the open direction.\r\n     * @method openSubMenu\r\n     * @param {Node} menu\r\n     */\r\n    Menubar.prototype.openSubMenu = function(menu) {\r\n        this.setOpenDirection();\r\n        closeAllSubMenus();\r\n        menu.attr('aria-hidden', 'false');\r\n        // Set menu active flag to true when a menu is opened.\r\n        menuActive = true;\r\n    };\r\n\r\n\r\n    /**\r\n     * Bind the event listeners to the DOM\r\n     * @method addEventListeners\r\n     */\r\n    Menubar.prototype.addEventListeners = function() {\r\n        var currentThis = this;\r\n\r\n        // When clicking outside the menubar.\r\n        if (documentClickHandlerRegistered === false) {\r\n            $(document).click(function() {\r\n                // Check if a menu is opened.\r\n                if (menuActive) {\r\n                    // Close menu.\r\n                    closeAllSubMenus();\r\n                }\r\n            });\r\n            // Set this flag to true so that we won't need to add a document click handler for the other Menubar instances.\r\n            documentClickHandlerRegistered = true;\r\n        }\r\n\r\n        // Hovers.\r\n        this.subMenuItems.mouseenter(function() {\r\n            $(this).addClass('menu-hover');\r\n            return true;\r\n        });\r\n\r\n        this.subMenuItems.mouseout(function() {\r\n            $(this).removeClass('menu-hover');\r\n            return true;\r\n        });\r\n\r\n        // Mouse listeners.\r\n        this.allItems.click(function(e) {\r\n            return currentThis.handleClick($(this), e);\r\n        });\r\n\r\n        // Key listeners.\r\n        this.allItems.keydown(function(e) {\r\n            return currentThis.handleKeyDown($(this), e);\r\n        });\r\n\r\n        this.allItems.focus(function() {\r\n            return currentThis.handleFocus($(this));\r\n        });\r\n\r\n        this.allItems.blur(function() {\r\n            return currentThis.handleBlur($(this));\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Process click events for the top menus.\r\n     *\r\n     * @method handleClick\r\n     * @param {Object} item is the jquery object of the item firing the event\r\n     * @param {Event} e is the associated event object\r\n     * @return {boolean} Returns false\r\n     */\r\n    Menubar.prototype.handleClick = function(item, e) {\r\n        e.stopPropagation();\r\n\r\n        var parentUL = item.parent();\r\n\r\n        if (parentUL.is('.tool-lp-menu')) {\r\n            // Toggle the child menu open/closed.\r\n            if (item.children('ul').first().attr('aria-hidden') == 'true') {\r\n                this.openSubMenu(item.children('ul').first());\r\n            } else {\r\n                item.children('ul').first().attr('aria-hidden', 'true');\r\n            }\r\n        } else {\r\n            // Remove hover and focus styling.\r\n            this.allItems.removeClass('menu-hover menu-focus');\r\n\r\n            // Clear the active item.\r\n            this.activeItem = null;\r\n\r\n            // Close the menu.\r\n            this.menuRoot.find('ul').not('.root-level').attr('aria-hidden', 'true');\r\n            // Follow any link, or call the click handlers.\r\n            var anchor = item.find('a').first();\r\n            var clickEvent = new $.Event('click');\r\n            clickEvent.target = anchor;\r\n            var eventHandled = false;\r\n            if (this.handlers) {\r\n                $.each(this.handlers, function(selector, handler) {\r\n                    if (eventHandled) {\r\n                        return;\r\n                    }\r\n                    if (item.find(selector).length > 0) {\r\n                        var callable = $.proxy(handler, anchor);\r\n                        // False means stop propogatting events.\r\n                        eventHandled = (callable(clickEvent) === false) || clickEvent.isDefaultPrevented();\r\n                    }\r\n                });\r\n            }\r\n            // If we didn't find a handler, and the HREF is # that probably means that\r\n            // we are handling it from somewhere else. Let's just do nothing in that case.\r\n            if (!eventHandled && anchor.attr('href') !== '#') {\r\n                window.location.href = anchor.attr('href');\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /*\r\n     * Process focus events for the menu.\r\n     *\r\n     * @method handleFocus\r\n     * @param {Object} item is the jquery object of the item firing the event\r\n     * @return boolean Returns false\r\n     */\r\n    Menubar.prototype.handleFocus = function(item) {\r\n\r\n        // If activeItem is null, we are getting focus from outside the menu. Store\r\n        // the item that triggered the event.\r\n        if (this.activeItem === null) {\r\n            this.activeItem = item;\r\n        } else if (item[0] != this.activeItem[0]) {\r\n            return true;\r\n        }\r\n\r\n        // Get the set of jquery objects for all the parent items of the active item.\r\n        var parentItems = this.activeItem.parentsUntil('ul.tool-lp-menu').filter('li');\r\n\r\n        // Remove focus styling from all other menu items.\r\n        this.allItems.removeClass('menu-focus');\r\n\r\n        // Add focus styling to the active item.\r\n        this.activeItem.addClass('menu-focus');\r\n\r\n        // Add focus styling to all parent items.\r\n        parentItems.addClass('menu-focus');\r\n\r\n        // If the bChildOpen flag has been set, open the active item's child menu (if applicable).\r\n        if (this.isChildOpen === true) {\r\n\r\n            var itemUL = item.parent();\r\n\r\n            // If the itemUL is a root-level menu and item is a parent item,\r\n            // show the child menu.\r\n            if (itemUL.is('.tool-lp-menu') && (item.attr('aria-haspopup') == 'true')) {\r\n                this.openSubMenu(item.children('ul').first());\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    /*\r\n     * Process blur events for the menu.\r\n     *\r\n     * @method handleBlur\r\n     * @param {Object} item is the jquery object of the item firing the event\r\n     * @return boolean Returns false\r\n     */\r\n    Menubar.prototype.handleBlur = function(item) {\r\n        item.removeClass('menu-focus');\r\n\r\n        return true;\r\n    };\r\n\r\n    /*\r\n     * Determine if the menu should open to the left, or the right,\r\n     * based on the screen size and menu position.\r\n     * @method setOpenDirection\r\n     */\r\n    Menubar.prototype.setOpenDirection = function() {\r\n        var pos = this.menuRoot.offset();\r\n        var isRTL = $(document.body).hasClass('dir-rtl');\r\n        var openLeft = true;\r\n        var heightmenuRoot = this.rootMenus.outerHeight();\r\n        var widthmenuRoot = this.rootMenus.outerWidth();\r\n        // Sometimes the menuMinWidth is not enough to figure out if menu exceeds the window width.\r\n        // So we have to calculate the real menu width.\r\n        var subMenuContainer = this.rootMenus.find('ul.tool-lp-sub-menu');\r\n\r\n        // Reset margins.\r\n        subMenuContainer.css('margin-right', '');\r\n        subMenuContainer.css('margin-left', '');\r\n        subMenuContainer.css('margin-top', '');\r\n\r\n        subMenuContainer.attr('aria-hidden', false);\r\n        var menuRealWidth = subMenuContainer.outerWidth(),\r\n            menuRealHeight = subMenuContainer.outerHeight();\r\n\r\n        var margintop = null,\r\n            marginright = null,\r\n            marginleft = null;\r\n        var top = pos.top - $(window).scrollTop();\r\n        // Top is the same for RTL and LTR.\r\n        if (top + menuRealHeight > $(window).height()) {\r\n            margintop = menuRealHeight + heightmenuRoot;\r\n            subMenuContainer.css('margin-top', '-' + margintop + 'px');\r\n        }\r\n\r\n        if (isRTL) {\r\n            if (pos.left - menuRealWidth < 0) {\r\n                marginright = menuRealWidth - widthmenuRoot;\r\n                subMenuContainer.css('margin-right', '-' + marginright + 'px');\r\n            }\r\n        } else {\r\n            if (pos.left + menuRealWidth > $(window).width()) {\r\n                marginleft = menuRealWidth - widthmenuRoot;\r\n                subMenuContainer.css('margin-left', '-' + marginleft + 'px');\r\n            }\r\n        }\r\n\r\n        if (openLeft) {\r\n            this.menuRoot.addClass('tool-lp-menu-open-left');\r\n        } else {\r\n            this.menuRoot.removeClass('tool-lp-menu-open-left');\r\n        }\r\n\r\n    };\r\n\r\n    /*\r\n     * Process keyDown events for the menu.\r\n     *\r\n     * @method handleKeyDown\r\n     * @param {Object} item is the jquery object of the item firing the event\r\n     * @param {Event} e is the associated event object\r\n     * @return boolean Returns false if consuming the event\r\n     */\r\n    Menubar.prototype.handleKeyDown = function(item, e) {\r\n\r\n        if (e.altKey || e.ctrlKey) {\r\n            // Modifier key pressed: Do not process.\r\n            return true;\r\n        }\r\n\r\n        switch (e.keyCode) {\r\n            case this.keys.tab: {\r\n\r\n                // Hide all menu items and update their aria attributes.\r\n                this.menuRoot.find('ul').attr('aria-hidden', 'true');\r\n\r\n                // Remove focus styling from all menu items.\r\n                this.allItems.removeClass('menu-focus');\r\n\r\n                this.activeItem = null;\r\n\r\n                this.isChildOpen = false;\r\n\r\n                break;\r\n            }\r\n            case this.keys.esc: {\r\n                var itemUL = item.parent();\r\n\r\n                if (itemUL.is('.tool-lp-menu')) {\r\n                    // Hide the child menu and update the aria attributes.\r\n                    item.children('ul').first().attr('aria-hidden', 'true');\r\n                } else {\r\n\r\n                    // Move up one level.\r\n                    this.activeItem = itemUL.parent();\r\n\r\n                    // Reset the isChildOpen flag.\r\n                    this.isChildOpen = false;\r\n\r\n                    // Set focus on the new item.\r\n                    this.activeItem.focus();\r\n\r\n                    // Hide the active menu and update the aria attributes.\r\n                    itemUL.attr('aria-hidden', 'true');\r\n                }\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.enter:\r\n            case this.keys.space: {\r\n                // Trigger click handler.\r\n                return this.handleClick(item, e);\r\n            }\r\n\r\n            case this.keys.left: {\r\n\r\n                this.activeItem = this.moveToPrevious(item);\r\n\r\n                this.activeItem.focus();\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.right: {\r\n\r\n                this.activeItem = this.moveToNext(item);\r\n\r\n                this.activeItem.focus();\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.up: {\r\n\r\n                this.activeItem = this.moveUp(item);\r\n\r\n                this.activeItem.focus();\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n            case this.keys.down: {\r\n\r\n                this.activeItem = this.moveDown(item);\r\n\r\n                this.activeItem.focus();\r\n\r\n                e.stopPropagation();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Move to the next menu level.\r\n     * This will be either the next root-level menu or the child of a menu parent. If\r\n     * at the root level and the active item is the last in the menu, this function will loop\r\n     * to the first menu item.\r\n     *\r\n     * If the menu is a horizontal menu, the first child element of the newly selected menu will\r\n     * be selected\r\n     *\r\n     * @method moveToNext\r\n     * @param {Object} item is the active menu item\r\n     * @return {Object} Returns the item to move to. Returns item is no move is possible\r\n     */\r\n    Menubar.prototype.moveToNext = function(item) {\r\n        // Item's containing menu.\r\n        var itemUL = item.parent();\r\n\r\n        // The items in the currently active menu.\r\n        var menuItems = itemUL.children('li');\r\n\r\n        // The number of items in the active menu.\r\n        var menuNum = menuItems.length;\r\n        // The items index in its menu.\r\n        var menuIndex = menuItems.index(item);\r\n        var newItem = null;\r\n        var childMenu = null;\r\n\r\n        if (itemUL.is('.tool-lp-menu')) {\r\n            // This is the root level move to next sibling. This will require closing\r\n            // the current child menu and opening the new one.\r\n\r\n            if (menuIndex < menuNum - 1) {\r\n                // Not the last root menu.\r\n                newItem = item.next();\r\n            } else { // Wrap to first item.\r\n                newItem = menuItems.first();\r\n            }\r\n\r\n            // Close the current child menu (if applicable).\r\n            if (item.attr('aria-haspopup') == 'true') {\r\n\r\n                childMenu = item.children('ul').first();\r\n\r\n                if (childMenu.attr('aria-hidden') == 'false') {\r\n                    // Update the child menu's aria-hidden attribute.\r\n                    childMenu.attr('aria-hidden', 'true');\r\n                    this.isChildOpen = true;\r\n                }\r\n            }\r\n\r\n            // Remove the focus styling from the current menu.\r\n            item.removeClass('menu-focus');\r\n\r\n            // Open the new child menu (if applicable).\r\n            if ((newItem.attr('aria-haspopup') === 'true') && (this.isChildOpen === true)) {\r\n\r\n                childMenu = newItem.children('ul').first();\r\n\r\n                // Update the child's aria-hidden attribute.\r\n                this.openSubMenu(childMenu);\r\n            }\r\n        } else {\r\n            // This is not the root level. If there is a child menu to be moved into, do that;\r\n            // otherwise, move to the next root-level menu if there is one.\r\n            if (item.attr('aria-haspopup') == 'true') {\r\n\r\n                childMenu = item.children('ul').first();\r\n\r\n                newItem = childMenu.children('li').first();\r\n\r\n                // Show the child menu and update its aria attributes.\r\n                this.openSubMenu(childMenu);\r\n            } else {\r\n                // At deepest level, move to the next root-level menu.\r\n\r\n                var parentMenus = null;\r\n                var rootItem = null;\r\n\r\n                // Get list of all parent menus for item, up to the root level.\r\n                parentMenus = item.parentsUntil('ul.tool-lp-menu').filter('ul').not('.tool-lp-menu');\r\n\r\n                // Hide the current menu and update its aria attributes accordingly.\r\n                parentMenus.attr('aria-hidden', 'true');\r\n\r\n                // Remove the focus styling from the active menu.\r\n                parentMenus.find('li').removeClass('menu-focus');\r\n                parentMenus.last().parent().removeClass('menu-focus');\r\n\r\n                // The containing root for the menu.\r\n                rootItem = parentMenus.last().parent();\r\n\r\n                menuIndex = this.rootMenus.index(rootItem);\r\n\r\n                // If this is not the last root menu item, move to the next one.\r\n                if (menuIndex < this.rootMenus.length - 1) {\r\n                    newItem = rootItem.next();\r\n                } else {\r\n                    // Loop.\r\n                    newItem = this.rootMenus.first();\r\n                }\r\n\r\n                // Add the focus styling to the new menu.\r\n                newItem.addClass('menu-focus');\r\n\r\n                if (newItem.attr('aria-haspopup') == 'true') {\r\n                    childMenu = newItem.children('ul').first();\r\n\r\n                    newItem = childMenu.children('li').first();\r\n\r\n                    // Show the child menu and update it's aria attributes.\r\n                    this.openSubMenu(childMenu);\r\n                    this.isChildOpen = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return newItem;\r\n    };\r\n\r\n    /**\r\n     * Member function to move to the previous menu level.\r\n     * This will be either the previous root-level menu or the child of a menu parent. If\r\n     * at the root level and the active item is the first in the menu, this function will loop\r\n     * to the last menu item.\r\n     *\r\n     * If the menu is a horizontal menu, the first child element of the newly selected menu will\r\n     * be selected\r\n     *\r\n     * @method moveToPrevious\r\n     * @param {Object} item is the active menu item\r\n     * @return {Object} Returns the item to move to. Returns item is no move is possible\r\n     */\r\n    Menubar.prototype.moveToPrevious = function(item) {\r\n        // Item's containing menu.\r\n        var itemUL = item.parent();\r\n        // The items in the currently active menu.\r\n        var menuItems = itemUL.children('li');\r\n        // The items index in its menu.\r\n        var menuIndex = menuItems.index(item);\r\n        var newItem = null;\r\n        var childMenu = null;\r\n\r\n        if (itemUL.is('.tool-lp-menu')) {\r\n            // This is the root level move to previous sibling. This will require closing\r\n            // the current child menu and opening the new one.\r\n\r\n            if (menuIndex > 0) {\r\n                // Not the first root menu.\r\n                newItem = item.prev();\r\n            } else {\r\n                // Wrap to last item.\r\n                newItem = menuItems.last();\r\n            }\r\n\r\n            // Close the current child menu (if applicable).\r\n            if (item.attr('aria-haspopup') == 'true') {\r\n                childMenu = item.children('ul').first();\r\n\r\n                if (childMenu.attr('aria-hidden') == 'false') {\r\n                    // Update the child menu's aria-hidden attribute.\r\n                    childMenu.attr('aria-hidden', 'true');\r\n                    this.isChildOpen = true;\r\n                }\r\n            }\r\n\r\n            // Remove the focus styling from the current menu.\r\n            item.removeClass('menu-focus');\r\n\r\n            // Open the new child menu (if applicable).\r\n            if ((newItem.attr('aria-haspopup') === 'true') && (this.isChildOpen === true)) {\r\n\r\n                childMenu = newItem.children('ul').first();\r\n\r\n                // Update the child's aria-hidden attribute.\r\n                this.openSubMenu(childMenu);\r\n\r\n            }\r\n        } else {\r\n            // This is not the root level. If there is a parent menu that is not the\r\n            // root menu, move up one level; otherwise, move to first item of the previous\r\n            // root menu.\r\n\r\n            var parentLI = itemUL.parent();\r\n            var parentUL = parentLI.parent();\r\n\r\n            // If this is a vertical menu or is not the first child menu\r\n            // of the root-level menu, move up one level.\r\n            if (!parentUL.is('.tool-lp-menu')) {\r\n\r\n                newItem = itemUL.parent();\r\n\r\n                // Hide the active menu and update aria-hidden.\r\n                itemUL.attr('aria-hidden', 'true');\r\n\r\n                // Remove the focus highlight from the item.\r\n                item.removeClass('menu-focus');\r\n\r\n            } else {\r\n                // Move to previous root-level menu.\r\n\r\n                // Hide the current menu and update the aria attributes accordingly.\r\n                itemUL.attr('aria-hidden', 'true');\r\n\r\n                // Remove the focus styling from the active menu.\r\n                item.removeClass('menu-focus');\r\n                parentLI.removeClass('menu-focus');\r\n\r\n                menuIndex = this.rootMenus.index(parentLI);\r\n\r\n                if (menuIndex > 0) {\r\n                    // Move to the previous root-level menu.\r\n                    newItem = parentLI.prev();\r\n                } else {\r\n                    // Loop to last root-level menu.\r\n                    newItem = this.rootMenus.last();\r\n                }\r\n\r\n                // Add the focus styling to the new menu.\r\n                newItem.addClass('menu-focus');\r\n\r\n                if (newItem.attr('aria-haspopup') == 'true') {\r\n                    childMenu = newItem.children('ul').first();\r\n\r\n                    // Show the child menu and update it's aria attributes.\r\n                    this.openSubMenu(childMenu);\r\n                    this.isChildOpen = true;\r\n\r\n                    newItem = childMenu.children('li').first();\r\n                }\r\n            }\r\n        }\r\n\r\n        return newItem;\r\n    };\r\n\r\n    /**\r\n     * Member function to select the next item in a menu.\r\n     * If the active item is the last in the menu, this function will loop to the\r\n     * first menu item.\r\n     *\r\n     * @method moveDown\r\n     * @param {Object} item is the active menu item\r\n     * @param {String} startChr is the character to attempt to match against the beginning of the\r\n     *                          menu item titles. If found, focus moves to the next menu item beginning with that character.\r\n     * @return {Object} Returns the item to move to. Returns item is no move is possible\r\n     */\r\n    Menubar.prototype.moveDown = function(item, startChr) {\r\n        // Item's containing menu.\r\n        var itemUL = item.parent();\r\n        // The items in the currently active menu.\r\n        var menuItems = itemUL.children('li').not('.separator');\r\n        // The number of items in the active menu.\r\n        var menuNum = menuItems.length;\r\n        // The items index in its menu.\r\n        var menuIndex = menuItems.index(item);\r\n        var newItem = null;\r\n        var newItemUL = null;\r\n\r\n        if (itemUL.is('.tool-lp-menu')) {\r\n            // This is the root level menu.\r\n\r\n            if (item.attr('aria-haspopup') != 'true') {\r\n                // No child menu to move to.\r\n                return item;\r\n            }\r\n\r\n            // Move to the first item in the child menu.\r\n            newItemUL = item.children('ul').first();\r\n            newItem = newItemUL.children('li').first();\r\n\r\n            // Make sure the child menu is visible.\r\n            this.openSubMenu(newItemUL);\r\n\r\n            return newItem;\r\n        }\r\n\r\n        // If $item is not the last item in its menu, move to the next item. If startChr is specified, move\r\n        // to the next item with a title that begins with that character.\r\n        if (startChr) {\r\n            var match = false;\r\n            var curNdx = menuIndex + 1;\r\n\r\n            // Check if the active item was the last one on the list.\r\n            if (curNdx == menuNum) {\r\n                curNdx = 0;\r\n            }\r\n\r\n            // Iterate through the menu items (starting from the current item and wrapping) until a match is found\r\n            // or the loop returns to the current menu item.\r\n            while (curNdx != menuIndex) {\r\n\r\n                var titleChr = menuItems.eq(curNdx).html().charAt(0);\r\n\r\n                if (titleChr.toLowerCase() == startChr) {\r\n                    match = true;\r\n                    break;\r\n                }\r\n\r\n                curNdx = curNdx + 1;\r\n\r\n                if (curNdx == menuNum) {\r\n                    // Reached the end of the list, start again at the beginning.\r\n                    curNdx = 0;\r\n                }\r\n            }\r\n\r\n            if (match === true) {\r\n                newItem = menuItems.eq(curNdx);\r\n\r\n                // Remove the focus styling from the current item.\r\n                item.removeClass('menu-focus');\r\n\r\n                return newItem;\r\n            } else {\r\n                return item;\r\n            }\r\n        } else {\r\n            if (menuIndex < menuNum - 1) {\r\n                newItem = menuItems.eq(menuIndex + 1);\r\n            } else {\r\n                newItem = menuItems.first();\r\n            }\r\n        }\r\n\r\n        // Remove the focus styling from the current item.\r\n        item.removeClass('menu-focus');\r\n\r\n        return newItem;\r\n    };\r\n\r\n    /**\r\n     * Function moveUp() is a member function to select the previous item in a menu.\r\n     * If the active item is the first in the menu, this function will loop to the\r\n     * last menu item.\r\n     *\r\n     * @method moveUp\r\n     * @param {Object} item is the active menu item\r\n     * @return {Object} Returns the item to move to. Returns item is no move is possible\r\n     */\r\n    Menubar.prototype.moveUp = function(item) {\r\n        // Item's containing menu.\r\n        var itemUL = item.parent();\r\n        // The items in the currently active menu.\r\n        var menuItems = itemUL.children('li').not('.separator');\r\n        // The items index in its menu.\r\n        var menuIndex = menuItems.index(item);\r\n        var newItem = null;\r\n\r\n        if (itemUL.is('.tool-lp-menu')) {\r\n            // This is the root level menu.\r\n            // Nothing to do.\r\n            return item;\r\n        }\r\n\r\n        // If item is not the first item in its menu, move to the previous item.\r\n        if (menuIndex > 0) {\r\n            newItem = menuItems.eq(menuIndex - 1);\r\n        } else {\r\n            // Loop to top of menu.\r\n            newItem = menuItems.last();\r\n        }\r\n\r\n        // Remove the focus styling from the current item.\r\n        item.removeClass('menu-focus');\r\n\r\n        return newItem;\r\n    };\r\n\r\n    /**\r\n     * Enhance the dom with aria attributes.\r\n     * @method addAriaAttributes\r\n     */\r\n    Menubar.prototype.addAriaAttributes = function() {\r\n        this.menuRoot.attr('role', 'menubar');\r\n        this.rootMenus.attr('role', 'menuitem');\r\n        this.rootMenus.attr('tabindex', '0');\r\n        this.rootMenus.attr('aria-haspopup', 'true');\r\n        this.subMenus.attr('role', 'menu');\r\n        this.subMenus.attr('aria-hidden', 'true');\r\n        this.subMenuItems.attr('role', 'menuitem');\r\n        this.subMenuItems.attr('tabindex', '-1');\r\n\r\n        // For CSS styling and effects.\r\n        this.menuRoot.addClass('tool-lp-menu');\r\n        this.allItems.addClass('tool-lp-menu-item');\r\n        this.rootMenus.addClass('tool-lp-root-menu');\r\n        this.subMenus.addClass('tool-lp-sub-menu');\r\n        this.subMenuItems.addClass('dropdown-item');\r\n    };\r\n\r\n    return /** @alias module:tool_lp/menubar */ {\r\n        /**\r\n         * Create a menu bar object for every node matching the selector.\r\n         *\r\n         * The expected DOM structure is shown below.\r\n         * <ul> <- This is the target of the selector parameter.\r\n         *   <li> <- This is repeated for each top level menu.\r\n         *      Text <- This is the text for the top level menu.\r\n         *      <ul> <- This is a list of the entries in this top level menu.\r\n         *         <li> <- This is repeated for each menu entry.\r\n         *            <a href=\"someurl\">Choice 1</a> <- The anchor for the menu.\r\n         *         </li>\r\n         *      </ul>\r\n         *   </li>\r\n         * </ul>\r\n         *\r\n         * @method enhance\r\n         * @param {String} selector - The selector for the outer most menu node.\r\n         * @param {Function} handler - Javascript handler for when a menu item was chosen. If the\r\n         *                             handler returns true (or does not exist), the\r\n         *                             menu will look for an anchor with a link to follow.\r\n         *                             For example, if the menu entry has a \"data-action\" attribute\r\n         *                             and we want to call a javascript function when that entry is chosen,\r\n         *                             we could pass a list of handlers like this:\r\n         *                             { \"[data-action='add']\" : callAddFunction }\r\n         */\r\n        enhance: function(selector, handler) {\r\n            $(selector).each(function(index, element) {\r\n                var menuRoot = $(element);\r\n                // Don't enhance the same menu twice.\r\n                if (menuRoot.data(\"menubarEnhanced\") !== true) {\r\n                    (new Menubar(menuRoot, handler));\r\n                    menuRoot.data(\"menubarEnhanced\", true);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Handy function to close all open menus anywhere on the page.\r\n         * @method closeAll\r\n         */\r\n        closeAll: closeAllSubMenus\r\n    };\r\n});\r\n"],"names":["define","$","documentClickHandlerRegistered","menuActive","closeAllSubMenus","attr","Menubar","menuRoot","handlers","rootMenus","this","children","subMenus","subMenuItems","allItems","add","activeItem","isChildOpen","keys","tab","enter","esc","space","left","up","right","down","addAriaAttributes","addEventListeners","prototype","openSubMenu","menu","setOpenDirection","currentThis","document","click","mouseenter","addClass","mouseout","removeClass","e","handleClick","keydown","handleKeyDown","focus","handleFocus","blur","handleBlur","item","stopPropagation","parent","is","first","find","not","anchor","clickEvent","Event","target","eventHandled","each","selector","handler","length","callable","proxy","isDefaultPrevented","window","location","href","parentItems","parentsUntil","filter","pos","offset","isRTL","body","hasClass","heightmenuRoot","outerHeight","widthmenuRoot","outerWidth","subMenuContainer","css","menuRealWidth","menuRealHeight","margintop","marginright","marginleft","top","scrollTop","height","width","altKey","ctrlKey","keyCode","itemUL","moveToPrevious","moveToNext","moveUp","moveDown","menuItems","menuNum","menuIndex","index","newItem","childMenu","next","parentMenus","rootItem","last","prev","parentLI","startChr","newItemUL","match","curNdx","eq","html","charAt","toLowerCase","enhance","element","data","closeAll"],"mappings":"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"}