{"version":3,"file":"dragdrop-reorder.min.js","sources":["../src/dragdrop-reorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Drag and drop reorder via HTML5.\r\n *\r\n * @module     tool_lp/dragdrop-reorder\r\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['core/str', 'core/yui'], function(str, Y) {\r\n    // Private variables and functions.\r\n\r\n    /**\r\n     * Store the current instance of the core drag drop.\r\n     *\r\n     * @property {object} dragDropInstance M.tool_lp.dragdrop_reorder\r\n     */\r\n    var dragDropInstance = null;\r\n\r\n    /**\r\n     * Translate the drophit event from YUI\r\n     * into simple drag and drop nodes.\r\n     * @param {Y.Event} e The yui drop event.\r\n     */\r\n    var proxyCallback = function(e) {\r\n        var dragNode = e.drag.get('node');\r\n        var dropNode = e.drop.get('node');\r\n        this.callback(dragNode.getDOMNode(), dropNode.getDOMNode());\r\n    };\r\n\r\n    return /** @alias module:tool_lp/dragdrop-reorder */ {\r\n        // Public variables and functions.\r\n        /**\r\n         * Create an instance of M.tool_lp.dragdrop\r\n         *\r\n         * @param {String} group Unique string to identify this interaction.\r\n         * @param {String} dragHandleText Alt text for the drag handle.\r\n         * @param {String} sameNodeText Used in keyboard drag drop for the list of items target.\r\n         * @param {String} parentNodeText Used in keyboard drag drop for the parent target.\r\n         * @param {String} sameNodeClass class used to find the each of the list of items.\r\n         * @param {String} parentNodeClass class used to find the container for the list of items.\r\n         * @param {String} dragHandleInsertClass class used to find the location to insert the drag handles.\r\n         * @param {function} callback Drop hit handler.\r\n         */\r\n        dragdrop: function(group,\r\n                           dragHandleText,\r\n                           sameNodeText,\r\n                           parentNodeText,\r\n                           sameNodeClass,\r\n                           parentNodeClass,\r\n                           dragHandleInsertClass,\r\n                           callback) {\r\n            // Here we are wrapping YUI. This allows us to start transitioning, but\r\n            // wait for a good alternative without having inconsistent UIs.\r\n            str.get_strings([\r\n                {key: 'emptydragdropregion', component: 'moodle'},\r\n                {key: 'movecontent', component: 'moodle'},\r\n                {key: 'tocontent', component: 'moodle'},\r\n            ]).done(function() {\r\n                Y.use('moodle-tool_lp-dragdrop-reorder', function() {\r\n\r\n                    var context = {\r\n                        callback: callback\r\n                    };\r\n                    if (dragDropInstance) {\r\n                        dragDropInstance.destroy();\r\n                    }\r\n                    dragDropInstance = M.tool_lp.dragdrop_reorder({\r\n                        group: group,\r\n                        dragHandleText: dragHandleText,\r\n                        sameNodeText: sameNodeText,\r\n                        parentNodeText: parentNodeText,\r\n                        sameNodeClass: sameNodeClass,\r\n                        parentNodeClass: parentNodeClass,\r\n                        dragHandleInsertClass: dragHandleInsertClass,\r\n                        callback: Y.bind(proxyCallback, context)\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n    };\r\n});\r\n"],"names":["define","str","Y","dragDropInstance","proxyCallback","e","dragNode","drag","get","dropNode","drop","callback","getDOMNode","dragdrop","group","dragHandleText","sameNodeText","parentNodeText","sameNodeClass","parentNodeClass","dragHandleInsertClass","get_strings","key","component","done","use","context","destroy","M","tool_lp","dragdrop_reorder","bind"],"mappings":";;;;;;;AAsBAA,kCAAO,CAAC,WAAY,aAAa,SAASC,IAAKC,OAQvCC,iBAAmB,KAOnBC,cAAgB,SAASC,OACrBC,SAAWD,EAAEE,KAAKC,IAAI,QACtBC,SAAWJ,EAAEK,KAAKF,IAAI,aACrBG,SAASL,SAASM,aAAcH,SAASG,qBAGG,CAcjDC,SAAU,SAASC,MACAC,eACAC,aACAC,eACAC,cACAC,gBACAC,sBACAT,UAGfV,IAAIoB,YAAY,CACZ,CAACC,IAAK,sBAAuBC,UAAW,UACxC,CAACD,IAAK,cAAeC,UAAW,UAChC,CAACD,IAAK,YAAaC,UAAW,YAC/BC,MAAK,WACJtB,EAAEuB,IAAI,mCAAmC,eAEjCC,QAAU,CACVf,SAAUA,UAEVR,kBACAA,iBAAiBwB,UAErBxB,iBAAmByB,EAAEC,QAAQC,iBAAiB,CAC1ChB,MAAOA,MACPC,eAAgBA,eAChBC,aAAcA,aACdC,eAAgBA,eAChBC,cAAeA,cACfC,gBAAiBA,gBACjBC,sBAAuBA,sBACvBT,SAAUT,EAAE6B,KAAK3B,cAAesB"}