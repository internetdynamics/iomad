{"version":3,"file":"competencydialogue.min.js","sources":["../src/competencydialogue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Display Competency in dialogue box.\r\n *\r\n * @module     tool_lp/competencydialogue\r\n * @copyright  2015 Issam Taboubi <issam.taboubi@umontreal.ca>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery',\r\n        'core/notification',\r\n        'core/ajax',\r\n        'core/templates',\r\n        'core/str',\r\n        'tool_lp/dialogue'],\r\n       function($, notification, ajax, templates, str, Dialogue) {\r\n\r\n    /**\r\n     * The main instance we'll be working with.\r\n     *\r\n     * @type {Competencydialogue}\r\n     */\r\n    var instance;\r\n\r\n    /**\r\n     * Constructor for CompetencyDialogue.\r\n     */\r\n    var Competencydialogue = function() {\r\n      // Intentionally left empty.\r\n    };\r\n\r\n    /**\r\n     * Log the competency viewed event.\r\n     *\r\n     * @param  {Number} competencyId The competency ID.\r\n     * @method triggerCompetencyViewedEvent\r\n     */\r\n    Competencydialogue.prototype.triggerCompetencyViewedEvent = function(competencyId) {\r\n        ajax.call([{\r\n                methodname: 'core_competency_competency_viewed',\r\n                args: {id: competencyId}\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * Display a dialogue box by competencyid.\r\n     *\r\n     * @param {Number} competencyid The competency ID.\r\n     * @param {Object} options The options.\r\n     * @method showDialogue\r\n     */\r\n    Competencydialogue.prototype.showDialogue = function(competencyid, options) {\r\n\r\n        var datapromise = this.getCompetencyDataPromise(competencyid, options);\r\n        var localthis = this;\r\n        datapromise.done(function(data) {\r\n            // Inner Html in the dialogue content.\r\n            templates.render('tool_lp/competency_summary', data)\r\n                .done(function(html) {\r\n                    // Log competency viewed event.\r\n                    localthis.triggerCompetencyViewedEvent(competencyid);\r\n\r\n                    // Show the dialogue.\r\n                    new Dialogue(\r\n                        data.competency.shortname,\r\n                        html\r\n                    );\r\n                }).fail(notification.exception);\r\n        }).fail(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Display a dialogue box from data.\r\n     *\r\n     * @param {Object} dataSource data to be used to display dialogue box\r\n     * @method showDialogueFromData\r\n     */\r\n    Competencydialogue.prototype.showDialogueFromData = function(dataSource) {\r\n\r\n        var localthis = this;\r\n        // Inner Html in the dialogue content.\r\n        templates.render('tool_lp/competency_summary', dataSource)\r\n            .done(function(html) {\r\n                // Log competency viewed event.\r\n                localthis.triggerCompetencyViewedEvent(dataSource.id);\r\n\r\n                // Show the dialogue.\r\n                new Dialogue(\r\n                    dataSource.shortname,\r\n                    html,\r\n                    localthis.enhanceDialogue\r\n                );\r\n            }).fail(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * The action on the click event.\r\n     *\r\n     * @param {Event} e event click\r\n     * @method clickEventHandler\r\n     */\r\n    Competencydialogue.prototype.clickEventHandler = function(e) {\r\n\r\n        var compdialogue = e.data.compdialogue;\r\n        var currentTarget = $(e.currentTarget);\r\n        var competencyid = currentTarget.data('id');\r\n        var includerelated = !(currentTarget.data('excluderelated'));\r\n        var includecourses = currentTarget.data('includecourses');\r\n\r\n        // Show the dialogue box.\r\n        compdialogue.showDialogue(competencyid, {\r\n            includerelated: includerelated,\r\n            includecourses: includecourses\r\n        });\r\n        e.preventDefault();\r\n    };\r\n\r\n    /**\r\n     * Get a promise on data competency.\r\n     *\r\n     * @param {Number} competencyid\r\n     * @param {Object} options\r\n     * @return {Promise} return promise on data request\r\n     * @method getCompetencyDataPromise\r\n     */\r\n    Competencydialogue.prototype.getCompetencyDataPromise = function(competencyid, options) {\r\n\r\n        var requests = ajax.call([\r\n            {methodname: 'tool_lp_data_for_competency_summary',\r\n              args: {competencyid: competencyid,\r\n                      includerelated: options.includerelated || false,\r\n                      includecourses: options.includecourses || false\r\n                    }\r\n            }\r\n        ]);\r\n\r\n        return requests[0].then(function(context) {\r\n           return context;\r\n        }).fail(notification.exception);\r\n    };\r\n\r\n    return /** @alias module:tool_lp/competencydialogue */ {\r\n\r\n        /**\r\n         * Initialise the competency dialogue module.\r\n         *\r\n         * Only the first call matters.\r\n         */\r\n        init: function() {\r\n            if (typeof instance !== 'undefined') {\r\n                return;\r\n            }\r\n\r\n            // Instantiate the one instance and delegate event on the body.\r\n            instance = new Competencydialogue();\r\n            $('body').delegate('[data-action=\"competency-dialogue\"]', 'click', {compdialogue: instance},\r\n                instance.clickEventHandler.bind(instance));\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","notification","ajax","templates","str","Dialogue","instance","Competencydialogue","prototype","triggerCompetencyViewedEvent","competencyId","call","methodname","args","id","showDialogue","competencyid","options","datapromise","this","getCompetencyDataPromise","localthis","done","data","render","html","competency","shortname","fail","exception","showDialogueFromData","dataSource","enhanceDialogue","clickEventHandler","e","compdialogue","currentTarget","includerelated","includecourses","preventDefault","then","context","init","delegate","bind"],"mappings":";;;;;;;AAsBAA,oCAAO,CAAC,SACA,oBACA,YACA,iBACA,WACA,qBACD,SAASC,EAAGC,aAAcC,KAAMC,UAAWC,IAAKC,cAO/CC,SAKAC,mBAAqB,oBAUzBA,mBAAmBC,UAAUC,6BAA+B,SAASC,cACjER,KAAKS,KAAK,CAAC,CACHC,WAAY,oCACZC,KAAM,CAACC,GAAIJ,kBAWvBH,mBAAmBC,UAAUO,aAAe,SAASC,aAAcC,aAE3DC,YAAcC,KAAKC,yBAAyBJ,aAAcC,SAC1DI,UAAYF,KAChBD,YAAYI,MAAK,SAASC,MAEtBpB,UAAUqB,OAAO,6BAA8BD,MAC1CD,MAAK,SAASG,MAEXJ,UAAUZ,6BAA6BO,kBAGnCX,SACAkB,KAAKG,WAAWC,UAChBF,SAELG,KAAK3B,aAAa4B,cAC1BD,KAAK3B,aAAa4B,YASzBtB,mBAAmBC,UAAUsB,qBAAuB,SAASC,gBAErDV,UAAYF,KAEhBhB,UAAUqB,OAAO,6BAA8BO,YAC1CT,MAAK,SAASG,MAEXJ,UAAUZ,6BAA6BsB,WAAWjB,QAG9CT,SACA0B,WAAWJ,UACXF,KACAJ,UAAUW,oBAEfJ,KAAK3B,aAAa4B,YAS7BtB,mBAAmBC,UAAUyB,kBAAoB,SAASC,OAElDC,aAAeD,EAAEX,KAAKY,aACtBC,cAAgBpC,EAAEkC,EAAEE,eACpBpB,aAAeoB,cAAcb,KAAK,MAClCc,gBAAmBD,cAAcb,KAAK,kBACtCe,eAAiBF,cAAcb,KAAK,kBAGxCY,aAAapB,aAAaC,aAAc,CACpCqB,eAAgBA,eAChBC,eAAgBA,iBAEpBJ,EAAEK,kBAWNhC,mBAAmBC,UAAUY,yBAA2B,SAASJ,aAAcC,gBAE5Df,KAAKS,KAAK,CACrB,CAACC,WAAY,sCACXC,KAAM,CAACG,aAAcA,aACbqB,eAAgBpB,QAAQoB,iBAAkB,EAC1CC,eAAgBrB,QAAQqB,iBAAkB,MAKxC,GAAGE,MAAK,SAASC,gBACvBA,WACPb,KAAK3B,aAAa4B,YAG8B,CAOnDa,KAAM,gBACsB,IAAbpC,WAKXA,SAAW,IAAIC,mBACfP,EAAE,QAAQ2C,SAAS,sCAAuC,QAAS,CAACR,aAAc7B,UAC9EA,SAAS2B,kBAAkBW,KAAKtC"}