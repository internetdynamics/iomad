{"version":3,"file":"competencyruleconfig.min.js","sources":["../src/competencyruleconfig.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Competency rule config.\r\n *\r\n * @module     tool_lp/competencyruleconfig\r\n * @copyright  2015 Frédéric Massart - FMCorz.net\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery',\r\n        'core/notification',\r\n        'core/templates',\r\n        'tool_lp/dialogue',\r\n        'tool_lp/competency_outcomes',\r\n        'core/str'],\r\n        function($, Notification, Templates, Dialogue, Outcomes, Str) {\r\n\r\n    /**\r\n     * Competency rule class.\r\n     *\r\n     * When implementing this you should attach a listener to the event 'save'\r\n     * on the instance. E.g.\r\n     *\r\n     * var config = new RuleConfig(tree, modules);\r\n     * config.on('save', function(e, config) { ... });\r\n     *\r\n     * @param {competencytree} tree The competency tree.\r\n     * @param {Array} rulesModules The modules containing the rules: [{ typeName: { amd: amdModule, name: ruleName }}].\r\n     */\r\n    var RuleConfig = function(tree, rulesModules) {\r\n        this._eventNode = $('<div></div>');\r\n        this._tree = tree;\r\n        this._rulesModules = rulesModules;\r\n        this._setUp();\r\n    };\r\n\r\n    /** @property {Object} The current competency. */\r\n    RuleConfig.prototype._competency = null;\r\n    /** @property {Node} The node we attach the events to. */\r\n    RuleConfig.prototype._eventNode = null;\r\n    /** @property {Array} Outcomes options. */\r\n    RuleConfig.prototype._outcomesOption = null;\r\n    /** @property {Dialogue} The dialogue. */\r\n    RuleConfig.prototype._popup = null;\r\n    /** @property {Promise} Resolved when the module is ready. */\r\n    RuleConfig.prototype._ready = null;\r\n    /** @property {Array} The rules. */\r\n    RuleConfig.prototype._rules = null;\r\n    /** @property {Array} The rules modules. */\r\n    RuleConfig.prototype._rulesModules = null;\r\n    /** @property {competencytree} The competency tree. */\r\n    RuleConfig.prototype._tree = null;\r\n\r\n    /**\r\n     * After change.\r\n     *\r\n     * Triggered when a change occured.\r\n     *\r\n     * @method _afterChange\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._afterChange = function() {\r\n        if (!this._isValid()) {\r\n            this._find('[data-action=\"save\"]').prop('disabled', true);\r\n        } else {\r\n            this._find('[data-action=\"save\"]').prop('disabled', false);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * After change in rule's config.\r\n     *\r\n     * Triggered when a change occured in a specific rule config.\r\n     *\r\n     * @method _afterRuleConfigChange\r\n     * @protected\r\n     * @param {Event} e\r\n     * @param {Rule} rule\r\n     */\r\n    RuleConfig.prototype._afterRuleConfigChange = function(e, rule) {\r\n        if (rule != this._getRule()) {\r\n            // This rule is not the current one any more, we can ignore.\r\n            return;\r\n        }\r\n        this._afterChange();\r\n    };\r\n\r\n    /**\r\n     * After render hook.\r\n     *\r\n     * @method _afterRender\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._afterRender = function() {\r\n        var self = this;\r\n\r\n        self._find('[name=\"outcome\"]').on('change', function() {\r\n            self._switchedOutcome();\r\n        }).trigger('change');\r\n\r\n        self._find('[name=\"rule\"]').on('change', function() {\r\n            self._switchedRule();\r\n        }).trigger('change');\r\n\r\n        self._find('[data-action=\"save\"]').on('click', function() {\r\n            self._trigger('save', self._getConfig());\r\n            self.close();\r\n        });\r\n\r\n        self._find('[data-action=\"cancel\"]').on('click', function() {\r\n            self.close();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Whether the current competency can be configured.\r\n     *\r\n     * @return {Boolean}\r\n     * @method canBeConfigured\r\n     */\r\n    RuleConfig.prototype.canBeConfigured = function() {\r\n        var can = false;\r\n        $.each(this._rules, function(index, rule) {\r\n            if (rule.canConfig()) {\r\n                can = true;\r\n                return;\r\n            }\r\n        });\r\n        return can;\r\n    };\r\n\r\n    /**\r\n     * Close the dialogue.\r\n     *\r\n     * @method close\r\n     */\r\n    RuleConfig.prototype.close = function() {\r\n        this._popup.close();\r\n        this._popup = null;\r\n    };\r\n\r\n    /**\r\n     * Opens the picker.\r\n     *\r\n     * @method display\r\n     * @returns {Promise}\r\n     */\r\n    RuleConfig.prototype.display = function() {\r\n        var self = this;\r\n        if (!self._competency) {\r\n            return false;\r\n        }\r\n        return $.when(Str.get_string('competencyrule', 'tool_lp'), self._render())\r\n        .then(function(title, render) {\r\n            self._popup = new Dialogue(\r\n                title,\r\n                render[0],\r\n                self._afterRender.bind(self),\r\n                null,\r\n                false,\r\n                '515px'\r\n            );\r\n            return;\r\n        }).fail(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Find a node in the dialogue.\r\n     *\r\n     * @param {String} selector\r\n     * @return {JQuery}\r\n     * @method _find\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._find = function(selector) {\r\n        return $(this._popup.getContent()).find(selector);\r\n    };\r\n\r\n    /**\r\n     * Get the applicable outcome options.\r\n     *\r\n     * @return {Array}\r\n     * @method _getApplicableOutcomesOptions\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._getApplicableOutcomesOptions = function() {\r\n        var self = this,\r\n            options = [];\r\n\r\n        $.each(self._outcomesOption, function(index, outcome) {\r\n            options.push({\r\n                code: outcome.code,\r\n                name: outcome.name,\r\n                selected: (outcome.code == self._competency.ruleoutcome) ? true : false,\r\n            });\r\n        });\r\n\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * Get the applicable rules options.\r\n     *\r\n     * @return {Array}\r\n     * @method _getApplicableRulesOptions\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._getApplicableRulesOptions = function() {\r\n        var self = this,\r\n            options = [];\r\n\r\n        $.each(self._rules, function(index, rule) {\r\n            if (!rule.canConfig()) {\r\n                return;\r\n            }\r\n            options.push({\r\n                name: self._getRuleName(rule.getType()),\r\n                type: rule.getType(),\r\n                selected: (rule.getType() == self._competency.ruletype) ? true : false,\r\n            });\r\n        });\r\n\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * Get the full config for the competency.\r\n     *\r\n     * @return {Object} Contains rule, ruleoutcome and ruleconfig.\r\n     * @method _getConfig\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._getConfig = function() {\r\n        var rule = this._getRule();\r\n        return {\r\n            ruletype: rule ? rule.getType() : null,\r\n            ruleconfig: rule ? rule.getConfig() : null,\r\n            ruleoutcome: this._getOutcome()\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Get the selected outcome code.\r\n     *\r\n     * @return {String}\r\n     * @method _getOutcome\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._getOutcome = function() {\r\n        return this._find('[name=\"outcome\"]').val();\r\n    };\r\n\r\n    /**\r\n     * Get the selected rule.\r\n     *\r\n     * @return {null|Rule}\r\n     * @method _getRule\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._getRule = function() {\r\n        var result,\r\n            type = this._find('[name=\"rule\"]').val();\r\n\r\n        $.each(this._rules, function(index, rule) {\r\n            if (rule.getType() == type) {\r\n                result = rule;\r\n                return;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Return the name of a rule.\r\n     *\r\n     * @param  {String} type The type of a rule.\r\n     * @return {String}\r\n     * @method _getRuleName\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._getRuleName = function(type) {\r\n        var self = this,\r\n            name;\r\n        $.each(self._rulesModules, function(index, modInfo) {\r\n            if (modInfo.type == type) {\r\n                name = modInfo.name;\r\n                return;\r\n            }\r\n        });\r\n        return name;\r\n    };\r\n\r\n    /**\r\n     * Initialise the outcomes.\r\n     *\r\n     * @return {Promise}\r\n     * @method _initOutcomes\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._initOutcomes = function() {\r\n        var self = this;\r\n        return Outcomes.getAll().then(function(outcomes) {\r\n            self._outcomesOption = outcomes;\r\n            return;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Initialise the rules.\r\n     *\r\n     * @return {Promise}\r\n     * @method _initRules\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._initRules = function() {\r\n        var self = this,\r\n            promises = [];\r\n        $.each(self._rules, function(index, rule) {\r\n            var promise = rule.init().then(function() {\r\n                rule.setTargetCompetency(self._competency);\r\n                rule.on('change', self._afterRuleConfigChange.bind(self));\r\n                return;\r\n            }, function() {\r\n                // Upon failure remove the rule, and resolve the promise.\r\n                self._rules.splice(index, 1);\r\n                return $.when();\r\n            });\r\n            promises.push(promise);\r\n        });\r\n\r\n        return $.when.apply($.when, promises);\r\n    };\r\n\r\n    /**\r\n     * Whether or not the current config is valid.\r\n     *\r\n     * @return {Boolean}\r\n     * @method _isValid\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._isValid = function() {\r\n        var outcome = this._getOutcome(),\r\n            rule = this._getRule();\r\n\r\n        if (outcome == Outcomes.NONE) {\r\n            return true;\r\n        } else if (!rule) {\r\n            return false;\r\n        }\r\n\r\n        return rule.isValid();\r\n    };\r\n\r\n    /**\r\n     * Register an event listener.\r\n     *\r\n     * @param {String} type The event type.\r\n     * @param {Function} handler The event listener.\r\n     * @method on\r\n     */\r\n    RuleConfig.prototype.on = function(type, handler) {\r\n        this._eventNode.on(type, handler);\r\n    };\r\n\r\n    /**\r\n     * Hook to executed before render.\r\n     *\r\n     * @method _preRender\r\n     * @protected\r\n     * @return {Promise}\r\n     */\r\n    RuleConfig.prototype._preRender = function() {\r\n        // We need to have all the information about the rule plugins first.\r\n        return this.ready();\r\n    };\r\n\r\n    /**\r\n     * Returns a promise that is resolved when the module is ready.\r\n     *\r\n     * @return {Promise}\r\n     * @method ready\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype.ready = function() {\r\n        return this._ready.promise();\r\n    };\r\n\r\n    /**\r\n     * Render the dialogue.\r\n     *\r\n     * @method _render\r\n     * @protected\r\n     * @return {Promise}\r\n     */\r\n    RuleConfig.prototype._render = function() {\r\n        var self = this;\r\n        return this._preRender().then(function() {\r\n            var config;\r\n\r\n            if (!self.canBeConfigured()) {\r\n                config = false;\r\n            } else {\r\n                config = {};\r\n                config.outcomes = self._getApplicableOutcomesOptions();\r\n                config.rules = self._getApplicableRulesOptions();\r\n            }\r\n\r\n            var context = {\r\n                competencyshortname: self._competency.shortname,\r\n                config: config\r\n            };\r\n\r\n            return Templates.render('tool_lp/competency_rule_config', context);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Set the target competency.\r\n     *\r\n     * @param {Number} competencyId The target competency Id.\r\n     * @method setTargetCompetencyId\r\n     */\r\n    RuleConfig.prototype.setTargetCompetencyId = function(competencyId) {\r\n        var self = this;\r\n        self._competency = self._tree.getCompetency(competencyId);\r\n        $.each(self._rules, function(index, rule) {\r\n            rule.setTargetCompetency(self._competency);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Set up the instance.\r\n     *\r\n     * @method _setUp\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._setUp = function() {\r\n        var self = this,\r\n            promises = [],\r\n            modules = [];\r\n\r\n        self._ready = $.Deferred();\r\n        self._rules = [];\r\n\r\n        $.each(self._rulesModules, function(index, rule) {\r\n            modules.push(rule.amd);\r\n        });\r\n\r\n        // Load all the modules.\r\n        require(modules, function() {\r\n            $.each(arguments, function(index, Module) {\r\n                // Instantiate the rule and listen to it.\r\n                var rule = new Module(self._tree);\r\n                self._rules.push(rule);\r\n            });\r\n\r\n            // Load all the option values.\r\n            promises.push(self._initRules());\r\n            promises.push(self._initOutcomes());\r\n\r\n            // Ready when everything is done.\r\n            $.when.apply($.when, promises).always(function() {\r\n                self._ready.resolve();\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Called when the user switches outcome.\r\n     *\r\n     * @method _switchedOutcome\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._switchedOutcome = function() {\r\n        var self = this,\r\n            type = self._getOutcome();\r\n\r\n        if (type == Outcomes.NONE) {\r\n            // Reset to defaults.\r\n            self._find('[data-region=\"rule-type\"]').hide()\r\n                .find('[name=\"rule\"]').val(-1);\r\n            self._find('[data-region=\"rule-config\"]').empty().hide();\r\n            self._afterChange();\r\n            return;\r\n        }\r\n\r\n        self._find('[data-region=\"rule-type\"]').show();\r\n        self._find('[data-region=\"rule-config\"]').show();\r\n        self._afterChange();\r\n    };\r\n\r\n    /**\r\n     * Called when the user switches rule.\r\n     *\r\n     * @method _switchedRule\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._switchedRule = function() {\r\n        var self = this,\r\n            container = self._find('[data-region=\"rule-config\"]'),\r\n            rule = self._getRule();\r\n\r\n        if (!rule) {\r\n            container.empty().hide();\r\n            self._afterChange();\r\n            return;\r\n        }\r\n        rule.injectTemplate(container).then(function() {\r\n            container.show();\r\n            return;\r\n        }).always(function() {\r\n            self._afterChange();\r\n        }).catch(function() {\r\n            container.empty().hide();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Trigger an event.\r\n     *\r\n     * @param {String} type The type of event.\r\n     * @param {Object} data The data to pass to the listeners.\r\n     * @method _trigger\r\n     * @protected\r\n     */\r\n    RuleConfig.prototype._trigger = function(type, data) {\r\n        this._eventNode.trigger(type, [data]);\r\n    };\r\n\r\n    return /** @alias module:tool_lp/competencyruleconfig */ RuleConfig;\r\n\r\n});\r\n"],"names":["define","$","Notification","Templates","Dialogue","Outcomes","Str","RuleConfig","tree","rulesModules","_eventNode","_tree","_rulesModules","_setUp","prototype","_competency","_outcomesOption","_popup","_ready","_rules","_afterChange","this","_isValid","_find","prop","_afterRuleConfigChange","e","rule","_getRule","_afterRender","self","on","_switchedOutcome","trigger","_switchedRule","_trigger","_getConfig","close","canBeConfigured","can","each","index","canConfig","display","when","get_string","_render","then","title","render","bind","fail","exception","selector","getContent","find","_getApplicableOutcomesOptions","options","outcome","push","code","name","selected","ruleoutcome","_getApplicableRulesOptions","_getRuleName","getType","type","ruletype","ruleconfig","getConfig","_getOutcome","val","result","modInfo","_initOutcomes","getAll","outcomes","_initRules","promises","promise","init","setTargetCompetency","splice","apply","NONE","isValid","handler","_preRender","ready","config","rules","context","competencyshortname","shortname","setTargetCompetencyId","competencyId","getCompetency","modules","Deferred","amd","require","arguments","Module","always","resolve","hide","empty","show","container","injectTemplate","catch","data"],"mappings":"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"}