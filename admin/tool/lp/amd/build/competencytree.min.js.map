{"version":3,"file":"competencytree.min.js","sources":["../src/competencytree.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Handle selection changes on the competency tree.\r\n *\r\n * @module     tool_lp/competencytree\r\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['core/ajax', 'core/notification', 'core/templates', 'tool_lp/tree', 'tool_lp/competency_outcomes', 'jquery'],\r\n       function(ajax, notification, templates, Ariatree, CompOutcomes, $) {\r\n\r\n    // Private variables and functions.\r\n    /** @var {Object[]} competencies - Cached list of competencies */\r\n    var competencies = {};\r\n\r\n    /** @var {Number} competencyFrameworkId - The current framework id */\r\n    var competencyFrameworkId = 0;\r\n\r\n    /** @var {String} competencyFrameworkShortName - The current framework short name */\r\n    var competencyFrameworkShortName = '';\r\n\r\n    /** @var {String} treeSelector - The selector for the root of the tree. */\r\n    var treeSelector = '';\r\n\r\n    /** @var {String} currentNodeId - The data-id of the current node in the tree. */\r\n    var currentNodeId = '';\r\n\r\n     /** @var {Boolean} competencyFramworkCanManage - Can manage the competencies framework */\r\n    var competencyFramworkCanManage = false;\r\n\r\n    /**\r\n     * Build a tree from the flat list of competencies.\r\n     * @param {Object} parent The parent competency.\r\n     * @param {Array} all The list of all competencies.\r\n     */\r\n    var addChildren = function(parent, all) {\r\n        var i = 0;\r\n        var current = false;\r\n        parent.haschildren = false;\r\n        parent.children = [];\r\n        for (i = 0; i < all.length; i++) {\r\n            current = all[i];\r\n            if (current.parentid == parent.id) {\r\n                parent.haschildren = true;\r\n                parent.children.push(current);\r\n                addChildren(current, all);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Load the list of competencies via ajax. Competencies are filtered by the searchtext.\r\n     * @param {String} searchtext The text to filter on.\r\n     * @return {promise}\r\n     */\r\n    var loadCompetencies = function(searchtext) {\r\n        var deferred = $.Deferred();\r\n\r\n        templates.render('tool_lp/loading', {}).done(function(loadinghtml, loadingjs) {\r\n            templates.replaceNodeContents($(treeSelector), loadinghtml, loadingjs);\r\n\r\n            var promises = ajax.call([{\r\n                methodname: 'core_competency_search_competencies',\r\n                args: {\r\n                    searchtext: searchtext,\r\n                    competencyframeworkid: competencyFrameworkId\r\n                }\r\n            }]);\r\n            promises[0].done(function(result) {\r\n                competencies = {};\r\n                var i = 0;\r\n                for (i = 0; i < result.length; i++) {\r\n                    competencies[result[i].id] = result[i];\r\n                }\r\n\r\n                var children = [];\r\n                var competency = false;\r\n                for (i = 0; i < result.length; i++) {\r\n                    competency = result[i];\r\n                    if (parseInt(competency.parentid, 10) === 0) {\r\n                        children.push(competency);\r\n                        addChildren(competency, result);\r\n                    }\r\n                }\r\n                var context = {\r\n                    shortname: competencyFrameworkShortName,\r\n                    canmanage: competencyFramworkCanManage,\r\n                    competencies: children\r\n                };\r\n                templates.render('tool_lp/competencies_tree_root', context).done(function(html, js) {\r\n                    templates.replaceNodeContents($(treeSelector), $(html).html(), js);\r\n                    var tree = new Ariatree(treeSelector, false);\r\n\r\n                    if (currentNodeId) {\r\n                        var node = $(treeSelector).find('[data-id=' + currentNodeId + ']');\r\n                        if (node.length) {\r\n                            tree.selectItem(node);\r\n                            tree.updateFocus(node);\r\n                        }\r\n                    }\r\n                    deferred.resolve(competencies);\r\n                }).fail(deferred.reject);\r\n            }).fail(deferred.reject);\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n\r\n    /**\r\n     * Whenever the current item in the tree is changed - remember the \"id\".\r\n     * @param {Event} evt\r\n     * @param {Object} params The parameters for the event (This is the selected node).\r\n     */\r\n    var rememberCurrent = function(evt, params) {\r\n        var node = params.selected;\r\n        currentNodeId = node.attr('data-id');\r\n    };\r\n\r\n    return /** @alias module:tool_lp/competencytree */ {\r\n        // Public variables and functions.\r\n        /**\r\n         * Initialise the tree.\r\n         *\r\n         * @param {Number} id The competency framework id.\r\n         * @param {String} shortname The framework shortname\r\n         * @param {String} search The current search string\r\n         * @param {String} selector The selector for the tree div\r\n         * @param {Boolean} canmanage Can manage the competencies\r\n         * @param {Number} competencyid The id of the competency to show first\r\n         */\r\n        init: function(id, shortname, search, selector, canmanage, competencyid) {\r\n            competencyFrameworkId = id;\r\n            competencyFrameworkShortName = shortname;\r\n            competencyFramworkCanManage = canmanage;\r\n            treeSelector = selector;\r\n            loadCompetencies(search).fail(notification.exception);\r\n            if (competencyid > 0) {\r\n                currentNodeId = competencyid;\r\n            }\r\n\r\n            this.on('selectionchanged', rememberCurrent);\r\n         },\r\n\r\n        /**\r\n         * Add an event handler for custom events emitted by the tree.\r\n         *\r\n         * @param {String} eventname The name of the event - only \"selectionchanged\" for now\r\n         * @param {Function} handler The handler for the event.\r\n         */\r\n        on: function(eventname, handler) {\r\n            // We can't use the tree on function directly\r\n            // because the tree gets rebuilt whenever the search string changes,\r\n            // instead we attach the listner to the root node of the tree which never\r\n            // gets destroyed (same as \"on()\" code in the tree.js).\r\n            $(treeSelector).on(eventname, handler);\r\n        },\r\n\r\n        /**\r\n         * Get the children of a competency.\r\n         *\r\n         * @param  {Number} id The competency ID.\r\n         * @return {Array}\r\n         * @method getChildren\r\n         */\r\n        getChildren: function(id) {\r\n            var children = [];\r\n            $.each(competencies, function(index, competency) {\r\n                if (competency.parentid == id) {\r\n                    children.push(competency);\r\n                }\r\n            });\r\n            return children;\r\n        },\r\n\r\n        /**\r\n         * Get the competency framework id this model was initiliased with.\r\n         *\r\n         * @return {Number}\r\n         */\r\n        getCompetencyFrameworkId: function() {\r\n            return competencyFrameworkId;\r\n        },\r\n\r\n        /**\r\n         * Get a competency by id\r\n         *\r\n         * @param {Number} id The competency id\r\n         * @return {Object}\r\n         */\r\n        getCompetency: function(id) {\r\n            return competencies[id];\r\n        },\r\n\r\n        /**\r\n         * Get the competency level.\r\n         *\r\n         * @param  {Number} id The competency ID.\r\n         * @return {Number}\r\n         */\r\n        getCompetencyLevel: function(id) {\r\n            var competency = this.getCompetency(id),\r\n                level = competency.path.replace(/^\\/|\\/$/g, '').split('/').length;\r\n            return level;\r\n        },\r\n\r\n        /**\r\n         * Whether a competency has children.\r\n         *\r\n         * @param  {Number} id The competency ID.\r\n         * @return {Boolean}\r\n         * @method hasChildren\r\n         */\r\n        hasChildren: function(id) {\r\n            return this.getChildren(id).length > 0;\r\n        },\r\n\r\n        /**\r\n         * Does the competency have a rule?\r\n         *\r\n         * @param  {Number}  id The competency ID.\r\n         * @return {Boolean}\r\n         */\r\n        hasRule: function(id) {\r\n            var comp = this.getCompetency(id);\r\n            if (comp) {\r\n                return comp.ruleoutcome != CompOutcomes.OUTCOME_NONE\r\n                    && comp.ruletype;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Reload all the page competencies framework competencies.\r\n         * @method reloadCompetencies\r\n         * @return {Promise}\r\n         */\r\n        reloadCompetencies: function() {\r\n            return loadCompetencies('').fail(notification.exception);\r\n        },\r\n\r\n        /**\r\n         * Get all competencies for this framework.\r\n         *\r\n         * @return {Object[]}\r\n         */\r\n        listCompetencies: function() {\r\n            return competencies;\r\n        },\r\n\r\n     };\r\n });\r\n"],"names":["define","ajax","notification","templates","Ariatree","CompOutcomes","$","competencies","competencyFrameworkId","competencyFrameworkShortName","treeSelector","currentNodeId","competencyFramworkCanManage","addChildren","parent","all","i","current","haschildren","children","length","parentid","id","push","loadCompetencies","searchtext","deferred","Deferred","render","done","loadinghtml","loadingjs","replaceNodeContents","call","methodname","args","competencyframeworkid","result","competency","parseInt","context","shortname","canmanage","html","js","tree","node","find","selectItem","updateFocus","resolve","fail","reject","promise","rememberCurrent","evt","params","selected","attr","init","search","selector","competencyid","exception","on","eventname","handler","getChildren","each","index","getCompetencyFrameworkId","getCompetency","getCompetencyLevel","this","path","replace","split","hasChildren","hasRule","comp","ruleoutcome","OUTCOME_NONE","ruletype","reloadCompetencies","listCompetencies"],"mappings":"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"}