{"version":3,"file":"search.min.js","sources":["../src/search.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Add search filtering of available language packs\r\n *\r\n * @module      tool_langimport/search\r\n * @copyright   2021 Paul Holden <paulh@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Pending from 'core/pending';\r\nimport {debounce} from 'core/utils';\r\n\r\nconst SELECTORS = {\r\n    AVAILABLE_LANG_SELECT: 'select',\r\n    AVAILABLE_LANG_SEARCH: '[data-action=\"search\"]',\r\n};\r\n\r\nconst DEBOUNCE_TIMER = 250;\r\n\r\n/**\r\n * Initialize module\r\n *\r\n * @param {Element} form\r\n */\r\nexport const init = form => {\r\n    const availableLangsElement = form.querySelector(SELECTORS.AVAILABLE_LANG_SELECT);\r\n\r\n    const availableLangsFilter = (event) => {\r\n        const pendingPromise = new Pending('tool_langimport/search:filter');\r\n\r\n        // Remove existing options.\r\n        availableLangsElement.querySelectorAll('option').forEach((option) => {\r\n            option.remove();\r\n        });\r\n\r\n        // Filter for matching languages.\r\n        const searchTerm = event.target.value.toLowerCase();\r\n        const availableLanguages = JSON.parse(availableLangsElement.dataset.availableLanguages);\r\n        const filteredLanguages = Object.keys(availableLanguages).reduce((matches, langcode) => {\r\n            if (availableLanguages[langcode].toLowerCase().includes(searchTerm)) {\r\n                matches[langcode] = availableLanguages[langcode];\r\n            }\r\n            return matches;\r\n        }, []);\r\n\r\n        // Re-create filtered options.\r\n        Object.entries(filteredLanguages).forEach(([langcode, langname]) => {\r\n            const option = document.createElement('option');\r\n            option.value = langcode;\r\n            option.innerText = langname;\r\n            availableLangsElement.append(option);\r\n        });\r\n\r\n        pendingPromise.resolve();\r\n    };\r\n\r\n    // Cache initial available language options.\r\n    const availableLanguages = {};\r\n    availableLangsElement.querySelectorAll('option').forEach((option) => {\r\n        availableLanguages[option.value] = option.text;\r\n    });\r\n    availableLangsElement.dataset.availableLanguages = JSON.stringify(availableLanguages);\r\n\r\n    // Register event listeners on the search element.\r\n    const availableLangsSearch = form.querySelector(SELECTORS.AVAILABLE_LANG_SEARCH);\r\n    availableLangsSearch.addEventListener('keydown', (event) => {\r\n        if (event.key === 'Enter') {\r\n            event.preventDefault();\r\n        }\r\n    });\r\n\r\n    // Debounce the event listener to allow the user to finish typing.\r\n    const availableLangsSearchDebounce = debounce(availableLangsFilter, DEBOUNCE_TIMER);\r\n    availableLangsSearch.addEventListener('keyup', (event) => {\r\n        const pendingPromise = new Pending('tool_langimport/search:keyup');\r\n\r\n        availableLangsSearchDebounce(event);\r\n        setTimeout(() => {\r\n            pendingPromise.resolve();\r\n        }, DEBOUNCE_TIMER);\r\n    });\r\n};\r\n"],"names":["SELECTORS","form","availableLangsElement","querySelector","availableLanguages","querySelectorAll","forEach","option","value","text","dataset","JSON","stringify","availableLangsSearch","addEventListener","event","key","preventDefault","availableLangsSearchDebounce","pendingPromise","Pending","remove","searchTerm","target","toLowerCase","parse","filteredLanguages","Object","keys","reduce","matches","langcode","includes","entries","_ref","langname","document","createElement","innerText","append","resolve","setTimeout"],"mappings":";;;;;;;kJA0BMA,gCACqB,SADrBA,gCAEqB,uCAUPC,aACVC,sBAAwBD,KAAKE,cAAcH,iCAgC3CI,mBAAqB,GAC3BF,sBAAsBG,iBAAiB,UAAUC,SAASC,SACtDH,mBAAmBG,OAAOC,OAASD,OAAOE,QAE9CP,sBAAsBQ,QAAQN,mBAAqBO,KAAKC,UAAUR,0BAG5DS,qBAAuBZ,KAAKE,cAAcH,iCAChDa,qBAAqBC,iBAAiB,WAAYC,QAC5B,UAAdA,MAAMC,KACND,MAAME,0BAKRC,8BAA+B,oBA7CPH,cACpBI,eAAiB,IAAIC,iBAAQ,iCAGnClB,sBAAsBG,iBAAiB,UAAUC,SAASC,SACtDA,OAAOc,kBAILC,WAAaP,MAAMQ,OAAOf,MAAMgB,cAChCpB,mBAAqBO,KAAKc,MAAMvB,sBAAsBQ,QAAQN,oBAC9DsB,kBAAoBC,OAAOC,KAAKxB,oBAAoByB,QAAO,CAACC,QAASC,YACnE3B,mBAAmB2B,UAAUP,cAAcQ,SAASV,cACpDQ,QAAQC,UAAY3B,mBAAmB2B,WAEpCD,UACR,IAGHH,OAAOM,QAAQP,mBAAmBpB,SAAQ4B,WAAEH,SAAUI,qBAC5C5B,OAAS6B,SAASC,cAAc,UACtC9B,OAAOC,MAAQuB,SACfxB,OAAO+B,UAAYH,SACnBjC,sBAAsBqC,OAAOhC,WAGjCY,eAAeqB,YApCA,KAwDnB3B,qBAAqBC,iBAAiB,SAAUC,cACtCI,eAAiB,IAAIC,iBAAQ,gCAEnCF,6BAA6BH,OAC7B0B,YAAW,KACPtB,eAAeqB,YA7DJ"}