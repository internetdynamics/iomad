{"version":3,"file":"events.min.js","sources":["../src/events.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript events for the `tool_usertours` subsystem.\r\n *\r\n * @module tool_usertours/events\r\n * @copyright 2021 Andrew Lyons <andrew@nicols.co.uk>\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n *\r\n * @example <caption>Example of listening to a step rendering event and cancelling it.</caption>\r\n * import {eventTypes as userTourEvents} from 'tool_usertours/events';\r\n *\r\n * document.addEventListener(userTourEvents.stepRender, e => {\r\n *     console.log(e.detail.tour); // The Tour instance\r\n *     e.preventDefault();\r\n * });\r\n */\r\n\r\n/**\r\n * Events for the component.\r\n *\r\n * @constant\r\n * @property {object} eventTypes\r\n * @property {String} eventTypes.stepRender See {@link event:tool_usertours/stepRender}\r\n * @property {String} eventTypes.stepRendered See {@link event:tool_usertours/stepRendered}\r\n * @property {String} eventTypes.tourStart See {@link event:tool_usertours/tourStart}\r\n * @property {String} eventTypes.tourStarted See {@link event:tool_usertours/tourStarted}\r\n * @property {String} eventTypes.tourEnd See {@link event:tool_usertours/tourEnd}\r\n * @property {String} eventTypes.tourEnded See {@link event:tool_usertours/tourEnded}\r\n * @property {String} eventTypes.stepHide See {@link event:tool_usertours/stepHide}\r\n * @property {String} eventTypes.stepHidden See {@link event:tool_usertours/stepHidden}\r\n */\r\nexport const eventTypes = {\r\n    /**\r\n     * An event triggered before a user tour step is rendered.\r\n     *\r\n     * This event is cancellable.\r\n     *\r\n     * @event tool_usertours/stepRender\r\n     * @type {CustomEvent}\r\n     * @property {object} detail\r\n     * @property {tool_usertours/tour} detail.tour\r\n     * @property {object} detail.stepConfig\r\n     */\r\n    stepRender: 'tool_usertours/stepRender',\r\n\r\n    /**\r\n     * An event triggered after a user tour step has been rendered.\r\n     *\r\n     * @event tool_usertours/stepRendered\r\n     * @type {CustomEvent}\r\n     * @property {object} detail\r\n     * @property {tool_usertours/tour} detail.tour\r\n     * @property {object} detail.stepConfig\r\n     */\r\n    stepRendered: 'tool_usertours/stepRendered',\r\n\r\n    /**\r\n     * An event triggered before a user tour starts.\r\n     *\r\n     * This event is cancellable.\r\n     *\r\n     * @event tool_usertours/tourStart\r\n     * @type {CustomEvent}\r\n     * @property {object} detail\r\n     * @property {tool_usertours/tour} detail.tour\r\n     * @property {Number} detail.startAt\r\n     */\r\n    tourStart: 'tool_usertours/tourStart',\r\n\r\n    /**\r\n     * An event triggered after a user tour has started.\r\n     *\r\n     * @event tool_usertours/tourStarted\r\n     * @property {object} detail\r\n     * @property {tool_usertours/tour} detail.tour\r\n     * @type {CustomEvent}\r\n     */\r\n    tourStarted: 'tool_usertours/tourStarted',\r\n\r\n    /**\r\n     * An event triggered before a tour ends.\r\n     *\r\n     * This event is cancellable.\r\n     *\r\n     * @event tool_usertours/tourEnd\r\n     * @property {object} detail\r\n     * @property {tool_usertours/tour} detail.tour\r\n     * @type {CustomEvent}\r\n     */\r\n    tourEnd: 'tool_usertours/tourEnd',\r\n\r\n    /**\r\n     * An event triggered after a tour has ended.\r\n     *\r\n     * @event tool_usertours/tourEnded\r\n     * @property {object} detail\r\n     * @property {tool_usertours/tour} detail.tour\r\n     * @type {CustomEvent}\r\n     */\r\n    tourEnded: 'tool_usertours/tourEnded',\r\n\r\n    /**\r\n     * An event triggered before a step is hidden.\r\n     *\r\n     * This event is cancellable.\r\n     *\r\n     * @event tool_usertours/stepHide\r\n     * @property {object} detail\r\n     * @property {tool_usertours/tour} detail.tour\r\n     * @type {CustomEvent}\r\n     */\r\n    stepHide: 'tool_usertours/stepHide',\r\n\r\n    /**\r\n     * An event triggered after a step has been hidden.\r\n     *\r\n     * @event tool_usertours/stepHidden\r\n     * @property {object} detail\r\n     * @property {tool_usertours/tour} detail.tour\r\n     * @type {CustomEvent}\r\n     */\r\n    stepHidden: 'tool_usertours/stepHidden',\r\n};\r\n"],"names":["stepRender","stepRendered","tourStart","tourStarted","tourEnd","tourEnded","stepHide","stepHidden"],"mappings":"sKA6C0B,CAYtBA,WAAY,4BAWZC,aAAc,8BAadC,UAAW,2BAUXC,YAAa,6BAYbC,QAAS,yBAUTC,UAAW,2BAYXC,SAAU,0BAUVC,WAAY"}