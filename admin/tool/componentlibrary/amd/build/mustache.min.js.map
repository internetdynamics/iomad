{"version":3,"file":"mustache.min.js","sources":["../src/mustache.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Render mustache template examples within the component library.\r\n *\r\n * @module     tool_componentlibrary/mustache\r\n * @copyright  2021 Bas Brands <bas@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport selectors from 'tool_componentlibrary/selectors';\r\nimport Ajax from 'core/ajax';\r\nimport Config from 'core/config';\r\nimport Templates from 'core/templates';\r\nimport Log from 'core/log';\r\nimport Notification from 'core/notification';\r\n\r\n/**\r\n * Handle a template loaded response.\r\n *\r\n * @method\r\n * @private\r\n * @param {String} container The template container\r\n * @param {String} templateName The template name\r\n * @param {String} context Data for the template.\r\n */\r\nconst renderTemplate = async(container, templateName, context) => {\r\n    try {\r\n        context = JSON.parse(context);\r\n    } catch (e) {\r\n        Log.debug('Could not parse json example context for template.');\r\n        Log.debug(e);\r\n    }\r\n\r\n    const {html, js} = await Templates.renderForPromise(templateName, context);\r\n\r\n    const rendercontainer = container.querySelector(selectors.mustacherendered);\r\n\r\n    // Load the rendered content in the renderer tab.\r\n    await Templates.replaceNodeContents(rendercontainer, html, js);\r\n};\r\n\r\n/**\r\n * Load the a template source from Moodle.\r\n *\r\n * @method\r\n * @private\r\n * @param {String} container The template container\r\n */\r\nconst loadTemplate = container => {\r\n        const sourcecontainer = container.querySelector(selectors.mustachesource);\r\n        const contextcontainer = container.querySelector(selectors.mustachecontext);\r\n        const templateName = container.dataset.template;\r\n        let context = container.querySelector(selectors.mustacherawcontext).textContent;\r\n\r\n        const parts = templateName.split('/');\r\n        const component = parts.shift();\r\n        const name = parts.join('/');\r\n\r\n        const request = {\r\n            methodname: 'core_output_load_template',\r\n            args: {\r\n                component: component,\r\n                template: name,\r\n                themename: Config.theme,\r\n                includecomments: true\r\n            }\r\n        };\r\n\r\n        Ajax.call([request])[0]\r\n            .done((source) => {\r\n                // Load the source template in Template tab.\r\n                sourcecontainer.textContent = source;\r\n                if (!context) {\r\n                    const example = source.match(/Example context \\(json\\):([\\s\\S]+?)(}})/);\r\n                    context = example[1];\r\n                    // Load the variables in the Variables tab.\r\n                    const precontainer = document.createElement(\"pre\");\r\n                    precontainer.innerHTML = JSON.stringify(JSON.parse(context), null, 4);\r\n                    contextcontainer.parentNode.appendChild(precontainer);\r\n                    contextcontainer.classList.add('d-none');\r\n                }\r\n                renderTemplate(container, templateName, context);\r\n            })\r\n            .fail(Notification.exception);\r\n};\r\n\r\n/**\r\n * Initialize the module.\r\n *\r\n * @method\r\n */\r\nexport const mustache = () => {\r\n    document.querySelectorAll(selectors.mustachecode).forEach((container) => {\r\n        loadTemplate(container);\r\n    });\r\n};\r\n"],"names":["loadTemplate","container","sourcecontainer","querySelector","selectors","mustachesource","contextcontainer","mustachecontext","templateName","dataset","template","context","mustacherawcontext","textContent","parts","split","request","methodname","args","component","shift","join","themename","Config","theme","includecomments","call","done","source","example","match","precontainer","document","createElement","innerHTML","JSON","stringify","parse","parentNode","appendChild","classList","add","async","e","debug","html","js","Templates","renderForPromise","rendercontainer","mustacherendered","replaceNodeContents","renderTemplate","fail","Notification","exception","querySelectorAll","mustachecode","forEach"],"mappings":";;;;;;;0VA8DMA,aAAeC,kBACPC,gBAAkBD,UAAUE,cAAcC,mBAAUC,gBACpDC,iBAAmBL,UAAUE,cAAcC,mBAAUG,iBACrDC,aAAeP,UAAUQ,QAAQC,aACnCC,QAAUV,UAAUE,cAAcC,mBAAUQ,oBAAoBC,kBAE9DC,MAAQN,aAAaO,MAAM,KAI3BC,QAAU,CACZC,WAAY,4BACZC,KAAM,CACFC,UANUL,MAAMM,QAOhBV,SANKI,MAAMO,KAAK,KAOhBC,UAAWC,gBAAOC,MAClBC,iBAAiB,kBAIpBC,KAAK,CAACV,UAAU,GAChBW,MAAMC,YAEH1B,gBAAgBW,YAAce,QACzBjB,QAAS,OACJkB,QAAUD,OAAOE,MAAM,2CAC7BnB,QAAUkB,QAAQ,SAEZE,aAAeC,SAASC,cAAc,OAC5CF,aAAaG,UAAYC,KAAKC,UAAUD,KAAKE,MAAM1B,SAAU,KAAM,GACnEL,iBAAiBgC,WAAWC,YAAYR,cACxCzB,iBAAiBkC,UAAUC,IAAI,UAtD5BC,OAAMzC,UAAWO,aAAcG,eAE9CA,QAAUwB,KAAKE,MAAM1B,SACvB,MAAOgC,gBACDC,MAAM,mEACNA,MAAMD,SAGRE,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiBxC,aAAcG,SAE5DsC,gBAAkBhD,UAAUE,cAAcC,mBAAU8C,wBAGpDH,mBAAUI,oBAAoBF,gBAAiBJ,KAAMC,KA2C/CM,CAAenD,UAAWO,aAAcG,YAE3C0C,KAAKC,sBAAaC,8BAQP,KACpBvB,SAASwB,iBAAiBpD,mBAAUqD,cAAcC,SAASzD,YACvDD,aAAaC"}