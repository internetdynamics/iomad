{"version":3,"file":"recordings.min.js","sources":["../src/recordings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JS for the recordings page on mod_bigbluebuttonbn plugin.\r\n *\r\n * @module      mod_bigbluebuttonbn/recordings\r\n * @copyright   2021 Blindside Networks Inc\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport * as repository from './repository';\r\nimport {exception as displayException} from 'core/notification';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\r\nimport {addIconToContainerWithPromise} from 'core/loadingicon';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport ModalEvents from 'core/modal_events';\r\nimport Pending from 'core/pending';\r\n\r\nconst stringsWithKeys = {\r\n    first: 'view_recording_yui_first',\r\n    prev: 'view_recording_yui_prev',\r\n    next: 'view_recording_yui_next',\r\n    last: 'view_recording_yui_last',\r\n    goToLabel: 'view_recording_yui_page',\r\n    goToAction: 'view_recording_yui_go',\r\n    perPage: 'view_recording_yui_rows',\r\n    showAll: 'view_recording_yui_show_all',\r\n};\r\n// Load global strings.\r\nprefetchStrings('bigbluebuttonbn', Object.entries(stringsWithKeys).map((entry) => entry[1]));\r\n\r\nconst getStringsForYui = () => {\r\n    const stringMap = Object.keys(stringsWithKeys).map(key => {\r\n        return {\r\n            key: stringsWithKeys[key],\r\n            component: 'mod_bigbluebuttonbn',\r\n        };\r\n    });\r\n\r\n    // Return an object with the matching string keys (we want an object with {<stringkey>: <stringvalue>...}).\r\n    return getStrings(stringMap)\r\n        .then((stringArray) => Object.assign({}, ...Object.keys(stringsWithKeys).map(\r\n            (key, index) => ({[key]: stringArray[index]})))\r\n        ).catch();\r\n};\r\n\r\nconst getYuiInstance = lang => new Promise(resolve => {\r\n    // eslint-disable-next-line\r\n    YUI({\r\n        lang,\r\n    }).use('intl', 'datatable', 'datatable-sort', 'datatable-paginator', 'datatype-number', Y => {\r\n        resolve(Y);\r\n    });\r\n});\r\n\r\n/**\r\n * Format the supplied date per the specified locale.\r\n *\r\n * @param   {string} locale\r\n * @param   {number} date\r\n * @returns {array}\r\n */\r\nconst formatDate = (locale, date) => {\r\n    const realDate = new Date(date);\r\n    return realDate.toLocaleDateString(locale, {\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n    });\r\n};\r\n\r\n/**\r\n * Format response data for the table.\r\n *\r\n * @param   {string} response JSON-encoded table data\r\n * @returns {array}\r\n */\r\nconst getFormattedData = response => {\r\n    const recordingData = response.tabledata;\r\n    return JSON.parse(recordingData.data);\r\n};\r\n\r\nconst getTableNode = tableSelector => document.querySelector(tableSelector);\r\n\r\nconst fetchRecordingData = tableSelector => {\r\n    const tableNode = getTableNode(tableSelector);\r\n    if (tableNode === null) {\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    if (tableNode.dataset.importMode) {\r\n        return repository.fetchRecordingsToImport(\r\n            tableNode.dataset.bbbid,\r\n            tableNode.dataset.bbbSourceInstanceId,\r\n            tableNode.dataset.bbbSourceCourseId,\r\n            tableNode.dataset.tools,\r\n            tableNode.dataset.groupId\r\n        );\r\n    } else {\r\n        return repository.fetchRecordings(\r\n            tableNode.dataset.bbbid,\r\n            tableNode.dataset.tools,\r\n            tableNode.dataset.groupId\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * Fetch the data table functinos for the specified table.\r\n *\r\n * @param {String} tableId in which we will display the table\r\n * @param {String} searchFormId The Id of the relate.\r\n * @param {Object} dataTable\r\n * @returns {Object}\r\n * @private\r\n */\r\nconst getDataTableFunctions = (tableId, searchFormId, dataTable) => {\r\n    const tableNode = getTableNode(tableId);\r\n    const bbbid = tableNode.dataset.bbbid;\r\n\r\n    const updateTableFromResponse = response => {\r\n        if (!response || !response.status) {\r\n            // There was no output at all.\r\n            return;\r\n        }\r\n\r\n        dataTable.get('data').reset(getFormattedData(response));\r\n        dataTable.set(\r\n            'currentData',\r\n            dataTable.get('data')\r\n        );\r\n\r\n        const currentFilter = dataTable.get('currentFilter');\r\n        if (currentFilter) {\r\n            filterByText(currentFilter);\r\n        }\r\n    };\r\n\r\n    const refreshTableData = () => fetchRecordingData(tableId).then(updateTableFromResponse);\r\n\r\n    const filterByText = value => {\r\n        const dataModel = dataTable.get('currentData');\r\n        dataTable.set('currentFilter', value);\r\n\r\n        const escapedRegex = value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\r\n        const rsearch = new RegExp(`<span>.*?${escapedRegex}.*?</span>`, 'i');\r\n\r\n        dataTable.set('data', dataModel.filter({asList: true}, item => {\r\n            const name = item.get('recording');\r\n            if (name && rsearch.test(name)) {\r\n                return true;\r\n            }\r\n\r\n            const description = item.get('description');\r\n            return description && rsearch.test(description);\r\n        }));\r\n    };\r\n\r\n    const requestAction = (element) => {\r\n        const getDataFromAction = (element, dataType) => {\r\n            const dataElement = element.closest(`[data-${dataType}]`);\r\n            if (dataElement) {\r\n                return dataElement.dataset[dataType];\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        const elementData = element.dataset;\r\n        const payload = {\r\n            bigbluebuttonbnid: bbbid,\r\n            recordingid: getDataFromAction(element, 'recordingid'),\r\n            additionaloptions: getDataFromAction(element, 'additionaloptions'),\r\n            action: elementData.action,\r\n        };\r\n        // Slight change for import, for additional options.\r\n        if (!payload.additionaloptions) {\r\n            payload.additionaloptions = {};\r\n        }\r\n        if (elementData.action === 'import') {\r\n            const bbbsourceid = getDataFromAction(element, 'source-instance-id');\r\n            const bbbcourseid = getDataFromAction(element, 'source-course-id');\r\n            if (!payload.additionaloptions) {\r\n                payload.additionaloptions = {};\r\n            }\r\n            payload.additionaloptions.sourceid = bbbsourceid ? bbbsourceid : 0;\r\n            payload.additionaloptions.bbbcourseid = bbbcourseid ? bbbcourseid : 0;\r\n        }\r\n        // Now additional options should be a json string.\r\n        payload.additionaloptions = JSON.stringify(payload.additionaloptions);\r\n        if (element.dataset.requireConfirmation === \"1\") {\r\n            // Create the confirmation dialogue.\r\n            return new Promise((resolve) =>\r\n                ModalFactory.create({\r\n                    title: getString('confirm'),\r\n                    body: recordingConfirmationMessage(payload),\r\n                    type: ModalFactory.types.SAVE_CANCEL\r\n                }).then(async(modal) => {\r\n                    modal.setSaveButtonText(await getString('ok', 'moodle'));\r\n\r\n                    // Handle save event.\r\n                    modal.getRoot().on(ModalEvents.save, () => {\r\n                        resolve(true);\r\n                    });\r\n\r\n                    // Handle hidden event.\r\n                    modal.getRoot().on(ModalEvents.hidden, () => {\r\n                        // Destroy when hidden.\r\n                        modal.destroy();\r\n                        resolve(false);\r\n                    });\r\n\r\n                    modal.show();\r\n\r\n                    return modal;\r\n                }).catch(displayException)\r\n            ).then((proceed) =>\r\n                proceed ? repository.updateRecording(payload) : () => null\r\n            );\r\n        } else {\r\n            return repository.updateRecording(payload);\r\n        }\r\n    };\r\n\r\n    const recordingConfirmationMessage = async(data) => {\r\n\r\n        const playbackElement = document.querySelector(`#playbacks-${data.recordingid}`);\r\n        const recordingType = await getString(\r\n            playbackElement.dataset.imported === 'true' ? 'view_recording_link' : 'view_recording',\r\n            'bigbluebuttonbn'\r\n        );\r\n\r\n        const confirmation = await getString(`view_recording_${data.action}_confirmation`, 'bigbluebuttonbn', recordingType);\r\n\r\n        if (data.action === 'import') {\r\n            return confirmation;\r\n        }\r\n\r\n        // If it has associated links imported in a different course/activity, show that in confirmation dialog.\r\n        const associatedLinkCount = document.querySelector(`a#recording-${data.action}-${data.recordingid}`)?.dataset?.links;\r\n        if (!associatedLinkCount || associatedLinkCount === 0) {\r\n            return confirmation;\r\n        }\r\n\r\n        const confirmationWarning = await getString(\r\n            associatedLinkCount === 1\r\n                ? `view_recording_${data.action}_confirmation_warning_p`\r\n                : `view_recording_${data.action}_confirmation_warning_s`,\r\n            'bigbluebuttonbn',\r\n            associatedLinkCount\r\n        );\r\n\r\n        return confirmationWarning + '\\n\\n' + confirmation;\r\n    };\r\n\r\n    /**\r\n     * Process an action event.\r\n     *\r\n     * @param   {Event} e\r\n     */\r\n    const processAction = e => {\r\n        const popoutLink = e.target.closest('[data-action=\"play\"]');\r\n        if (popoutLink) {\r\n            e.preventDefault();\r\n\r\n            const videoPlayer = window.open('', '_blank');\r\n            videoPlayer.opener = null;\r\n            videoPlayer.location.href = popoutLink.href;\r\n            // TODO send a recording viewed event when this event will be implemented.\r\n            return;\r\n        }\r\n\r\n        // Fetch any clicked anchor.\r\n        const clickedLink = e.target.closest('a[data-action]');\r\n        if (clickedLink && !clickedLink.classList.contains('disabled')) {\r\n            e.preventDefault();\r\n\r\n            // Create a spinning icon on the table.\r\n            const iconPromise = addIconToContainerWithPromise(dataTable.get('boundingBox').getDOMNode());\r\n\r\n            requestAction(clickedLink)\r\n                .then(refreshTableData)\r\n                .then(iconPromise.resolve)\r\n                .catch(displayException);\r\n        }\r\n    };\r\n\r\n    const processSearchSubmission = e => {\r\n        // Prevent the default action.\r\n        e.preventDefault();\r\n        const parentNode = e.target.closest('div[role=search]');\r\n        const searchInput = parentNode.querySelector('input[name=search]');\r\n        filterByText(searchInput.value);\r\n    };\r\n\r\n    const registerEventListeners = () => {\r\n        // Add event listeners to the table boundingBox.\r\n        const boundingBox = dataTable.get('boundingBox').getDOMNode();\r\n        boundingBox.addEventListener('click', processAction);\r\n\r\n        // Setup the search from handlers.\r\n        const searchForm = document.querySelector(searchFormId);\r\n        if (searchForm) {\r\n            const searchButton = document.querySelector(searchFormId + ' button');\r\n            searchButton.addEventListener('click', processSearchSubmission);\r\n        }\r\n    };\r\n\r\n    return {\r\n        filterByText,\r\n        refreshTableData,\r\n        registerEventListeners,\r\n    };\r\n};\r\n\r\n/**\r\n * Setup the data table for the specified BBB instance.\r\n *\r\n * @param {String} tableId in which we will display the table\r\n * @param {String} searchFormId The Id of the relate.\r\n * @param   {object} response The response from the data request\r\n * @returns {Promise}\r\n */\r\nconst setupDatatable = (tableId, searchFormId, response) => {\r\n    if (!response) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (!response.status) {\r\n        // Something failed. Continue to show the plain output.\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const recordingData = response.tabledata;\r\n\r\n    const pendingPromise = new Pending('mod_bigbluebuttonbn/recordings/setupDatatable');\r\n    return Promise.all([getYuiInstance(recordingData.locale), getStringsForYui()])\r\n        .then(([yuiInstance, strings]) => {\r\n            // Here we use a custom formatter for date.\r\n            // See https://clarle.github.io/yui3/yui/docs/api/classes/DataTable.BodyView.Formatters.html\r\n            // Inspired from examples here: https://clarle.github.io/yui3/yui/docs/datatable/\r\n            // Normally formatter have the prototype: (col) => (cell) => <computed value>, see:\r\n            // https://clarle.github.io/yui3/yui/docs/api/files/datatable_js_formatters.js.html#l100 .\r\n            const dateCustomFormatter = () => (cell) => formatDate(recordingData.locale, cell.value);\r\n            // Add the fetched strings to the YUI Instance.\r\n            yuiInstance.Intl.add('datatable-paginator', yuiInstance.config.lang, {...strings});\r\n            yuiInstance.DataTable.BodyView.Formatters.customDate = dateCustomFormatter;\r\n            return yuiInstance;\r\n        })\r\n        .then(yuiInstance => {\r\n\r\n            const tableData = getFormattedData(response);\r\n            yuiInstance.RecordsPaginatorView = Y.Base.create('my-paginator-view', yuiInstance.DataTable.Paginator.View, [], {\r\n                _modelChange: function(e) {\r\n                    var changed = e.changed,\r\n                        totalItems = (changed && changed.totalItems);\r\n                    if (totalItems) {\r\n                        this._updateControlsUI(e.target.get('page'));\r\n                    }\r\n                }\r\n            });\r\n            return new yuiInstance.DataTable({\r\n                paginatorView: \"RecordsPaginatorView\",\r\n                width: \"1195px\",\r\n                columns: recordingData.columns,\r\n                data: tableData,\r\n                rowsPerPage: 10,\r\n                paginatorLocation: ['header', 'footer'],\r\n                autoSync: true\r\n            });\r\n        })\r\n        .then(dataTable => {\r\n            dataTable.render(tableId);\r\n            const {registerEventListeners} = getDataTableFunctions(\r\n                tableId,\r\n                searchFormId,\r\n                dataTable);\r\n            registerEventListeners();\r\n            return dataTable;\r\n        })\r\n        .then(dataTable => {\r\n            pendingPromise.resolve();\r\n            return dataTable;\r\n        });\r\n};\r\n\r\n/**\r\n * Initialise recordings code.\r\n *\r\n * @method init\r\n * @param {String} tableId in which we will display the table\r\n * @param {String} searchFormId The Id of the relate.\r\n */\r\nexport const init = (tableId, searchFormId) => {\r\n    const pendingPromise = new Pending('mod_bigbluebuttonbn/recordings:init');\r\n\r\n    fetchRecordingData(tableId)\r\n        .then(response => setupDatatable(tableId, searchFormId, response))\r\n        .then(() => pendingPromise.resolve())\r\n        .catch(displayException);\r\n};\r\n"],"names":["stringsWithKeys","first","prev","next","last","goToLabel","goToAction","perPage","showAll","Object","entries","map","entry","getStringsForYui","stringMap","keys","key","component","then","stringArray","assign","index","catch","getFormattedData","response","recordingData","tabledata","JSON","parse","data","getTableNode","tableSelector","document","querySelector","fetchRecordingData","tableNode","Promise","resolve","dataset","importMode","repository","fetchRecordingsToImport","bbbid","bbbSourceInstanceId","bbbSourceCourseId","tools","groupId","fetchRecordings","getDataTableFunctions","tableId","searchFormId","dataTable","updateTableFromResponse","status","get","reset","set","currentFilter","filterByText","refreshTableData","value","dataModel","escapedRegex","replace","rsearch","RegExp","filter","asList","item","name","test","description","recordingConfirmationMessage","async","playbackElement","recordingid","recordingType","imported","confirmation","action","associatedLinkCount","_document$querySelect","_document$querySelect2","links","processAction","e","popoutLink","target","closest","preventDefault","videoPlayer","window","open","opener","location","href","clickedLink","classList","contains","iconPromise","getDOMNode","element","getDataFromAction","dataType","dataElement","elementData","payload","bigbluebuttonbnid","additionaloptions","bbbsourceid","bbbcourseid","sourceid","stringify","requireConfirmation","ModalFactory","create","title","body","type","types","SAVE_CANCEL","modal","setSaveButtonText","getRoot","on","ModalEvents","save","hidden","destroy","show","displayException","proceed","updateRecording","requestAction","processSearchSubmission","searchInput","registerEventListeners","addEventListener","setupDatatable","pendingPromise","Pending","all","lang","locale","YUI","use","Y","_ref","yuiInstance","strings","Intl","add","config","DataTable","BodyView","Formatters","customDate","cell","formatDate","date","Date","toLocaleDateString","weekday","year","month","day","tableData","RecordsPaginatorView","Base","Paginator","View","_modelChange","changed","totalItems","_updateControlsUI","paginatorView","width","columns","rowsPerPage","paginatorLocation","autoSync","render"],"mappings":"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"}