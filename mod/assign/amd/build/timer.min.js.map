{"version":3,"file":"timer.min.js","sources":["../src/timer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport Notification from 'core/notification';\r\nimport {get_string as getString} from 'core/str';\r\n\r\n/**\r\n * A javascript module for the time in the assign module.\r\n *\r\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n/**\r\n * Timestamp at which time runs out.\r\n *\r\n * @property {Number} endTime\r\n */\r\nlet endTime = 0;\r\n\r\n/**\r\n * ID of the timeout that updates the clock.\r\n *\r\n * @property {Number} timeoutId\r\n */\r\nlet timeoutId = null;\r\n\r\n/**\r\n * The timer element.\r\n *\r\n * @property {Element} timer\r\n */\r\nlet timer = null;\r\n\r\n/**\r\n * Helper method to convert time remaining in seconds into HH:MM:SS format.\r\n *\r\n * @method formatSeconds\r\n * @param {Number} secs Time remaining in seconds to get value for.\r\n * @return {String} Time remaining in HH:MM:SS format.\r\n */\r\nconst formatSeconds = (secs) => {\r\n    const hours = Math.floor(secs / 3600);\r\n    const minutes = Math.floor(secs / 60) % 60;\r\n    const seconds = secs % 60;\r\n\r\n    return [hours, minutes, seconds]\r\n        // Remove the hours column if there is less than 1 hour left.\r\n        .filter((value, index) => value !== 0 || index > 0)\r\n        // Ensure that all fields are two digit numbers.\r\n        .map(value => `${value}`.padStart(2, '0'))\r\n        .join(\":\");\r\n};\r\n\r\n/**\r\n * Stop the timer, if it is running.\r\n *\r\n * @method stop\r\n */\r\nconst stop = () => {\r\n    if (timeoutId) {\r\n        clearTimeout(timeoutId);\r\n    }\r\n};\r\n\r\n/**\r\n * Function to update the clock with the current time left.\r\n *\r\n * @method update\r\n */\r\nconst update = () => {\r\n    const now = new Date().getTime();\r\n    const secondsLeft = Math.floor((endTime - now) / 1000);\r\n\r\n    // If time has expired, set the hidden form field that says time has expired.\r\n    if (secondsLeft <= 0) {\r\n        timer.classList.add('alert', 'alert-danger');\r\n        timer.innerHTML = '00:00:00';\r\n\r\n        // Only add a notification on the assign submission page.\r\n        if (document.getElementById(\"mod_assign_timelimit_block\")) {\r\n            getString('caneditsubmission', 'mod_assign')\r\n                .then(message => Notification.addNotification({message}))\r\n                .catch(Notification.exception);\r\n        }\r\n\r\n        stop();\r\n        return;\r\n    } else if (secondsLeft < 300) { // Add danger style when less than 5 minutes left.\r\n        timer.classList.remove('alert-warning');\r\n        timer.classList.add('alert', 'alert-danger');\r\n    } else if (secondsLeft < 900) { // Add warning style when less than 15 minutes left.\r\n        timer.classList.remove('alert-danger');\r\n        timer.classList.add('alert', 'alert-warning');\r\n    }\r\n\r\n    // Update the time display.\r\n    timer.innerHTML = formatSeconds(secondsLeft);\r\n\r\n    // Arrange for this method to be called again soon.\r\n    timeoutId = setTimeout(update, 500);\r\n};\r\n\r\n/**\r\n * Set up the submission timer.\r\n *\r\n * @method init\r\n * @param {Number} timerId Unique ID of the timer element.\r\n */\r\nexport const init = (timerId) => {\r\n    timer = document.getElementById(timerId);\r\n    endTime = M.pageloadstarttime.getTime() + (timer.dataset.starttime * 1000);\r\n    update();\r\n};\r\n"],"names":["endTime","timeoutId","timer","update","now","Date","getTime","secondsLeft","Math","floor","classList","add","innerHTML","document","getElementById","then","message","Notification","addNotification","catch","exception","clearTimeout","secs","remove","filter","value","index","map","padStart","join","setTimeout","timerId","M","pageloadstarttime","dataset","starttime"],"mappings":";;;;;;0JA8BIA,QAAU,EAOVC,UAAY,KAOZC,MAAQ,WAsCNC,OAAS,WACLC,KAAM,IAAIC,MAAOC,UACjBC,YAAcC,KAAKC,OAAOT,QAAUI,KAAO,QAG7CG,aAAe,SACfL,MAAMQ,UAAUC,IAAI,QAAS,gBAC7BT,MAAMU,UAAY,WAGdC,SAASC,eAAe,mDACd,oBAAqB,cAC1BC,MAAKC,SAAWC,sBAAaC,gBAAgB,CAACF,QAAAA,YAC9CG,MAAMF,sBAAaG,gBAvB5BnB,WACAoB,aAAapB,YApBEqB,IAAAA,KA+CRf,YAAc,KACrBL,MAAMQ,UAAUa,OAAO,iBACvBrB,MAAMQ,UAAUC,IAAI,QAAS,iBACtBJ,YAAc,MACrBL,MAAMQ,UAAUa,OAAO,gBACvBrB,MAAMQ,UAAUC,IAAI,QAAS,kBAIjCT,MAAMU,WAxDaU,KAwDaf,YAnDzB,CAJOC,KAAKC,MAAMa,KAAO,MAChBd,KAAKC,MAAMa,KAAO,IAAM,GACxBA,KAAO,IAIlBE,QAAO,CAACC,MAAOC,QAAoB,IAAVD,OAAeC,MAAQ,IAEhDC,KAAIF,OAAS,UAAGA,OAAQG,SAAS,EAAG,OACpCC,KAAK,MAiDV5B,UAAY6B,WAAW3B,OAAQ,oBASd4B,UACjB7B,MAAQW,SAASC,eAAeiB,SAChC/B,QAAUgC,EAAEC,kBAAkB3B,UAAuC,IAA1BJ,MAAMgC,QAAQC,UACzDhC"}