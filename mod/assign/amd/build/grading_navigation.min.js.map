{"version":3,"file":"grading_navigation.min.js","sources":["../src/grading_navigation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript to handle changing users via the user selector in the header.\r\n *\r\n * @module     mod_assign/grading_navigation\r\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.1\r\n */\r\ndefine(['jquery', 'core/notification', 'core/str', 'core/form-autocomplete',\r\n        'core/ajax', 'mod_assign/grading_form_change_checker'],\r\n       function($, notification, str, autocomplete, ajax, checker) {\r\n\r\n    /**\r\n     * GradingNavigation class.\r\n     *\r\n     * @class mod_assign/grading_navigation\r\n     * @param {String} selector The selector for the page region containing the user navigation.\r\n     */\r\n    var GradingNavigation = function(selector) {\r\n        this._regionSelector = selector;\r\n        this._region = $(selector);\r\n        this._filters = [];\r\n        this._users = [];\r\n        this._filteredUsers = [];\r\n        this._lastXofYUpdate = 0;\r\n        this._firstLoadUsers = true;\r\n\r\n        let url = new URL(window.location);\r\n        if (parseInt(url.searchParams.get('treset')) > 0) {\r\n            // Remove 'treset' url parameter to make sure that\r\n            // table preferences won't be reset on page refresh.\r\n            url.searchParams.delete('treset');\r\n            window.history.replaceState({}, \"\", url);\r\n        }\r\n\r\n        // Get the current user list from a webservice.\r\n        this._loadAllUsers();\r\n\r\n        // We do not allow navigation while ajax requests are pending.\r\n        // Attach listeners to the select and arrow buttons.\r\n\r\n        this._region.find('[data-action=\"previous-user\"]').on('click', this._handlePreviousUser.bind(this));\r\n        this._region.find('[data-action=\"next-user\"]').on('click', this._handleNextUser.bind(this));\r\n        this._region.find('[data-action=\"change-user\"]').on('change', this._handleChangeUser.bind(this));\r\n        this._region.find('[data-region=\"user-filters\"]').on('click', this._toggleExpandFilters.bind(this));\r\n        this._region.find('[data-region=\"user-resettable\"]').on('click', this._toggleResetTable.bind());\r\n\r\n        $(document).on('user-changed', this._refreshSelector.bind(this));\r\n        $(document).on('done-saving-show-next', this._handleNextUser.bind(this));\r\n\r\n        // Position the configure filters panel under the link that expands it.\r\n        var toggleLink = this._region.find('[data-region=\"user-filters\"]');\r\n        var configPanel = $(document.getElementById(toggleLink.attr('aria-controls')));\r\n\r\n        configPanel.on('change', 'select', this._filterChanged.bind(this));\r\n\r\n        var userid = $('[data-region=\"grading-navigation-panel\"]').data('first-userid');\r\n        if (userid) {\r\n            this._selectUserById(userid);\r\n        }\r\n\r\n        str.get_string('changeuser', 'mod_assign').done(function(s) {\r\n                autocomplete.enhance('[data-action=change-user]', false, 'mod_assign/participant_selector', s);\r\n            }\r\n        ).fail(notification.exception);\r\n\r\n        $(document).bind(\"start-loading-user\", function() {\r\n            this._isLoading = true;\r\n        }.bind(this));\r\n        $(document).bind(\"finish-loading-user\", function() {\r\n            this._isLoading = false;\r\n        }.bind(this));\r\n    };\r\n\r\n    /** @property {Boolean} Boolean tracking active ajax requests. */\r\n    GradingNavigation.prototype._isLoading = false;\r\n\r\n    /** @property {String} Selector for the page region containing the user navigation. */\r\n    GradingNavigation.prototype._regionSelector = null;\r\n\r\n    /** @property {Array} The list of active filter keys */\r\n    GradingNavigation.prototype._filters = null;\r\n\r\n    /** @property {Array} The list of users */\r\n    GradingNavigation.prototype._users = null;\r\n\r\n    /** @property {JQuery} JQuery node for the page region containing the user navigation. */\r\n    GradingNavigation.prototype._region = null;\r\n\r\n    /** @property {String} Last active filters */\r\n    GradingNavigation.prototype._lastFilters = '';\r\n\r\n    /**\r\n     * Load the list of all users for this assignment.\r\n     *\r\n     * @private\r\n     * @method _loadAllUsers\r\n     * @return {Boolean} True if the user list was fetched.\r\n     */\r\n    GradingNavigation.prototype._loadAllUsers = function() {\r\n        var select = this._region.find('[data-action=change-user]');\r\n        var assignmentid = select.attr('data-assignmentid');\r\n        var groupid = select.attr('data-groupid');\r\n\r\n        var filterPanel = this._region.find('[data-region=\"configure-filters\"]');\r\n        var filter = filterPanel.find('select[name=\"filter\"]').val();\r\n        var workflowFilter = filterPanel.find('select[name=\"workflowfilter\"]');\r\n        if (workflowFilter) {\r\n            filter += ',' + workflowFilter.val();\r\n        }\r\n        var markerFilter = filterPanel.find('select[name=\"markerfilter\"]');\r\n        if (markerFilter) {\r\n            filter += ',' + markerFilter.val();\r\n        }\r\n\r\n        if (this._lastFilters == filter) {\r\n            return false;\r\n        }\r\n        this._lastFilters = filter;\r\n\r\n        ajax.call([{\r\n            methodname: 'mod_assign_list_participants',\r\n            args: {assignid: assignmentid, groupid: groupid, filter: '', onlyids: true, tablesort: true},\r\n            done: this._usersLoaded.bind(this),\r\n            fail: notification.exception\r\n        }]);\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Call back to rebuild the user selector and x of y info when the user list is updated.\r\n     *\r\n     * @private\r\n     * @method _usersLoaded\r\n     * @param {Array} users\r\n     */\r\n    GradingNavigation.prototype._usersLoaded = function(users) {\r\n        this._firstLoadUsers = false;\r\n        this._filteredUsers = this._users = users;\r\n        if (this._users.length) {\r\n            // Position the configure filters panel under the link that expands it.\r\n            var toggleLink = this._region.find('[data-region=\"user-filters\"]');\r\n            var configPanel = $(document.getElementById(toggleLink.attr('aria-controls')));\r\n\r\n            configPanel.find('select[name=\"filter\"]').trigger('change');\r\n        } else {\r\n            this._selectNoUser();\r\n        }\r\n        this._triggerNextUserEvent();\r\n    };\r\n\r\n    /**\r\n     * Close the configure filters panel if a click is detected outside of it.\r\n     *\r\n     * @private\r\n     * @method _checkClickOutsideConfigureFilters\r\n     * @param {Event} event\r\n     */\r\n    GradingNavigation.prototype._checkClickOutsideConfigureFilters = function(event) {\r\n        var configPanel = this._region.find('[data-region=\"configure-filters\"]');\r\n\r\n        if (!configPanel.is(event.target) && configPanel.has(event.target).length === 0) {\r\n            var toggleLink = this._region.find('[data-region=\"user-filters\"]');\r\n\r\n            configPanel.hide();\r\n            configPanel.attr('aria-hidden', 'true');\r\n            toggleLink.attr('aria-expanded', 'false');\r\n            $(document).unbind('click.mod_assign_grading_navigation');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Close the configure filters panel if a click is detected outside of it.\r\n     *\r\n     * @private\r\n     * @method _updateFilterPreference\r\n     * @param {Number} userId The current user id.\r\n     * @param {Array} filterList The list of current filter values.\r\n     * @param {Array} preferenceNames The names of the preferences to update\r\n     * @return {Promise} Resolved when all the preferences are updated.\r\n     */\r\n    GradingNavigation.prototype._updateFilterPreferences = function(userId, filterList, preferenceNames) {\r\n        var preferences = [],\r\n            i = 0;\r\n\r\n        if (filterList.length == 0 || this._firstLoadUsers) {\r\n            // Nothing to update.\r\n            var deferred = $.Deferred();\r\n            deferred.resolve();\r\n            return deferred;\r\n        }\r\n        // General filter.\r\n        // Set the user preferences to the current filters.\r\n        for (i = 0; i < filterList.length; i++) {\r\n            var newValue = filterList[i];\r\n            if (newValue == 'none') {\r\n                newValue = '';\r\n            }\r\n\r\n            preferences.push({\r\n                userid: userId,\r\n                name: preferenceNames[i],\r\n                value: newValue\r\n            });\r\n        }\r\n\r\n        return ajax.call([{\r\n            methodname: 'core_user_set_user_preferences',\r\n            args: {\r\n                preferences: preferences\r\n            }\r\n        }])[0];\r\n    };\r\n    /**\r\n     * Turn a filter on or off.\r\n     *\r\n     * @private\r\n     * @method _filterChanged\r\n     */\r\n    GradingNavigation.prototype._filterChanged = function() {\r\n        // There are 3 types of filter right now.\r\n        var filterPanel = this._region.find('[data-region=\"configure-filters\"]');\r\n        var filters = filterPanel.find('select');\r\n        var preferenceNames = [];\r\n\r\n        this._filters = [];\r\n        filters.each(function(idx, ele) {\r\n            var element = $(ele);\r\n            this._filters.push(element.val());\r\n            preferenceNames.push('assign_' + element.prop('name'));\r\n        }.bind(this));\r\n\r\n        // Update the active filter string.\r\n        var filterlist = [];\r\n        filterPanel.find('option:checked').each(function(idx, ele) {\r\n            filterlist[filterlist.length] = $(ele).text();\r\n        });\r\n        if (filterlist.length) {\r\n            this._region.find('[data-region=\"user-filters\"] span').text(filterlist.join(', '));\r\n        } else {\r\n            str.get_string('nofilters', 'mod_assign').done(function(s) {\r\n                this._region.find('[data-region=\"user-filters\"] span').text(s);\r\n            }.bind(this)).fail(notification.exception);\r\n        }\r\n\r\n        var select = this._region.find('[data-action=change-user]');\r\n        var currentUserID = select.data('currentuserid');\r\n        this._updateFilterPreferences(currentUserID, this._filters, preferenceNames).done(function() {\r\n            // Reload the list of users to apply the new filters.\r\n            if (!this._loadAllUsers()) {\r\n                var userid = parseInt(select.attr('data-selected'));\r\n                let foundIndex = null;\r\n                // Search the returned users for the current selection.\r\n                $.each(this._filteredUsers, function(index, user) {\r\n                    if (userid == user.id) {\r\n                        foundIndex = index;\r\n                    }\r\n                });\r\n\r\n                if (this._filteredUsers.length && foundIndex !== null) {\r\n                    this._selectUserById(this._filteredUsers[foundIndex].id);\r\n                } else {\r\n                    this._selectNoUser();\r\n                }\r\n\r\n            }\r\n        }.bind(this)).fail(notification.exception);\r\n        this._refreshCount();\r\n    };\r\n\r\n    /**\r\n     * Select no users, because no users match the filters.\r\n     *\r\n     * @private\r\n     * @method _selectNoUser\r\n     */\r\n    GradingNavigation.prototype._selectNoUser = function() {\r\n        // Detect unsaved changes, and offer to save them - otherwise change user right now.\r\n        if (this._isLoading) {\r\n            return;\r\n        }\r\n        if (checker.checkFormForChanges('[data-region=\"grade-panel\"] .gradeform')) {\r\n            // Form has changes, so we need to confirm before switching users.\r\n            str.get_strings([\r\n                {key: 'unsavedchanges', component: 'mod_assign'},\r\n                {key: 'unsavedchangesquestion', component: 'mod_assign'},\r\n                {key: 'saveandcontinue', component: 'mod_assign'},\r\n                {key: 'cancel', component: 'core'},\r\n            ]).done(function(strs) {\r\n                notification.confirm(strs[0], strs[1], strs[2], strs[3], function() {\r\n                    $(document).trigger('save-changes', -1);\r\n                });\r\n            });\r\n        } else {\r\n            $(document).trigger('user-changed', -1);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Select the specified user by id.\r\n     *\r\n     * @private\r\n     * @method _selectUserById\r\n     * @param {Number} userid\r\n     */\r\n    GradingNavigation.prototype._selectUserById = function(userid) {\r\n        var select = this._region.find('[data-action=change-user]');\r\n        var useridnumber = parseInt(userid, 10);\r\n\r\n        // Detect unsaved changes, and offer to save them - otherwise change user right now.\r\n        if (this._isLoading) {\r\n            return;\r\n        }\r\n        if (checker.checkFormForChanges('[data-region=\"grade-panel\"] .gradeform')) {\r\n            // Form has changes, so we need to confirm before switching users.\r\n            str.get_strings([\r\n                {key: 'unsavedchanges', component: 'mod_assign'},\r\n                {key: 'unsavedchangesquestion', component: 'mod_assign'},\r\n                {key: 'saveandcontinue', component: 'mod_assign'},\r\n                {key: 'cancel', component: 'core'},\r\n            ]).done(function(strs) {\r\n                notification.confirm(strs[0], strs[1], strs[2], strs[3], function() {\r\n                    $(document).trigger('save-changes', useridnumber);\r\n                });\r\n            });\r\n        } else {\r\n            select.attr('data-selected', userid);\r\n\r\n            if (!isNaN(useridnumber) && useridnumber > 0) {\r\n                $(document).trigger('user-changed', userid);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Expand or collapse the filter config panel.\r\n     *\r\n     * @private\r\n     * @method _toggleExpandFilters\r\n     * @param {Event} event\r\n     */\r\n    GradingNavigation.prototype._toggleExpandFilters = function(event) {\r\n        event.preventDefault();\r\n        var toggleLink = $(event.target).closest('[data-region=\"user-filters\"]');\r\n        var expanded = toggleLink.attr('aria-expanded') == 'true';\r\n        var configPanel = $(document.getElementById(toggleLink.attr('aria-controls')));\r\n\r\n        if (expanded) {\r\n            configPanel.hide();\r\n            configPanel.attr('aria-hidden', 'true');\r\n            toggleLink.attr('aria-expanded', 'false');\r\n            $(document).unbind('click.mod_assign_grading_navigation');\r\n        } else {\r\n            configPanel.css('display', 'inline-block');\r\n            configPanel.attr('aria-hidden', 'false');\r\n            toggleLink.attr('aria-expanded', 'true');\r\n            event.stopPropagation();\r\n            $(document).on('click.mod_assign_grading_navigation', this._checkClickOutsideConfigureFilters.bind(this));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset table preferences.\r\n     *\r\n     * @private\r\n     * @method _toggleResetTable\r\n     */\r\n    GradingNavigation.prototype._toggleResetTable = function() {\r\n        let url = new URL(window.location);\r\n        url.searchParams.set('treset', '1');\r\n        window.location.href = url;\r\n    };\r\n\r\n    /**\r\n     * Change to the previous user in the grading list.\r\n     *\r\n     * @private\r\n     * @method _handlePreviousUser\r\n     * @param {Event} e\r\n     */\r\n    GradingNavigation.prototype._handlePreviousUser = function(e) {\r\n        e.preventDefault();\r\n        var select = this._region.find('[data-action=change-user]');\r\n        var currentUserId = select.attr('data-selected');\r\n        var i = 0;\r\n        var currentIndex = 0;\r\n\r\n        for (i = 0; i < this._filteredUsers.length; i++) {\r\n            if (this._filteredUsers[i].id == currentUserId) {\r\n                currentIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        var count = this._filteredUsers.length;\r\n        var newIndex = (currentIndex - 1);\r\n        if (newIndex < 0) {\r\n            newIndex = count - 1;\r\n        }\r\n\r\n        if (count) {\r\n            this._selectUserById(this._filteredUsers[newIndex].id);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Change to the next user in the grading list.\r\n     *\r\n     * @param {Event} e\r\n     * @param {Boolean} saved Has the form already been saved? Skips checking for changes if true.\r\n     */\r\n    GradingNavigation.prototype._handleNextUser = function(e, saved) {\r\n        e.preventDefault();\r\n        var select = this._region.find('[data-action=change-user]');\r\n        var currentUserId = select.attr('data-selected');\r\n        var i = 0;\r\n        var currentIndex = 0;\r\n\r\n        for (i = 0; i < this._filteredUsers.length; i++) {\r\n            if (this._filteredUsers[i].id == currentUserId) {\r\n                currentIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        var count = this._filteredUsers.length;\r\n        var newIndex = (currentIndex + 1) % count;\r\n\r\n        if (saved && count) {\r\n            // If we've already saved the grade, skip checking if we've made any changes.\r\n            var userid = this._filteredUsers[newIndex].id;\r\n            var useridnumber = parseInt(userid, 10);\r\n            select.attr('data-selected', userid);\r\n            if (!isNaN(useridnumber) && useridnumber > 0) {\r\n                $(document).trigger('user-changed', userid);\r\n            }\r\n        } else if (count) {\r\n            this._selectUserById(this._filteredUsers[newIndex].id);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set count string. This method only sets the value for the last time it was ever called to deal\r\n     * with promises that return in a non-predictable order.\r\n     *\r\n     * @private\r\n     * @method _setCountString\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     */\r\n    GradingNavigation.prototype._setCountString = function(x, y) {\r\n        var updateNumber = 0;\r\n        this._lastXofYUpdate++;\r\n        updateNumber = this._lastXofYUpdate;\r\n\r\n        var param = {x: x, y: y};\r\n        str.get_string('xofy', 'mod_assign', param).done(function(s) {\r\n            if (updateNumber == this._lastXofYUpdate) {\r\n                this._region.find('[data-region=\"user-count-summary\"]').text(s);\r\n            }\r\n        }.bind(this)).fail(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Rebuild the x of y string.\r\n     *\r\n     * @private\r\n     * @method _refreshCount\r\n     */\r\n    GradingNavigation.prototype._refreshCount = function() {\r\n        var select = this._region.find('[data-action=change-user]');\r\n        var userid = select.attr('data-selected');\r\n        var i = 0;\r\n        var currentIndex = 0;\r\n\r\n        if (isNaN(userid) || userid <= 0) {\r\n            this._region.find('[data-region=\"user-count\"]').hide();\r\n        } else {\r\n            this._region.find('[data-region=\"user-count\"]').show();\r\n\r\n            for (i = 0; i < this._filteredUsers.length; i++) {\r\n                if (this._filteredUsers[i].id == userid) {\r\n                    currentIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n            var count = this._filteredUsers.length;\r\n            if (count) {\r\n                currentIndex += 1;\r\n            }\r\n            this._setCountString(currentIndex, count);\r\n            // Update window URL\r\n            if (currentIndex > 0) {\r\n                var url = new URL(window.location);\r\n                if (parseInt(url.searchParams.get('blindid')) > 0) {\r\n                    var newid = this._filteredUsers[currentIndex - 1].recordid;\r\n                    url.searchParams.set('blindid', newid);\r\n                } else {\r\n                    url.searchParams.set('userid', userid);\r\n                }\r\n                // We do this so a browser refresh will return to the same user.\r\n                window.history.replaceState({}, \"\", url);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Respond to a user-changed event by updating the selector.\r\n     *\r\n     * @private\r\n     * @method _refreshSelector\r\n     * @param {Event} event\r\n     * @param {String} userid\r\n     */\r\n    GradingNavigation.prototype._refreshSelector = function(event, userid) {\r\n        var select = this._region.find('[data-action=change-user]');\r\n        userid = parseInt(userid, 10);\r\n\r\n        if (!isNaN(userid) && userid > 0) {\r\n            select.attr('data-selected', userid);\r\n        }\r\n        this._refreshCount();\r\n    };\r\n\r\n    /**\r\n     * Trigger the next user event depending on the number of filtered users\r\n     *\r\n     * @private\r\n     * @method _triggerNextUserEvent\r\n     */\r\n    GradingNavigation.prototype._triggerNextUserEvent = function() {\r\n        if (this._filteredUsers.length > 1) {\r\n            $(document).trigger('next-user', {nextUserId: null, nextUser: true});\r\n        } else {\r\n            $(document).trigger('next-user', {nextUser: false});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Change to a different user in the grading list.\r\n     *\r\n     * @private\r\n     * @method _handleChangeUser\r\n     */\r\n    GradingNavigation.prototype._handleChangeUser = function() {\r\n        var select = this._region.find('[data-action=change-user]');\r\n        var userid = parseInt(select.val(), 10);\r\n\r\n        if (this._isLoading) {\r\n            return;\r\n        }\r\n        if (checker.checkFormForChanges('[data-region=\"grade-panel\"] .gradeform')) {\r\n            // Form has changes, so we need to confirm before switching users.\r\n            str.get_strings([\r\n                {key: 'unsavedchanges', component: 'mod_assign'},\r\n                {key: 'unsavedchangesquestion', component: 'mod_assign'},\r\n                {key: 'saveandcontinue', component: 'mod_assign'},\r\n                {key: 'cancel', component: 'core'},\r\n            ]).done(function(strs) {\r\n                notification.confirm(strs[0], strs[1], strs[2], strs[3], function() {\r\n                    $(document).trigger('save-changes', userid);\r\n                });\r\n            });\r\n        } else {\r\n            if (!isNaN(userid) && userid > 0) {\r\n                select.attr('data-selected', userid);\r\n\r\n                $(document).trigger('user-changed', userid);\r\n            }\r\n        }\r\n    };\r\n\r\n    return GradingNavigation;\r\n});\r\n"],"names":["define","$","notification","str","autocomplete","ajax","checker","GradingNavigation","selector","_regionSelector","_region","_filters","_users","_filteredUsers","_lastXofYUpdate","_firstLoadUsers","url","URL","window","location","parseInt","searchParams","get","delete","history","replaceState","_loadAllUsers","find","on","this","_handlePreviousUser","bind","_handleNextUser","_handleChangeUser","_toggleExpandFilters","_toggleResetTable","document","_refreshSelector","toggleLink","getElementById","attr","_filterChanged","userid","data","_selectUserById","get_string","done","s","enhance","fail","exception","_isLoading","prototype","_lastFilters","select","assignmentid","groupid","filterPanel","filter","val","workflowFilter","markerFilter","call","methodname","args","assignid","onlyids","tablesort","_usersLoaded","users","length","trigger","_selectNoUser","_triggerNextUserEvent","_checkClickOutsideConfigureFilters","event","configPanel","is","target","has","hide","unbind","_updateFilterPreferences","userId","filterList","preferenceNames","preferences","i","deferred","Deferred","resolve","newValue","push","name","value","filters","each","idx","ele","element","prop","filterlist","text","join","currentUserID","foundIndex","index","user","id","_refreshCount","checkFormForChanges","get_strings","key","component","strs","confirm","useridnumber","isNaN","preventDefault","closest","expanded","css","stopPropagation","set","href","e","currentUserId","currentIndex","count","newIndex","saved","_setCountString","x","y","updateNumber","param","show","newid","recordid","nextUserId","nextUser"],"mappings":"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"}