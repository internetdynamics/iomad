{"version":3,"file":"grader.min.js","sources":["../../src/grades/grader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This module will tie together all of the different calls the gradable module will make.\r\n *\r\n * @module     mod_forum/grades/grader\r\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport * as Selectors from './grader/selectors';\r\nimport Repository from 'mod_forum/repository';\r\nimport Templates from 'core/templates';\r\nimport * as Grader from '../local/grades/grader';\r\nimport Notification from 'core/notification';\r\nimport CourseRepository from 'core_course/repository';\r\nimport {relativeUrl} from 'core/url';\r\n\r\nconst templateNames = {\r\n    contentRegion: 'mod_forum/grades/grader/discussion/posts',\r\n};\r\n\r\n/**\r\n * Curried function with CMID set, this is then used in unified grader as a fetch a users content.\r\n *\r\n * @param {Number} cmid\r\n * @param {Bool} experimentalDisplayMode\r\n * @return {Function}\r\n */\r\nconst getContentForUserIdFunction = (cmid, experimentalDisplayMode) => (userid) => {\r\n    /**\r\n     * Given the parent function is called with the second param set execute the partially executed function.\r\n     *\r\n     * @param {Number} userid\r\n     */\r\n    return Repository.getDiscussionByUserID(userid, cmid)\r\n        .then(context => {\r\n            // Rebuild the returned data for the template.\r\n            context.discussions = context.discussions.map(discussionPostMapper);\r\n            context.experimentaldisplaymode = experimentalDisplayMode ? true : false;\r\n\r\n            return Templates.render(templateNames.contentRegion, context);\r\n        })\r\n        .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Curried function with CMID set, this is then used in unified grader as a fetch users call.\r\n * The function curried fetches all users in a course for a given CMID.\r\n *\r\n * @param {Number} cmid\r\n * @param {Number} groupID\r\n * @param {Boolean} onlyActive Whether to fetch only the active enrolled users or all enrolled users in the course.\r\n * @return {Array} Array of users for a given context.\r\n */\r\nconst getUsersForCmidFunction = (cmid, groupID, onlyActive) => async() => {\r\n    const context = await CourseRepository.getUsersFromCourseModuleID(cmid, groupID, onlyActive);\r\n\r\n    return context.users;\r\n};\r\n\r\n\r\nconst findGradableNode = node => node.closest(Selectors.gradableItem);\r\n\r\n/**\r\n * For a discussion we need to manipulate it's posts to hide certain UI elements.\r\n *\r\n * @param {Object} discussion\r\n * @return {Array} name, id, posts\r\n */\r\nconst discussionPostMapper = (discussion) => {\r\n    // Map postid => post.\r\n    const parentMap = new Map();\r\n    discussion.posts.parentposts.forEach(post => parentMap.set(post.id, post));\r\n    const userPosts = discussion.posts.userposts.map(post => {\r\n        post.readonly = true;\r\n        post.hasreplies = false;\r\n        post.replies = [];\r\n\r\n        const parent = post.parentid ? parentMap.get(post.parentid) : null;\r\n        if (parent) {\r\n            parent.hasreplies = false;\r\n            parent.replies = [];\r\n            parent.readonly = true;\r\n            post.parentauthorname = parent.author.fullname;\r\n        }\r\n\r\n        return {\r\n            parent,\r\n            post\r\n        };\r\n    });\r\n\r\n    return {\r\n        ...discussion,\r\n        posts: userPosts,\r\n    };\r\n};\r\n\r\n/**\r\n * Launch the Grader.\r\n *\r\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\r\n * @param {object} param\r\n * @param {bool} [param.focusOnClose=null]\r\n */\r\nconst launchWholeForumGrading = async(rootNode, {\r\n    focusOnClose = null,\r\n} = {}) => {\r\n    const data = rootNode.dataset;\r\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\r\n        'mod_forum',\r\n        data.contextid,\r\n        data.gradingComponent,\r\n        data.gradingComponentSubtype,\r\n        data.gradableItemtype\r\n    );\r\n\r\n    const groupID = data.group ? data.group : 0;\r\n    const onlyActive = data.gradeOnlyActiveUsers;\r\n\r\n    await Grader.launch(\r\n        getUsersForCmidFunction(data.cmid, groupID, onlyActive),\r\n        getContentForUserIdFunction(data.cmid, data.experimentalDisplayMode == \"1\"),\r\n        gradingPanelFunctions.getter,\r\n        gradingPanelFunctions.setter,\r\n        {\r\n            groupid: data.groupid,\r\n            initialUserId: data.initialuserid,\r\n            moduleName: data.name,\r\n            courseName: data.courseName,\r\n            courseUrl: relativeUrl('/course/view.php', {id: data.courseId}),\r\n            sendStudentNotifications: data.sendStudentNotifications,\r\n            focusOnClose,\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * Launch the Grader.\r\n *\r\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\r\n * @param {object} param\r\n * @param {bool} [param.focusOnClose=null]\r\n */\r\nconst launchViewGrading = async(rootNode, {\r\n    focusOnClose = null,\r\n} = {}) => {\r\n    const data = rootNode.dataset;\r\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\r\n        'mod_forum',\r\n        data.contextid,\r\n        data.gradingComponent,\r\n        data.gradingComponentSubtype,\r\n        data.gradableItemtype\r\n    );\r\n\r\n    await Grader.view(\r\n        gradingPanelFunctions.getter,\r\n        data.userid,\r\n        data.name,\r\n        {\r\n            focusOnClose,\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * Register listeners to launch the grading panel.\r\n */\r\nexport const registerLaunchListeners = () => {\r\n    document.addEventListener('click', async(e) => {\r\n        if (e.target.matches(Selectors.launch)) {\r\n            const rootNode = findGradableNode(e.target);\r\n\r\n            if (!rootNode) {\r\n                throw Error('Unable to find a gradable item');\r\n            }\r\n\r\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\r\n                // Note: The preventDefault must be before any async function calls because the function becomes async\r\n                // at that point and the default action is implemented.\r\n                e.preventDefault();\r\n                try {\r\n                    await launchWholeForumGrading(rootNode, {\r\n                        focusOnClose: e.target,\r\n                    });\r\n                } catch (error) {\r\n                    Notification.exception(error);\r\n                }\r\n            } else {\r\n                throw Error('Unable to find a valid gradable item');\r\n            }\r\n        }\r\n        if (e.target.matches(Selectors.viewGrade)) {\r\n            e.preventDefault();\r\n            const rootNode = findGradableNode(e.target);\r\n\r\n            if (!rootNode) {\r\n                throw Error('Unable to find a gradable item');\r\n            }\r\n\r\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\r\n                // Note: The preventDefault must be before any async function calls because the function becomes async\r\n                // at that point and the default action is implemented.\r\n                e.preventDefault();\r\n                try {\r\n                    await launchViewGrading(rootNode, {\r\n                        focusOnClose: e.target,\r\n                    });\r\n                } catch (error) {\r\n                    Notification.exception(error);\r\n                }\r\n            } else {\r\n                throw Error('Unable to find a valid gradable item');\r\n            }\r\n        }\r\n    });\r\n};\r\n"],"names":["templateNames","getContentForUserIdFunction","cmid","experimentalDisplayMode","userid","Repository","getDiscussionByUserID","then","context","discussions","map","discussionPostMapper","experimentaldisplaymode","Templates","render","catch","Notification","exception","getUsersForCmidFunction","groupID","onlyActive","async","CourseRepository","getUsersFromCourseModuleID","users","findGradableNode","node","closest","Selectors","gradableItem","discussion","parentMap","Map","posts","parentposts","forEach","post","set","id","userPosts","userposts","readonly","hasreplies","replies","parent","parentid","get","parentauthorname","author","fullname","document","addEventListener","e","target","matches","launch","rootNode","Error","gradableItems","wholeForum","preventDefault","focusOnClose","data","dataset","gradingPanelFunctions","Grader","getGradingPanelFunctions","contextid","gradingComponent","gradingComponentSubtype","gradableItemtype","group","gradeOnlyActiveUsers","getter","setter","groupid","initialUserId","initialuserid","moduleName","name","courseName","courseUrl","courseId","sendStudentNotifications","launchWholeForumGrading","error","viewGrade","view","launchViewGrading"],"mappings":";;;;;;;mYA8BMA,4BACa,2CAUbC,4BAA8B,CAACC,KAAMC,0BAA6BC,QAM7DC,oBAAWC,sBAAsBF,OAAQF,MAC3CK,MAAKC,UAEFA,QAAQC,YAAcD,QAAQC,YAAYC,IAAIC,sBAC9CH,QAAQI,0BAA0BT,wBAE3BU,mBAAUC,OAAOd,4BAA6BQ,YAExDO,MAAMC,sBAAaC,WAYtBC,wBAA0B,CAAChB,KAAMiB,QAASC,aAAeC,gBACrCC,qBAAiBC,2BAA2BrB,KAAMiB,QAASC,aAElEI,MAIbC,iBAAmBC,MAAQA,KAAKC,QAAQC,UAAUC,cAQlDlB,qBAAwBmB,mBAEpBC,UAAY,IAAIC,IACtBF,WAAWG,MAAMC,YAAYC,SAAQC,MAAQL,UAAUM,IAAID,KAAKE,GAAIF,cAC9DG,UAAYT,WAAWG,MAAMO,UAAU9B,KAAI0B,OAC7CA,KAAKK,UAAW,EAChBL,KAAKM,YAAa,EAClBN,KAAKO,QAAU,SAETC,OAASR,KAAKS,SAAWd,UAAUe,IAAIV,KAAKS,UAAY,YAC1DD,SACAA,OAAOF,YAAa,EACpBE,OAAOD,QAAU,GACjBC,OAAOH,UAAW,EAClBL,KAAKW,iBAAmBH,OAAOI,OAAOC,UAGnC,CACHL,OAAAA,OACAR,KAAAA,eAID,IACAN,WACHG,MAAOM,6CA2EwB,KACnCW,SAASC,iBAAiB,SAAS9B,MAAAA,OAC3B+B,EAAEC,OAAOC,QAAQ1B,UAAU2B,QAAS,OAC9BC,SAAW/B,iBAAiB2B,EAAEC,YAE/BG,eACKC,MAAM,sCAGZD,SAASF,QAAQ1B,UAAU8B,cAAcC,kBAYnCF,MAAM,wCATZL,EAAEQ,2BA5EcvC,eAAMmC,cAAUK,aAC5CA,aAAe,6DACf,SACMC,KAAON,SAASO,QAChBC,4BAA8BC,OAAOC,yBACvC,YACAJ,KAAKK,UACLL,KAAKM,iBACLN,KAAKO,wBACLP,KAAKQ,kBAGHnD,QAAU2C,KAAKS,MAAQT,KAAKS,MAAQ,EACpCnD,WAAa0C,KAAKU,2BAElBP,OAAOV,OACTrC,wBAAwB4C,KAAK5D,KAAMiB,QAASC,YAC5CnB,4BAA4B6D,KAAK5D,KAAsC,KAAhC4D,KAAK3D,yBAC5C6D,sBAAsBS,OACtBT,sBAAsBU,OACtB,CACIC,QAASb,KAAKa,QACdC,cAAed,KAAKe,cACpBC,WAAYhB,KAAKiB,KACjBC,WAAYlB,KAAKkB,WACjBC,WAAW,oBAAY,mBAAoB,CAAC3C,GAAIwB,KAAKoB,WACrDC,yBAA0BrB,KAAKqB,yBAC/BtB,aAAAA,eAmDcuB,CAAwB5B,SAAU,CACpCK,aAAcT,EAAEC,SAEtB,MAAOgC,6BACQpE,UAAUoE,WAM/BjC,EAAEC,OAAOC,QAAQ1B,UAAU0D,WAAY,CACvClC,EAAEQ,uBACIJ,SAAW/B,iBAAiB2B,EAAEC,YAE/BG,eACKC,MAAM,sCAGZD,SAASF,QAAQ1B,UAAU8B,cAAcC,kBAYnCF,MAAM,wCATZL,EAAEQ,2BA5DQvC,eAAMmC,cAAUK,aACtCA,aAAe,6DACf,SACMC,KAAON,SAASO,QAChBC,4BAA8BC,OAAOC,yBACvC,YACAJ,KAAKK,UACLL,KAAKM,iBACLN,KAAKO,wBACLP,KAAKQ,wBAGHL,OAAOsB,KACTvB,sBAAsBS,OACtBX,KAAK1D,OACL0D,KAAKiB,KACL,CACIlB,aAAAA,eA6Cc2B,CAAkBhC,SAAU,CAC9BK,aAAcT,EAAEC,SAEtB,MAAOgC,6BACQpE,UAAUoE"}