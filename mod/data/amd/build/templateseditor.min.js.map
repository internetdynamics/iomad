{"version":3,"file":"templateseditor.min.js","sources":["../src/templateseditor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript module to control the template editor.\r\n *\r\n * @module      mod_data/templateseditor\r\n * @copyright   2021 Mihail Geshoski <mihail@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {get_string as getString} from 'core/str';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {relativeUrl} from 'core/url';\r\nimport {saveCancel} from 'core/notification';\r\nimport Templates from 'core/templates';\r\n\r\nprefetchStrings('admin', ['confirmation']);\r\nprefetchStrings('mod_data', [\r\n    'resettemplateconfirmtitle',\r\n    'enabletemplateeditorcheck',\r\n    'editorenable'\r\n]);\r\nprefetchStrings('core', [\r\n    'reset',\r\n]);\r\n\r\n/**\r\n * Template editor constants.\r\n */\r\nconst selectors = {\r\n    toggleTemplateEditor: 'input[name=\"useeditor\"]',\r\n    resetTemplateAction: '[data-action=\"resettemplate\"]',\r\n    resetTemplate: 'input[name=\"defaultform\"]',\r\n    resetAllTemplates: 'input[name=\"resetall\"]',\r\n    resetAllCheck: 'input[name=\"resetallcheck\"]',\r\n    editForm: '#edittemplateform',\r\n};\r\n\r\n/**\r\n * Register event listeners for the module.\r\n *\r\n * @param {Number} instanceId The database ID\r\n * @param {string} mode The template mode\r\n */\r\nconst registerEventListeners = (instanceId, mode) => {\r\n    registerResetButton(mode);\r\n    registerEditorToggler(instanceId, mode);\r\n};\r\n\r\nconst registerResetButton = (mode) => {\r\n    const editForm = document.querySelector(selectors.editForm);\r\n    const resetTemplate = document.querySelector(selectors.resetTemplate);\r\n    const resetAllTemplates = document.querySelector(selectors.resetAllTemplates);\r\n    const resetTemplateAction = document.querySelector(selectors.resetTemplateAction);\r\n\r\n    if (!resetTemplateAction || !resetTemplate || !editForm) {\r\n        return;\r\n    }\r\n    prefetchStrings('mod_data', [\r\n        mode\r\n    ]);\r\n    resetTemplateAction.addEventListener('click', async(event) => {\r\n        event.preventDefault();\r\n        const params = {\r\n            resetallname: \"resetallcheck\",\r\n            templatename: await getString(mode, 'mod_data'),\r\n        };\r\n        saveCancel(\r\n            getString('resettemplateconfirmtitle', 'mod_data'),\r\n            Templates.render('mod_data/template_editor_resetmodal', params),\r\n            getString('reset', 'core'),\r\n            () => {\r\n                resetTemplate.value = \"true\";\r\n                editForm.submit();\r\n            },\r\n            null,\r\n            {triggerElement: event.target}\r\n        );\r\n    });\r\n\r\n    // The reset all checkbox is inside a modal so we need to capture at document level.\r\n    if (!resetAllTemplates) {\r\n        return;\r\n    }\r\n    document.addEventListener('change', (event) => {\r\n        if (event.target.matches(selectors.resetAllCheck)) {\r\n            resetAllTemplates.value = (event.target.checked) ? \"true\" : \"\";\r\n        }\r\n    });\r\n};\r\n\r\nconst registerEditorToggler = (instanceId, mode) => {\r\n    const toggleTemplateEditor = document.querySelector(selectors.toggleTemplateEditor);\r\n\r\n    if (!toggleTemplateEditor) {\r\n        return;\r\n    }\r\n\r\n    toggleTemplateEditor.addEventListener('click', async(event) => {\r\n        event.preventDefault();\r\n        // Whether the event action attempts to enable or disable the template editor.\r\n        const enableTemplateEditor = event.target.checked;\r\n\r\n        if (enableTemplateEditor) {\r\n            // Display a confirmation dialog before enabling the template editor.\r\n            saveCancel(\r\n                getString('confirmation', 'admin'),\r\n                getString('enabletemplateeditorcheck', 'mod_data'),\r\n                getString('editorenable', 'mod_data'),\r\n                () => {\r\n                    window.location = relativeUrl('/mod/data/templates.php', {d: instanceId, mode: mode, useeditor: true});\r\n                },\r\n                null,\r\n                {triggerElement: event.target}\r\n            );\r\n        } else {\r\n            window.location = relativeUrl('/mod/data/templates.php', {d: instanceId, mode: mode, useeditor: false});\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Initialize the module.\r\n *\r\n * @param {int} instanceId The database ID\r\n * @param {string} mode The template mode\r\n */\r\nexport const init = (instanceId, mode) => {\r\n    registerEventListeners(instanceId, mode);\r\n};\r\n"],"names":["selectors","registerResetButton","mode","editForm","document","querySelector","resetTemplate","resetAllTemplates","resetTemplateAction","addEventListener","async","event","preventDefault","params","resetallname","templatename","Templates","render","value","submit","triggerElement","target","matches","checked","registerEditorToggler","instanceId","toggleTemplateEditor","window","location","d","useeditor","registerEventListeners"],"mappings":";;;;;;;8KA6BgB,QAAS,CAAC,+CACV,WAAY,CACxB,4BACA,4BACA,+CAEY,OAAQ,CACpB,gBAMEA,+BACoB,0BADpBA,8BAEmB,gCAFnBA,wBAGa,4BAHbA,4BAIiB,yBAJjBA,wBAKa,8BALbA,mBAMQ,oBAcRC,oBAAuBC,aACnBC,SAAWC,SAASC,cAAcL,oBAClCM,cAAgBF,SAASC,cAAcL,yBACvCO,kBAAoBH,SAASC,cAAcL,6BAC3CQ,oBAAsBJ,SAASC,cAAcL,+BAE9CQ,qBAAwBF,eAAkBH,yCAG/B,WAAY,CACxBD,OAEJM,oBAAoBC,iBAAiB,SAASC,MAAAA,QAC1CC,MAAMC,uBACAC,OAAS,CACXC,aAAc,gBACdC,mBAAoB,mBAAUb,KAAM,2CAGpC,mBAAU,4BAA6B,YACvCc,mBAAUC,OAAO,sCAAuCJ,SACxD,mBAAU,QAAS,SACnB,KACIP,cAAcY,MAAQ,OACtBf,SAASgB,WAEb,KACA,CAACC,eAAgBT,MAAMU,YAK1Bd,mBAGLH,SAASK,iBAAiB,UAAWE,QAC7BA,MAAMU,OAAOC,QAAQtB,2BACrBO,kBAAkBW,MAASP,MAAMU,OAAOE,QAAW,OAAS,SAKlEC,sBAAwB,CAACC,WAAYvB,cACjCwB,qBAAuBtB,SAASC,cAAcL,gCAE/C0B,sBAILA,qBAAqBjB,iBAAiB,SAASC,MAAAA,QAC3CC,MAAMC,iBAEuBD,MAAMU,OAAOE,sCAKlC,mBAAU,eAAgB,UAC1B,mBAAU,4BAA6B,aACvC,mBAAU,eAAgB,aAC1B,KACII,OAAOC,UAAW,oBAAY,0BAA2B,CAACC,EAAGJ,WAAYvB,KAAMA,KAAM4B,WAAW,MAEpG,KACA,CAACV,eAAgBT,MAAMU,SAG3BM,OAAOC,UAAW,oBAAY,0BAA2B,CAACC,EAAGJ,WAAYvB,KAAMA,KAAM4B,WAAW,sBAWxF,CAACL,WAAYvB,QAnFF,EAACuB,WAAYvB,QACxCD,oBAAoBC,MACpBsB,sBAAsBC,WAAYvB,OAkFlC6B,CAAuBN,WAAYvB"}