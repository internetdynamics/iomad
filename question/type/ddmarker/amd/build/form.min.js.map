{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This class provides the enhancements to the drag-drop marker editing form.\r\n *\r\n * @module     qtype_ddmarker/form\r\n * @copyright  2018 The Open University\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery', 'core/dragdrop', 'qtype_ddmarker/shapes'], function($, dragDrop, Shapes) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Create the manager object that deals with keeping everything synchronised for one drop zone.\r\n     *\r\n     * @param {int} dropzoneNo the index of this drop zone in the form. 0, 1, ....\r\n     * @constructor\r\n     */\r\n    function DropZoneManager(dropzoneNo) {\r\n        this.dropzoneNo = dropzoneNo;\r\n        this.svgEl = null;\r\n\r\n        this.shape = Shapes.make(this.getShapeType(), this.getLabel());\r\n        this.updateCoordinatesFromForm();\r\n    }\r\n\r\n    /**\r\n     * Update the coordinates from a particular string.\r\n     *\r\n     * @param {SVGElement} [svg] the SVG element that is the preview.\r\n     */\r\n    DropZoneManager.prototype.updateCoordinatesFromForm = function(svg) {\r\n        var coordinates = this.getCoordinates(),\r\n            currentNumPoints = this.shape.getType() === 'polygon' && this.shape.points.length;\r\n        if (this.shape.getCoordinates() === coordinates) {\r\n            return;\r\n        }\r\n        // We don't need to scale the shape for editing form.\r\n        if (!this.shape.parse(coordinates, 1)) {\r\n            // Invalid coordinates. Don't update the preview.\r\n            return;\r\n        }\r\n\r\n        if (this.shape.getType() === 'polygon' && currentNumPoints !== this.shape.points.length) {\r\n            // Polygon, and size has changed.\r\n            var currentyActive = this.isActive();\r\n            this.removeFromSvg();\r\n            if (svg) {\r\n                this.addToSvg(svg);\r\n                if (currentyActive) {\r\n                    this.setActive();\r\n                }\r\n            }\r\n        } else {\r\n            // Simple update.\r\n            this.updateSvgEl();\r\n        }\r\n        // Update the rounded coordinates if needed.\r\n        this.setCoordinatesInForm();\r\n    };\r\n\r\n    /**\r\n     * Update the label.\r\n     */\r\n    DropZoneManager.prototype.updateLabel = function() {\r\n        var label = this.getLabel();\r\n        if (this.shape.label !== label) {\r\n            this.shape.label = label;\r\n            this.updateSvgEl();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handle if the type of shape has changed.\r\n     *\r\n     * @param {SVGElement} [svg] an SVG element to add this new shape to.\r\n     */\r\n    DropZoneManager.prototype.changeShape = function(svg) {\r\n        var newShapeType = this.getShapeType(),\r\n            currentyActive = this.isActive();\r\n\r\n        if (newShapeType === this.shape.getType()) {\r\n            return;\r\n        }\r\n\r\n        // It has really changed.\r\n        this.removeFromSvg();\r\n        this.shape = Shapes.getSimilar(newShapeType, this.shape);\r\n        if (svg) {\r\n            this.addToSvg(svg);\r\n            if (currentyActive) {\r\n                this.setActive();\r\n            }\r\n        }\r\n        this.setCoordinatesInForm();\r\n    };\r\n\r\n    /**\r\n     * Add this drop zone to an SVG graphic.\r\n     *\r\n     * @param {SVGElement} svg the SVG image to which to add this drop zone.\r\n     */\r\n    DropZoneManager.prototype.addToSvg = function(svg) {\r\n        if (this.svgEl !== null) {\r\n            throw new Error('this.svgEl already set');\r\n        }\r\n        this.svgEl = this.shape.makeSvg(svg);\r\n        if (!this.svgEl) {\r\n            return;\r\n        }\r\n        this.svgEl.setAttribute('class', 'dropzone');\r\n        this.svgEl.setAttribute('data-dropzone-no', this.dropzoneNo);\r\n\r\n        // Add handles.\r\n        var handles = this.shape.getHandlePositions();\r\n        if (handles === null) {\r\n            return;\r\n        }\r\n\r\n        var moveHandle = Shapes.createSvgElement(this.svgEl, 'circle');\r\n        moveHandle.setAttribute('cx', handles.moveHandle.x);\r\n        moveHandle.setAttribute('cy', handles.moveHandle.y);\r\n        moveHandle.setAttribute('r', 7);\r\n        moveHandle.setAttribute('class', 'handle move');\r\n\r\n        for (var i = 0; i < handles.editHandles.length; ++i) {\r\n            this.makeEditHandle(i, handles.editHandles[i]);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add a new edit handle.\r\n     *\r\n     * @param {int} index the handle index.\r\n     * @param {Point} point the point at which to add the handle.\r\n     */\r\n    DropZoneManager.prototype.makeEditHandle = function(index, point) {\r\n        var editHandle = Shapes.createSvgElement(this.svgEl, 'rect');\r\n        editHandle.setAttribute('x', point.x - 6);\r\n        editHandle.setAttribute('y', point.y - 6);\r\n        editHandle.setAttribute('width', 11);\r\n        editHandle.setAttribute('height', 11);\r\n        editHandle.setAttribute('class', 'handle edit');\r\n        editHandle.setAttribute('data-edit-handle-no', index);\r\n    };\r\n\r\n    /**\r\n     * Remove this drop zone from an SVG image.\r\n     */\r\n    DropZoneManager.prototype.removeFromSvg = function() {\r\n        if (this.svgEl !== null) {\r\n            this.svgEl.parentNode.removeChild(this.svgEl);\r\n            this.svgEl = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update the shape of this drop zone (but not type) in an SVG image.\r\n     */\r\n    DropZoneManager.prototype.updateSvgEl = function() {\r\n        if (this.svgEl === null) {\r\n            return;\r\n        }\r\n\r\n        this.shape.updateSvg(this.svgEl);\r\n\r\n        // Adjust handles.\r\n        var handles = this.shape.getHandlePositions();\r\n        if (handles === null) {\r\n            return;\r\n        }\r\n\r\n        // Move handle.\r\n        // The shape + its label are the first two children of svgEl.\r\n        // Then come the move handle followed by the edit handles.\r\n        this.svgEl.childNodes[2].setAttribute('cx', handles.moveHandle.x);\r\n        this.svgEl.childNodes[2].setAttribute('cy', handles.moveHandle.y);\r\n\r\n        // Edit handles.\r\n        for (var i = 0; i < handles.editHandles.length; ++i) {\r\n            this.svgEl.childNodes[3 + i].setAttribute('x', handles.editHandles[i].x - 6);\r\n            this.svgEl.childNodes[3 + i].setAttribute('y', handles.editHandles[i].y - 6);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Find out of this drop zone is currently being edited.\r\n     *\r\n     * @return {boolean} true if it is.\r\n     */\r\n    DropZoneManager.prototype.isActive = function() {\r\n        return this.svgEl !== null && this.svgEl.getAttribute('class').match(/\\bactive\\b/);\r\n    };\r\n\r\n    /**\r\n     * Set this drop zone as being edited.\r\n     */\r\n    DropZoneManager.prototype.setActive = function() {\r\n        // Move this one to last, so that it is always on top.\r\n        // (Otherwise the handles may not be able to receive events.)\r\n        var parent = this.svgEl.parentNode;\r\n        parent.removeChild(this.svgEl);\r\n        parent.appendChild(this.svgEl);\r\n        this.svgEl.setAttribute('class', this.svgEl.getAttribute('class') + ' active');\r\n    };\r\n\r\n    /**\r\n     * Set the coordinates in the form to match the current shape.\r\n     */\r\n    DropZoneManager.prototype.setCoordinatesInForm = function() {\r\n        dragDropForm.form.setFormValue('drops', [this.dropzoneNo, 'coords'], this.shape.getCoordinates());\r\n    };\r\n\r\n    /**\r\n     * Returns the coordinates for a drop zone from the text input in the form.\r\n     * @returns {string} the coordinates.\r\n     */\r\n    DropZoneManager.prototype.getCoordinates = function() {\r\n        return dragDropForm.form.getFormValue('drops', [this.dropzoneNo, 'coords']).replace(/\\s*/g, '');\r\n    };\r\n\r\n    /**\r\n     * Returns the selected marker number from the dropdown in the form.\r\n     * @returns {int} choice number.\r\n     */\r\n    DropZoneManager.prototype.getChoiceNo = function() {\r\n        return dragDropForm.form.getFormValue('drops', [this.dropzoneNo, 'choice']);\r\n    };\r\n\r\n    /**\r\n     * Returns the selected marker number from the dropdown in the form.\r\n     * @returns {String} marker label text.\r\n     */\r\n    DropZoneManager.prototype.getLabel = function() {\r\n        return dragDropForm.form.getMarkerText(this.getChoiceNo());\r\n    };\r\n\r\n\r\n    /**\r\n     * Returns the selected type of shape in the form.\r\n     * @returns {String} 'circle', 'rectangle' or 'polygon'.\r\n     */\r\n    DropZoneManager.prototype.getShapeType = function() {\r\n        return dragDropForm.form.getFormValue('drops', [this.dropzoneNo, 'shape']);\r\n    };\r\n\r\n    /**\r\n     * Start responding to dragging the move handle.\r\n     * @param {Event} e Event object\r\n     */\r\n    DropZoneManager.prototype.handleMove = function(e) {\r\n        var info = dragDrop.prepare(e);\r\n        if (!info.start) {\r\n            return;\r\n        }\r\n\r\n        var movingDropZone = this,\r\n                lastX = info.x,\r\n                lastY = info.y,\r\n                dragProxy = this.makeDragProxy(info.x, info.y),\r\n                bgImg = $('fieldset#id_previewareaheader .dropbackground'),\r\n                maxX = bgImg.width(),\r\n                maxY = bgImg.height();\r\n\r\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\r\n            movingDropZone.shape.move(pageX - lastX, pageY - lastY, maxX, maxY);\r\n            lastX = pageX;\r\n            lastY = pageY;\r\n            movingDropZone.updateSvgEl();\r\n            movingDropZone.setCoordinatesInForm();\r\n        }, function() {\r\n            document.body.removeChild(dragProxy);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Start responding to dragging the move handle.\r\n     * @param {Event} e Event object\r\n     * @param {int} handleIndex\r\n     * @param {SVGElement} [svg] an SVG element to add this new shape to.\r\n     */\r\n    DropZoneManager.prototype.handleEdit = function(e, handleIndex, svg) {\r\n        var info = dragDrop.prepare(e);\r\n        if (!info.start) {\r\n            return;\r\n        }\r\n\r\n        // For polygons, CTRL + drag adds a new point.\r\n        if (this.shape.getType() === 'polygon' && (e.ctrlKey || e.metaKey)) {\r\n            this.shape.addNewPointAfter(handleIndex);\r\n            this.removeFromSvg();\r\n            this.addToSvg(svg);\r\n            this.setActive();\r\n        }\r\n\r\n        var changingDropZone = this,\r\n            lastX = info.x,\r\n            lastY = info.y,\r\n            dragProxy = this.makeDragProxy(info.x, info.y),\r\n            bgImg = $('fieldset#id_previewareaheader .dropbackground'),\r\n            maxX = bgImg.width(),\r\n            maxY = bgImg.height();\r\n\r\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\r\n            changingDropZone.shape.edit(handleIndex, pageX - lastX, pageY - lastY, maxX, maxY);\r\n            lastX = pageX;\r\n            lastY = pageY;\r\n            changingDropZone.updateSvgEl();\r\n            changingDropZone.setCoordinatesInForm();\r\n        }, function() {\r\n            document.body.removeChild(dragProxy);\r\n            changingDropZone.shape.normalizeShape();\r\n            changingDropZone.updateSvgEl();\r\n            changingDropZone.setCoordinatesInForm();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Make an invisible drag proxy.\r\n     *\r\n     * @param {int} x x position .\r\n     * @param {int} y y position.\r\n     * @returns {HTMLElement} the drag proxy.\r\n     */\r\n    DropZoneManager.prototype.makeDragProxy = function(x, y) {\r\n        var dragProxy = document.createElement('div');\r\n        dragProxy.style.position = 'absolute';\r\n        dragProxy.style.top = y + 'px';\r\n        dragProxy.style.left = x + 'px';\r\n        dragProxy.style.width = '1px';\r\n        dragProxy.style.height = '1px';\r\n        document.body.appendChild(dragProxy);\r\n        return dragProxy;\r\n    };\r\n\r\n    /**\r\n     * Singleton object for managing all the parts of the form.\r\n     */\r\n    var dragDropForm = {\r\n\r\n        /**\r\n         * @var {object} for interacting with the file pickers.\r\n         */\r\n        fp: null, // Object containing functions associated with the file picker.\r\n\r\n        /**\r\n         * @var {int} the number of drop-zones on the form.\r\n         */\r\n        noDropZones: null,\r\n\r\n        /**\r\n         * @var {DropZoneManager[]} the drop zones in the preview, indexed by drop zone number.\r\n         */\r\n        dropZones: [],\r\n\r\n        /**\r\n         * Initialise the form.\r\n         */\r\n        init: function() {\r\n            dragDropForm.fp = dragDropForm.filePickers();\r\n            dragDropForm.noDropZones = dragDropForm.form.getFormValue('nodropzone', []);\r\n            dragDropForm.setOptionsForDragItemSelectors();\r\n            dragDropForm.createShapes();\r\n            dragDropForm.setupEventHandlers();\r\n            dragDropForm.waitForFilePickerToInitialise();\r\n        },\r\n\r\n        /**\r\n         * Add html for the preview area.\r\n         */\r\n        setupPreviewArea: function() {\r\n            $('fieldset#id_previewareaheader div.fcontainer').append(\r\n                '<div class=\"ddarea que ddmarker\">' +\r\n                '   <div id=\"ddm-droparea\" class=\"droparea\">' +\r\n                '       <img class=\"dropbackground\" />' +\r\n                '       <div id=\"ddm-dropzone\" class=\"dropzones\">' +\r\n                '       </div>' +\r\n                '   </div>' +\r\n                '</div>');\r\n        },\r\n\r\n        /**\r\n         * When a new marker is added this function updates the Marker dropdown controls in Drop zones.\r\n         */\r\n        setOptionsForDragItemSelectors: function() {\r\n            var dragItemsOptions = {'0': ''};\r\n            var noItems = dragDropForm.form.getFormValue('noitems', []);\r\n            var selectedValues = [];\r\n            var selector;\r\n            var i, label;\r\n            for (i = 1; i <= noItems; i++) {\r\n                label = dragDropForm.form.getMarkerText(i);\r\n                if (label !== \"\") {\r\n                    // HTML escape the label.\r\n                    dragItemsOptions[i] = $('<div/>').text(label).html();\r\n                }\r\n            }\r\n            // Get all the currently selected drags for each drop.\r\n            for (i = 0; i < dragDropForm.noDropZones; i++) {\r\n                selector = $('#id_drops_' + i + '_choice');\r\n                selectedValues[i] = Number(selector.val());\r\n            }\r\n            for (i = 0; i < dragDropForm.noDropZones; i++) {\r\n                selector = $('#id_drops_' + i + '_choice');\r\n                // Remove all options for drag choice.\r\n                selector.find('option').remove();\r\n                // And recreate the options.\r\n                for (var value in dragItemsOptions) {\r\n                    value = Number(value);\r\n                    var option = '<option value=\"' + value + '\">' + dragItemsOptions[value] + '</option>';\r\n                    selector.append(option);\r\n                    var optionnode = selector.find('option[value=\"' + value + '\"]');\r\n\r\n\r\n                    if (value === 0) {\r\n                        continue; // The 'no item' option is always selectable.\r\n                    }\r\n\r\n                    // Is this the currently selected value?\r\n                    if (value === selectedValues[i]) {\r\n                        optionnode.attr('selected', true);\r\n                        continue; // If it s selected, we must leave it enabled.\r\n                    }\r\n\r\n                    // Count how many times it is used, and if necessary, disable.\r\n                    var noofdrags = dragDropForm.form.getFormValue('drags', [value - 1, 'noofdrags']);\r\n                    if (Number(noofdrags) === 0) { // 'noofdrags === 0' means infinite.\r\n                        continue; // Nothing to check.\r\n                    }\r\n\r\n                    // Go through all selected values in drop downs.\r\n                    for (var k in selectedValues) {\r\n                        if (Number(selectedValues[k]) !== value) {\r\n                            continue;\r\n                        }\r\n\r\n                        // Count down 'noofdrags' and if reach zero then set disabled option for this drag item.\r\n                        if (Number(noofdrags) === 1) {\r\n                            optionnode.attr('disabled', true);\r\n                            break;\r\n                        } else {\r\n                            noofdrags--;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (dragDropForm.dropZones.length > 0) {\r\n                    dragDropForm.dropZones[i].updateLabel();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Create the shape representation of each dropZone.\r\n         */\r\n        createShapes: function() {\r\n            for (var dropzoneNo = 0; dropzoneNo < dragDropForm.noDropZones; dropzoneNo++) {\r\n                dragDropForm.dropZones[dropzoneNo] = new DropZoneManager(dropzoneNo);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Events linked to form actions.\r\n         */\r\n        setupEventHandlers: function() {\r\n            // Changes to labels in the Markers section.\r\n            $('fieldset#id_draggableitemheader').on('change input', 'input, select', function() {\r\n                dragDropForm.setOptionsForDragItemSelectors();\r\n            });\r\n\r\n            // Changes to Drop zones section: shape, coordinates and marker.\r\n            $('fieldset#id_dropzoneheader').on('change input', 'input, select', function(e) {\r\n                var ids = e.currentTarget.name.match(/^drops\\[(\\d+)]\\[([a-z]*)]$/);\r\n                if (!ids) {\r\n                    return;\r\n                }\r\n\r\n                var dropzoneNo = ids[1],\r\n                    inputType = ids[2],\r\n                    dropZone = dragDropForm.dropZones[dropzoneNo];\r\n\r\n                switch (inputType) {\r\n                    case 'shape':\r\n                        dropZone.changeShape(dragDropForm.form.getSvg());\r\n                        break;\r\n\r\n                    case 'coords':\r\n                        dropZone.updateCoordinatesFromForm(dragDropForm.form.getSvg());\r\n                        break;\r\n\r\n                    case 'choice':\r\n                        dropZone.updateLabel();\r\n                        break;\r\n                }\r\n            });\r\n\r\n            // Click to toggle graphical editing.\r\n            var previewArea = $('fieldset#id_previewareaheader');\r\n            previewArea.on('click', 'g.dropzone', function(e) {\r\n                var dropzoneNo = $(e.currentTarget).data('dropzone-no'),\r\n                    currentlyActive = dragDropForm.dropZones[dropzoneNo].isActive();\r\n\r\n                $(dragDropForm.form.getSvg()).find('.dropzone.active').removeClass('active');\r\n\r\n                if (!currentlyActive) {\r\n                    dragDropForm.dropZones[dropzoneNo].setActive();\r\n                }\r\n            });\r\n\r\n            // Drag start on a move handle.\r\n            previewArea.on('mousedown touchstart', '.dropzone .handle.move', function(e) {\r\n                var dropzoneNo = $(e.currentTarget).closest('g').data('dropzoneNo');\r\n\r\n                dragDropForm.dropZones[dropzoneNo].handleMove(e);\r\n            });\r\n\r\n            // Drag start on a move handle.\r\n            previewArea.on('mousedown touchstart', '.dropzone .handle.edit', function(e) {\r\n                var dropzoneNo = $(e.currentTarget).closest('g').data('dropzoneNo'),\r\n                    handleIndex = e.currentTarget.getAttribute('data-edit-handle-no');\r\n\r\n                dragDropForm.dropZones[dropzoneNo].handleEdit(e, handleIndex, dragDropForm.form.getSvg());\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Prevents adding drop zones until the preview background image is ready to load.\r\n         */\r\n        waitForFilePickerToInitialise: function() {\r\n            if (dragDropForm.fp.file('bgimage').href === null) {\r\n                // It would be better to use an onload or onchange event rather than this timeout.\r\n                // Unfortunately attempts to do this early are overwritten by filepicker during its loading.\r\n                setTimeout(dragDropForm.waitForFilePickerToInitialise, 1000);\r\n                return;\r\n            }\r\n\r\n            // From now on, when a new file gets loaded into the filepicker, update the preview.\r\n            // This is not in the setupEventHandlers section as it needs to be delayed until\r\n            // after filepicker's javascript has finished.\r\n            $('form.mform[data-qtype=\"ddmarker\"]').on('change', '#id_bgimage', dragDropForm.loadPreviewImage);\r\n\r\n            if ($('#ddm-droparea').length) {\r\n                dragDropForm.loadPreviewImage();\r\n            } else {\r\n                // Setup preview area when the background image is uploaded the first time.\r\n                dragDropForm.setupPreviewArea();\r\n                dragDropForm.loadPreviewImage();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Loads the preview background image.\r\n         */\r\n        loadPreviewImage: function() {\r\n            $('fieldset#id_previewareaheader .dropbackground')\r\n                    .one('load', dragDropForm.afterPreviewImageLoaded)\r\n                    .attr('src', dragDropForm.fp.file('bgimage').href);\r\n        },\r\n\r\n        /**\r\n         * Functions to run after background image loaded.\r\n         */\r\n        afterPreviewImageLoaded: function() {\r\n            var bgImg = $('fieldset#id_previewareaheader .dropbackground');\r\n            // Place the dropzone area over the background image (adding one to account for the border).\r\n            $('#ddm-dropzone').css('position', 'relative').css('top', (bgImg.height() + 1) * -1);\r\n            $('#ddm-droparea').css('height', bgImg.height() + 20);\r\n            dragDropForm.updateSvgDisplay();\r\n        },\r\n\r\n        /**\r\n         * Draws or re-draws all dropzones in the preview area based on form data.\r\n         * Call this function when there is a change in the form data.\r\n         */\r\n        updateSvgDisplay: function() {\r\n            var bgImg = $('fieldset#id_previewareaheader .dropbackground'),\r\n                dropzoneNo;\r\n\r\n            if (dragDropForm.form.getSvg()) {\r\n                // Already exists, just need to be updated.\r\n                for (dropzoneNo = 0; dropzoneNo < dragDropForm.noDropZones; dropzoneNo++) {\r\n                    dragDropForm.dropZones[dropzoneNo].updateSvgEl();\r\n                }\r\n\r\n            } else {\r\n                // Create.\r\n                $('#ddm-dropzone').html('<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"dropzones\" ' +\r\n                    'width=\"' + bgImg.outerWidth() + '\" ' +\r\n                    'height=\"' + bgImg.outerHeight() + '\"></svg>');\r\n                for (dropzoneNo = 0; dropzoneNo < dragDropForm.noDropZones; dropzoneNo++) {\r\n                    dragDropForm.dropZones[dropzoneNo].addToSvg(dragDropForm.form.getSvg());\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Helper to make it easy to work with form elements with names like \"drops[0][shape]\".\r\n         */\r\n        form: {\r\n            /**\r\n             * Returns the label text for a marker.\r\n             * @param {int} markerNo\r\n             * @returns {string} Marker text\r\n             */\r\n            getMarkerText: function(markerNo) {\r\n                if (Number(markerNo) !== 0) {\r\n                    var label = dragDropForm.form.getFormValue('drags', [markerNo - 1, 'label']);\r\n                    return label.replace(new RegExp(\"^\\\\s*(.*)\\\\s*$\"), \"$1\");\r\n                } else {\r\n                    return '';\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Get the SVG element, if there is one, otherwise return null.\r\n             *\r\n             * @returns {SVGElement|null} the SVG element or null.\r\n             */\r\n            getSvg: function() {\r\n                var svg = $('fieldset#id_previewareaheader svg');\r\n                if (svg.length === 0) {\r\n                    return null;\r\n                } else {\r\n                    return svg[0];\r\n                }\r\n            },\r\n\r\n            toNameWithIndex: function(name, indexes) {\r\n                var indexString = name;\r\n                for (var i = 0; i < indexes.length; i++) {\r\n                    indexString = indexString + '[' + indexes[i] + ']';\r\n                }\r\n                return indexString;\r\n            },\r\n\r\n            getEl: function(name, indexes) {\r\n                var form = $('form.mform[data-qtype=\"ddmarker\"]')[0];\r\n                return form.elements[this.toNameWithIndex(name, indexes)];\r\n            },\r\n\r\n            /**\r\n             * Helper to get the value of a form elements with name like \"drops[0][shape]\".\r\n             *\r\n             * @param {String} name the base name, e.g. 'drops'.\r\n             * @param {String[]} indexes the indexes, e.g. ['0', 'shape'].\r\n             * @return {String} the value of that field.\r\n             */\r\n            getFormValue: function(name, indexes) {\r\n                var el = this.getEl(name, indexes);\r\n                if (el.type === 'checkbox') {\r\n                    return el.checked;\r\n                } else {\r\n                    return el.value;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Helper to get the value of a form elements with name like \"drops[0][shape]\".\r\n             *\r\n             * @param {String} name the base name, e.g. 'drops'.\r\n             * @param {String[]} indexes the indexes, e.g. ['0', 'shape'].\r\n             * @param {String} value the value to set.\r\n             */\r\n            setFormValue: function(name, indexes, value) {\r\n                var el = this.getEl(name, indexes);\r\n                if (el.type === 'checkbox') {\r\n                    el.checked = value;\r\n                } else {\r\n                    el.value = value;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Utility to get the file name and url from the filepicker.\r\n         * @returns {Object} object containing functions {file, name}\r\n         */\r\n        filePickers: function() {\r\n            var draftItemIdsToName;\r\n            var nameToParentNode;\r\n            if (draftItemIdsToName === undefined) {\r\n                draftItemIdsToName = {};\r\n                nameToParentNode = {};\r\n                $('form.mform input.filepickerhidden').each(function(key, filepicker) {\r\n                    draftItemIdsToName[filepicker.value] = filepicker.name;\r\n                    nameToParentNode[filepicker.name] = filepicker.parentNode;\r\n                });\r\n            }\r\n            return {\r\n                file: function(name) {\r\n                    var fileAnchor = $(nameToParentNode[name]).find('div.filepicker-filelist a');\r\n                    if (fileAnchor.length) {\r\n                        return {href: fileAnchor.get(0).href, name: fileAnchor.get(0).innerHTML};\r\n                    } else {\r\n                        return {href: null, name: null};\r\n                    }\r\n                },\r\n                name: function(draftitemid) {\r\n                    return draftItemIdsToName[draftitemid];\r\n                }\r\n            };\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @alias module:qtype_ddmarker/form\r\n     */\r\n    return {\r\n        /**\r\n         * Initialise the form javascript features.\r\n         * @param {Object} maxBgimageSize object with two properties: width and height.\r\n         */\r\n        init: dragDropForm.init\r\n    };\r\n});\r\n"],"names":["define","$","dragDrop","Shapes","DropZoneManager","dropzoneNo","svgEl","shape","make","this","getShapeType","getLabel","updateCoordinatesFromForm","prototype","svg","coordinates","getCoordinates","currentNumPoints","getType","points","length","parse","currentyActive","isActive","removeFromSvg","addToSvg","setActive","updateSvgEl","setCoordinatesInForm","updateLabel","label","changeShape","newShapeType","getSimilar","Error","makeSvg","setAttribute","handles","getHandlePositions","moveHandle","createSvgElement","x","y","i","editHandles","makeEditHandle","index","point","editHandle","parentNode","removeChild","updateSvg","childNodes","getAttribute","match","parent","appendChild","dragDropForm","form","setFormValue","getFormValue","replace","getChoiceNo","getMarkerText","handleMove","e","info","prepare","start","movingDropZone","lastX","lastY","dragProxy","makeDragProxy","bgImg","maxX","width","maxY","height","pageX","pageY","move","document","body","handleEdit","handleIndex","ctrlKey","metaKey","addNewPointAfter","changingDropZone","edit","normalizeShape","createElement","style","position","top","left","fp","noDropZones","dropZones","init","filePickers","setOptionsForDragItemSelectors","createShapes","setupEventHandlers","waitForFilePickerToInitialise","setupPreviewArea","append","selector","dragItemsOptions","noItems","selectedValues","text","html","Number","val","value","find","remove","option","optionnode","noofdrags","k","attr","on","ids","currentTarget","name","inputType","dropZone","getSvg","previewArea","data","currentlyActive","removeClass","closest","file","href","loadPreviewImage","setTimeout","one","afterPreviewImageLoaded","css","updateSvgDisplay","outerWidth","outerHeight","markerNo","RegExp","toNameWithIndex","indexes","indexString","getEl","elements","el","type","checked","draftItemIdsToName","nameToParentNode","undefined","each","key","filepicker","fileAnchor","get","innerHTML","draftitemid"],"mappings":"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"}