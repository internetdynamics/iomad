{"version":3,"file":"ddwtos.min.js","sources":["../src/ddwtos.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JavaScript to make drag-drop into text questions work.\r\n *\r\n * Some vocabulary to help understand this code:\r\n *\r\n * The question text contains 'drops' - blanks into which the 'drags', the missing\r\n * words, can be put.\r\n *\r\n * The thing that can be moved into the drops are called 'drags'. There may be\r\n * multiple copies of the 'same' drag which does not really cause problems.\r\n * Each drag has a 'choice' number which is the value set on the drop's hidden\r\n * input when this drag is placed in a drop.\r\n *\r\n * These may be in separate 'groups', distinguished by colour.\r\n * Things can only interact with other things in the same group.\r\n * The groups are numbered from 1.\r\n *\r\n * The place where a given drag started from is called its 'home'.\r\n *\r\n * @module     qtype_ddwtos/ddwtos\r\n * @copyright  2018 The Open University\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.6\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/dragdrop',\r\n    'core/key_codes',\r\n    'core_form/changechecker'\r\n], function(\r\n    $,\r\n    dragDrop,\r\n    keys,\r\n    FormChangeChecker\r\n) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Object to handle one drag-drop into text question.\r\n     *\r\n     * @param {String} containerId id of the outer div for this question.\r\n     * @param {boolean} readOnly whether the question is being displayed read-only.\r\n     * @constructor\r\n     */\r\n    function DragDropToTextQuestion(containerId, readOnly) {\r\n        this.containerId = containerId;\r\n        this.questionAnswer = {};\r\n        if (readOnly) {\r\n            this.getRoot().addClass('qtype_ddwtos-readonly');\r\n        }\r\n        this.resizeAllDragsAndDrops();\r\n        this.cloneDrags();\r\n        this.positionDrags();\r\n    }\r\n\r\n    /**\r\n     * In each group, resize all the items to be the same size.\r\n     */\r\n    DragDropToTextQuestion.prototype.resizeAllDragsAndDrops = function() {\r\n        var thisQ = this;\r\n        this.getRoot().find('.answercontainer > div').each(function(i, node) {\r\n            thisQ.resizeAllDragsAndDropsInGroup(\r\n                thisQ.getClassnameNumericSuffix($(node), 'draggrouphomes'));\r\n        });\r\n    };\r\n\r\n    /**\r\n     * In a given group, set all the drags and drops to be the same size.\r\n     *\r\n     * @param {int} group the group number.\r\n     */\r\n    DragDropToTextQuestion.prototype.resizeAllDragsAndDropsInGroup = function(group) {\r\n        var thisQ = this,\r\n            dragHomes = this.getRoot().find('.draggrouphomes' + group + ' span.draghome'),\r\n            maxWidth = 0,\r\n            maxHeight = 0;\r\n\r\n        // Find the maximum size of any drag in this groups.\r\n        dragHomes.each(function(i, drag) {\r\n            maxWidth = Math.max(maxWidth, Math.ceil(drag.offsetWidth));\r\n            maxHeight = Math.max(maxHeight, Math.ceil(0 + drag.offsetHeight));\r\n        });\r\n\r\n        // The size we will want to set is a bit bigger than this.\r\n        maxWidth += 8;\r\n        maxHeight += 2;\r\n\r\n        // Set each drag home to that size.\r\n        dragHomes.each(function(i, drag) {\r\n            thisQ.setElementSize(drag, maxWidth, maxHeight);\r\n        });\r\n\r\n        // Set each drop to that size.\r\n        this.getRoot().find('span.drop.group' + group).each(function(i, drop) {\r\n            thisQ.setElementSize(drop, maxWidth, maxHeight);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Set a given DOM element to be a particular size.\r\n     *\r\n     * @param {HTMLElement} element\r\n     * @param {int} width\r\n     * @param {int} height\r\n     */\r\n    DragDropToTextQuestion.prototype.setElementSize = function(element, width, height) {\r\n        $(element).width(width).height(height).css('lineHeight', height + 'px');\r\n    };\r\n\r\n    /**\r\n     * Invisible 'drag homes' are output by the renderer. These have the same properties\r\n     * as the drag items but are invisible. We clone these invisible elements to make the\r\n     * actual drag items.\r\n     */\r\n    DragDropToTextQuestion.prototype.cloneDrags = function() {\r\n        var thisQ = this;\r\n        thisQ.getRoot().find('span.draghome').each(function(index, draghome) {\r\n            var drag = $(draghome);\r\n            var placeHolder = drag.clone();\r\n            placeHolder.removeClass();\r\n            placeHolder.addClass('draghome choice' +\r\n                thisQ.getChoice(drag) + ' group' +\r\n                thisQ.getGroup(drag) + ' dragplaceholder');\r\n            drag.before(placeHolder);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Update the position of drags.\r\n     */\r\n    DragDropToTextQuestion.prototype.positionDrags = function() {\r\n        var thisQ = this,\r\n            root = this.getRoot();\r\n\r\n        // First move all items back home.\r\n        root.find('span.draghome').not('.dragplaceholder').each(function(i, dragNode) {\r\n            var drag = $(dragNode),\r\n                currentPlace = thisQ.getClassnameNumericSuffix(drag, 'inplace');\r\n            drag.addClass('unplaced')\r\n                .removeClass('placed');\r\n            drag.removeAttr('tabindex');\r\n            if (currentPlace !== null) {\r\n                drag.removeClass('inplace' + currentPlace);\r\n            }\r\n        });\r\n\r\n        // Then place the once that should be placed.\r\n        root.find('input.placeinput').each(function(i, inputNode) {\r\n            var input = $(inputNode),\r\n                choice = input.val(),\r\n                place = thisQ.getPlace(input);\r\n\r\n            // Record the last known position of the drop.\r\n            var drop = root.find('.drop.place' + place),\r\n                dropPosition = drop.offset();\r\n            drop.data('prev-top', dropPosition.top).data('prev-left', dropPosition.left);\r\n\r\n            if (choice === '0') {\r\n                // No item in this place.\r\n                return;\r\n            }\r\n\r\n            // Get the unplaced drag.\r\n            var unplacedDrag = thisQ.getUnplacedChoice(thisQ.getGroup(input), choice);\r\n            // Get the clone of the drag.\r\n            var hiddenDrag = thisQ.getDragClone(unplacedDrag);\r\n            if (hiddenDrag.length) {\r\n                if (unplacedDrag.hasClass('infinite')) {\r\n                    var noOfDrags = thisQ.noOfDropsInGroup(thisQ.getGroup(unplacedDrag));\r\n                    var cloneDrags = thisQ.getInfiniteDragClones(unplacedDrag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = unplacedDrag.clone();\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                }\r\n            }\r\n            // Send the drag to drop.\r\n            thisQ.sendDragToDrop(thisQ.getUnplacedChoice(thisQ.getGroup(input), choice), drop);\r\n        });\r\n\r\n        // Save the question answer.\r\n        thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\r\n    };\r\n\r\n    /**\r\n     * Get the question answered values.\r\n     *\r\n     * @return {Object} Contain key-value with key is the input id and value is the input value.\r\n     */\r\n    DragDropToTextQuestion.prototype.getQuestionAnsweredValues = function() {\r\n        let result = {};\r\n        this.getRoot().find('input.placeinput').each((i, inputNode) => {\r\n            result[inputNode.id] = inputNode.value;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Check if the question is being interacted or not.\r\n     *\r\n     * @return {boolean} Return true if the user has changed the question-answer.\r\n     */\r\n    DragDropToTextQuestion.prototype.isQuestionInteracted = function() {\r\n        const oldAnswer = this.questionAnswer;\r\n        const newAnswer = this.getQuestionAnsweredValues();\r\n        let isInteracted = false;\r\n\r\n        // First, check both answers have the same structure or not.\r\n        if (JSON.stringify(newAnswer) !== JSON.stringify(oldAnswer)) {\r\n            isInteracted = true;\r\n            return isInteracted;\r\n        }\r\n        // Check the values.\r\n        Object.keys(newAnswer).forEach(key => {\r\n            if (newAnswer[key] !== oldAnswer[key]) {\r\n                isInteracted = true;\r\n            }\r\n        });\r\n\r\n        return isInteracted;\r\n    };\r\n\r\n    /**\r\n     * Handles the start of dragging an item.\r\n     *\r\n     * @param {Event} e the touch start or mouse down event.\r\n     */\r\n    DragDropToTextQuestion.prototype.handleDragStart = function(e) {\r\n        var thisQ = this,\r\n            drag = $(e.target).closest('.draghome');\r\n\r\n        var info = dragDrop.prepare(e);\r\n        if (!info.start || drag.hasClass('beingdragged')) {\r\n            return;\r\n        }\r\n\r\n        drag.addClass('beingdragged');\r\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\r\n        if (currentPlace !== null) {\r\n            this.setInputValue(currentPlace, 0);\r\n            drag.removeClass('inplace' + currentPlace);\r\n            var hiddenDrop = thisQ.getDrop(drag, currentPlace);\r\n            if (hiddenDrop.length) {\r\n                hiddenDrop.addClass('active');\r\n                drag.offset(hiddenDrop.offset());\r\n            }\r\n        } else {\r\n            var hiddenDrag = thisQ.getDragClone(drag);\r\n            if (hiddenDrag.length) {\r\n                if (drag.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(drag));\r\n                    var cloneDrags = this.getInfiniteDragClones(drag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = drag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        drag.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        drag.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    drag.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n        }\r\n\r\n        dragDrop.start(e, drag, function(x, y, drag) {\r\n            thisQ.dragMove(x, y, drag);\r\n        }, function(x, y, drag) {\r\n            thisQ.dragEnd(x, y, drag);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Called whenever the currently dragged items moves.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropToTextQuestion.prototype.dragMove = function(pageX, pageY, drag) {\r\n        var thisQ = this;\r\n        this.getRoot().find('span.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, dropNode) {\r\n            var drop = $(dropNode);\r\n            if (thisQ.isPointInDrop(pageX, pageY, drop)) {\r\n                drop.addClass('valid-drag-over-drop');\r\n            } else {\r\n                drop.removeClass('valid-drag-over-drop');\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Called when user drops a drag item.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropToTextQuestion.prototype.dragEnd = function(pageX, pageY, drag) {\r\n        var thisQ = this,\r\n            root = this.getRoot(),\r\n            placed = false;\r\n        root.find('span.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, dropNode) {\r\n            if (placed) {\r\n                return false;\r\n            }\r\n            const dropZone = $(dropNode);\r\n            if (!thisQ.isPointInDrop(pageX, pageY, dropZone)) {\r\n                // Not this drop zone.\r\n                return true;\r\n            }\r\n            let drop = null;\r\n            if (dropZone.hasClass('placed')) {\r\n                // This is an placed drag item in a drop.\r\n                dropZone.removeClass('valid-drag-over-drop');\r\n                // Get the correct drop.\r\n                drop = thisQ.getDrop(drag, thisQ.getClassnameNumericSuffix(dropZone, 'inplace'));\r\n            } else {\r\n                // Empty drop.\r\n                drop = dropZone;\r\n            }\r\n            // Now put this drag into the drop.\r\n            drop.removeClass('valid-drag-over-drop');\r\n            thisQ.sendDragToDrop(drag, drop);\r\n            placed = true;\r\n            return false; // Stop the each() here.\r\n        });\r\n        if (!placed) {\r\n            this.sendDragHome(drag);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Animate a drag item into a given place (or back home).\r\n     *\r\n     * @param {jQuery|null} drag the item to place. If null, clear the place.\r\n     * @param {jQuery} drop the place to put it.\r\n     */\r\n    DragDropToTextQuestion.prototype.sendDragToDrop = function(drag, drop) {\r\n        // Send drag home if there is no place in drop.\r\n        if (this.getPlace(drop) === null) {\r\n            this.sendDragHome(drag);\r\n            return;\r\n        }\r\n\r\n        // Is there already a drag in this drop? if so, evict it.\r\n        var oldDrag = this.getCurrentDragInPlace(this.getPlace(drop));\r\n        if (oldDrag.length !== 0) {\r\n            var currentPlace = this.getClassnameNumericSuffix(oldDrag, 'inplace');\r\n            // When infinite group and there is already a drag in a drop, reject the exact clone in the same drop.\r\n            if (this.hasDropSameDrag(currentPlace, drop, oldDrag, drag)) {\r\n                this.sendDragHome(drag);\r\n                return;\r\n            }\r\n            var hiddenDrop = this.getDrop(oldDrag, currentPlace);\r\n            hiddenDrop.addClass('active');\r\n            oldDrag.addClass('beingdragged');\r\n            oldDrag.offset(hiddenDrop.offset());\r\n            this.sendDragHome(oldDrag);\r\n        }\r\n\r\n        if (drag.length === 0) {\r\n            this.setInputValue(this.getPlace(drop), 0);\r\n            if (drop.data('isfocus')) {\r\n                drop.focus();\r\n            }\r\n        } else {\r\n            // Prevent the drag item drop into two drop-zone.\r\n            if (this.getClassnameNumericSuffix(drag, 'inplace')) {\r\n                return;\r\n            }\r\n\r\n            this.setInputValue(this.getPlace(drop), this.getChoice(drag));\r\n            drag.removeClass('unplaced')\r\n                .addClass('placed inplace' + this.getPlace(drop));\r\n            drag.attr('tabindex', 0);\r\n            this.animateTo(drag, drop);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * When infinite group and there is already a drag in a drop, reject the exact clone in the same drop.\r\n     *\r\n     * @param {int} currentPlace  the position of the current drop.\r\n     * @param {jQuery} drop the drop containing a drag.\r\n     * @param {jQuery} oldDrag the drag already placed in drop.\r\n     * @param {jQuery} drag the new drag which is exactly the same (clone) as oldDrag .\r\n     * @returns {boolean}\r\n     */\r\n    DragDropToTextQuestion.prototype.hasDropSameDrag = function(currentPlace, drop, oldDrag, drag) {\r\n        if (drag.hasClass('infinite')) {\r\n            return drop.hasClass('place' + currentPlace) &&\r\n                this.getGroup(drag) === this.getGroup(drop) &&\r\n                this.getChoice(drag) === this.getChoice(oldDrag) &&\r\n                this.getGroup(drag) === this.getGroup(oldDrag);\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Animate a drag back to its home.\r\n     *\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropToTextQuestion.prototype.sendDragHome = function(drag) {\r\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\r\n        if (currentPlace !== null) {\r\n            drag.removeClass('inplace' + currentPlace);\r\n        }\r\n        drag.data('unplaced', true);\r\n\r\n        this.animateTo(drag, this.getDragHome(this.getGroup(drag), this.getChoice(drag)));\r\n    };\r\n\r\n    /**\r\n     * Handles keyboard events on drops.\r\n     *\r\n     * Drops are focusable. Once focused, right/down/space switches to the next choice, and\r\n     * left/up switches to the previous. Escape clear.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropToTextQuestion.prototype.handleKeyPress = function(e) {\r\n        var drop = $(e.target).closest('.drop');\r\n        if (drop.length === 0) {\r\n            var placedDrag = $(e.target);\r\n            var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n            if (currentPlace !== null) {\r\n                drop = this.getDrop(placedDrag, currentPlace);\r\n            }\r\n        }\r\n        var currentDrag = this.getCurrentDragInPlace(this.getPlace(drop)),\r\n            nextDrag = $();\r\n\r\n        switch (e.keyCode) {\r\n            case keys.space:\r\n            case keys.arrowRight:\r\n            case keys.arrowDown:\r\n                nextDrag = this.getNextDrag(this.getGroup(drop), currentDrag);\r\n                break;\r\n\r\n            case keys.arrowLeft:\r\n            case keys.arrowUp:\r\n                nextDrag = this.getPreviousDrag(this.getGroup(drop), currentDrag);\r\n                break;\r\n\r\n            case keys.escape:\r\n                break;\r\n\r\n            default:\r\n                questionManager.isKeyboardNavigation = false;\r\n                return; // To avoid the preventDefault below.\r\n        }\r\n\r\n        if (nextDrag.length) {\r\n            nextDrag.data('isfocus', true);\r\n            nextDrag.addClass('beingdragged');\r\n            var hiddenDrag = this.getDragClone(nextDrag);\r\n            if (hiddenDrag.length) {\r\n                if (nextDrag.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(nextDrag));\r\n                    var cloneDrags = this.getInfiniteDragClones(nextDrag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = nextDrag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        nextDrag.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        nextDrag.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    nextDrag.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n        } else {\r\n            drop.data('isfocus', true);\r\n        }\r\n\r\n        e.preventDefault();\r\n        this.sendDragToDrop(nextDrag, drop);\r\n    };\r\n\r\n    /**\r\n     * Choose the next drag in a group.\r\n     *\r\n     * @param {int} group which group.\r\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\r\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\r\n     */\r\n    DragDropToTextQuestion.prototype.getNextDrag = function(group, drag) {\r\n        var choice,\r\n            numChoices = this.noOfChoicesInGroup(group);\r\n\r\n        if (drag.length === 0) {\r\n            choice = 1; // Was empty, so we want to select the first choice.\r\n        } else {\r\n            choice = this.getChoice(drag) + 1;\r\n        }\r\n\r\n        var next = this.getUnplacedChoice(group, choice);\r\n        while (next.length === 0 && choice < numChoices) {\r\n            choice++;\r\n            next = this.getUnplacedChoice(group, choice);\r\n        }\r\n\r\n        return next;\r\n    };\r\n\r\n    /**\r\n     * Choose the previous drag in a group.\r\n     *\r\n     * @param {int} group which group.\r\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\r\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\r\n     */\r\n    DragDropToTextQuestion.prototype.getPreviousDrag = function(group, drag) {\r\n        var choice;\r\n\r\n        if (drag.length === 0) {\r\n            choice = this.noOfChoicesInGroup(group);\r\n        } else {\r\n            choice = this.getChoice(drag) - 1;\r\n        }\r\n\r\n        var previous = this.getUnplacedChoice(group, choice);\r\n        while (previous.length === 0 && choice > 1) {\r\n            choice--;\r\n            previous = this.getUnplacedChoice(group, choice);\r\n        }\r\n\r\n        // Does this choice exist?\r\n        return previous;\r\n    };\r\n\r\n    /**\r\n     * Animate an object to the given destination.\r\n     *\r\n     * @param {jQuery} drag the element to be animated.\r\n     * @param {jQuery} target element marking the place to move it to.\r\n     */\r\n    DragDropToTextQuestion.prototype.animateTo = function(drag, target) {\r\n        var currentPos = drag.offset(),\r\n            targetPos = target.offset(),\r\n            thisQ = this;\r\n\r\n        M.util.js_pending('qtype_ddwtos-animate-' + thisQ.containerId);\r\n        // Animate works in terms of CSS position, whereas locating an object\r\n        // on the page works best with jQuery offset() function. So, to get\r\n        // the right target position, we work out the required change in\r\n        // offset() and then add that to the current CSS position.\r\n        drag.animate(\r\n            {\r\n                left: parseInt(drag.css('left')) + targetPos.left - currentPos.left,\r\n                top: parseInt(drag.css('top')) + targetPos.top - currentPos.top\r\n            },\r\n            {\r\n                duration: 'fast',\r\n                done: function() {\r\n                    $('body').trigger('qtype_ddwtos-dragmoved', [drag, target, thisQ]);\r\n                    M.util.js_complete('qtype_ddwtos-animate-' + thisQ.containerId);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Detect if a point is inside a given DOM node.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drop the node to check (typically a drop).\r\n     * @return {boolean} whether the point is inside the node.\r\n     */\r\n    DragDropToTextQuestion.prototype.isPointInDrop = function(pageX, pageY, drop) {\r\n        var position = drop.offset();\r\n        return pageX >= position.left && pageX < position.left + drop.width()\r\n                && pageY >= position.top && pageY < position.top + drop.height();\r\n    };\r\n\r\n    /**\r\n     * Set the value of the hidden input for a place, to record what is currently there.\r\n     *\r\n     * @param {int} place which place to set the input value for.\r\n     * @param {int} choice the value to set.\r\n     */\r\n    DragDropToTextQuestion.prototype.setInputValue = function(place, choice) {\r\n        this.getRoot().find('input.placeinput.place' + place).val(choice);\r\n    };\r\n\r\n    /**\r\n     * Get the outer div for this question.\r\n     *\r\n     * @returns {jQuery} containing that div.\r\n     */\r\n    DragDropToTextQuestion.prototype.getRoot = function() {\r\n        return $(document.getElementById(this.containerId));\r\n    };\r\n\r\n    /**\r\n     * Get drag home for a given choice.\r\n     *\r\n     * @param {int} group the group.\r\n     * @param {int} choice the choice number.\r\n     * @returns {jQuery} containing that div.\r\n     */\r\n    DragDropToTextQuestion.prototype.getDragHome = function(group, choice) {\r\n        if (!this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice).is(':visible')) {\r\n            return this.getRoot().find('.draggrouphomes' + group +\r\n                ' span.draghome.infinite' +\r\n                '.choice' + choice +\r\n                '.group' + group);\r\n        }\r\n        return this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice);\r\n    };\r\n\r\n    /**\r\n     * Get an unplaced choice for a particular group.\r\n     *\r\n     * @param {int} group the group.\r\n     * @param {int} choice the choice number.\r\n     * @returns {jQuery} jQuery wrapping the unplaced choice. If there isn't one, the jQuery will be empty.\r\n     */\r\n    DragDropToTextQuestion.prototype.getUnplacedChoice = function(group, choice) {\r\n        return this.getRoot().find('.draghome.group' + group + '.choice' + choice + '.unplaced').slice(0, 1);\r\n    };\r\n\r\n    /**\r\n     * Get the drag that is currently in a given place.\r\n     *\r\n     * @param {int} place the place number.\r\n     * @return {jQuery} the current drag (or an empty jQuery if none).\r\n     */\r\n    DragDropToTextQuestion.prototype.getCurrentDragInPlace = function(place) {\r\n        return this.getRoot().find('span.draghome.inplace' + place);\r\n    };\r\n\r\n    /**\r\n     * Return the number of blanks in a given group.\r\n     *\r\n     * @param {int} group the group number.\r\n     * @returns {int} the number of drops.\r\n     */\r\n    DragDropToTextQuestion.prototype.noOfDropsInGroup = function(group) {\r\n        return this.getRoot().find('.drop.group' + group).length;\r\n    };\r\n\r\n    /**\r\n     * Return the number of choices in a given group.\r\n     *\r\n     * @param {int} group the group number.\r\n     * @returns {int} the number of choices.\r\n     */\r\n    DragDropToTextQuestion.prototype.noOfChoicesInGroup = function(group) {\r\n        return this.getRoot().find('.draghome.group' + group).length;\r\n    };\r\n\r\n    /**\r\n     * Return the number at the end of the CSS class name with the given prefix.\r\n     *\r\n     * @param {jQuery} node\r\n     * @param {String} prefix name prefix\r\n     * @returns {Number|null} the suffix if found, else null.\r\n     */\r\n    DragDropToTextQuestion.prototype.getClassnameNumericSuffix = function(node, prefix) {\r\n        var classes = node.attr('class');\r\n        if (classes !== undefined && classes !== '') {\r\n            var classesArr = classes.split(' ');\r\n            for (var index = 0; index < classesArr.length; index++) {\r\n                var patt1 = new RegExp('^' + prefix + '([0-9])+$');\r\n                if (patt1.test(classesArr[index])) {\r\n                    var patt2 = new RegExp('([0-9])+$');\r\n                    var match = patt2.exec(classesArr[index]);\r\n                    return Number(match[0]);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Get the choice number of a drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {Number} the choice number.\r\n     */\r\n    DragDropToTextQuestion.prototype.getChoice = function(drag) {\r\n        return this.getClassnameNumericSuffix(drag, 'choice');\r\n    };\r\n\r\n    /**\r\n     * Given a DOM node that is significant to this question\r\n     * (drag, drop, ...) get the group it belongs to.\r\n     *\r\n     * @param {jQuery} node a DOM node.\r\n     * @returns {Number} the group it belongs to.\r\n     */\r\n    DragDropToTextQuestion.prototype.getGroup = function(node) {\r\n        return this.getClassnameNumericSuffix(node, 'group');\r\n    };\r\n\r\n    /**\r\n     * Get the place number of a drop, or its corresponding hidden input.\r\n     *\r\n     * @param {jQuery} node the DOM node.\r\n     * @returns {Number} the place number.\r\n     */\r\n    DragDropToTextQuestion.prototype.getPlace = function(node) {\r\n        return this.getClassnameNumericSuffix(node, 'place');\r\n    };\r\n\r\n    /**\r\n     * Get drag clone for a given drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {jQuery} the drag's clone.\r\n     */\r\n    DragDropToTextQuestion.prototype.getDragClone = function(drag) {\r\n        return this.getRoot().find('.draggrouphomes' +\r\n            this.getGroup(drag) +\r\n            ' span.draghome' +\r\n            '.choice' + this.getChoice(drag) +\r\n            '.group' + this.getGroup(drag) +\r\n            '.dragplaceholder');\r\n    };\r\n\r\n    /**\r\n     * Get infinite drag clones for given drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @param {Boolean} inHome in the home area or not.\r\n     * @returns {jQuery} the drag's clones.\r\n     */\r\n    DragDropToTextQuestion.prototype.getInfiniteDragClones = function(drag, inHome) {\r\n        if (inHome) {\r\n            return this.getRoot().find('.draggrouphomes' +\r\n                this.getGroup(drag) +\r\n                ' span.draghome' +\r\n                '.choice' + this.getChoice(drag) +\r\n                '.group' + this.getGroup(drag) +\r\n                '.infinite').not('.dragplaceholder');\r\n        }\r\n        return this.getRoot().find('span.draghome' +\r\n            '.choice' + this.getChoice(drag) +\r\n            '.group' + this.getGroup(drag) +\r\n            '.infinite').not('.dragplaceholder');\r\n    };\r\n\r\n    /**\r\n     * Get drop for a given drag and place.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @param {Integer} currentPlace the current place of drag.\r\n     * @returns {jQuery} the drop's clone.\r\n     */\r\n    DragDropToTextQuestion.prototype.getDrop = function(drag, currentPlace) {\r\n        return this.getRoot().find('.drop.group' + this.getGroup(drag) + '.place' + currentPlace);\r\n    };\r\n\r\n    /**\r\n     * Singleton that tracks all the DragDropToTextQuestions on this page, and deals\r\n     * with event dispatching.\r\n     *\r\n     * @type {Object}\r\n     */\r\n    var questionManager = {\r\n        /**\r\n         * {boolean} used to ensure the event handlers are only initialised once per page.\r\n         */\r\n        eventHandlersInitialised: false,\r\n\r\n        /**\r\n         * {Object} ensures that the drag event handlers are only initialised once per question,\r\n         * indexed by containerId (id on the .que div).\r\n         */\r\n        dragEventHandlersInitialised: {},\r\n\r\n        /**\r\n         * {boolean} is keyboard navigation or not.\r\n         */\r\n        isKeyboardNavigation: false,\r\n\r\n        /**\r\n         * {DragDropToTextQuestion[]} all the questions on this page, indexed by containerId (id on the .que div).\r\n         */\r\n        questions: {},\r\n\r\n        /**\r\n         * Initialise questions.\r\n         *\r\n         * @param {String} containerId id of the outer div for this question.\r\n         * @param {boolean} readOnly whether the question is being displayed read-only.\r\n         */\r\n        init: function(containerId, readOnly) {\r\n            questionManager.questions[containerId] = new DragDropToTextQuestion(containerId, readOnly);\r\n            if (!questionManager.eventHandlersInitialised) {\r\n                questionManager.setupEventHandlers();\r\n                questionManager.eventHandlersInitialised = true;\r\n            }\r\n            if (!questionManager.dragEventHandlersInitialised.hasOwnProperty(containerId)) {\r\n                questionManager.dragEventHandlersInitialised[containerId] = true;\r\n                // We do not use the body event here to prevent the other event on Mobile device, such as scroll event.\r\n                var questionContainer = document.getElementById(containerId);\r\n                if (questionContainer.classList.contains('ddwtos') &&\r\n                    !questionContainer.classList.contains('qtype_ddwtos-readonly')) {\r\n                    // TODO: Convert all the jQuery selectors and events to native Javascript.\r\n                    questionManager.addEventHandlersToDrag($(questionContainer).find('span.draghome'));\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set up the event handlers that make this question type work. (Done once per page.)\r\n         */\r\n        setupEventHandlers: function() {\r\n            $('body')\r\n                .on('keydown',\r\n                    '.que.ddwtos:not(.qtype_ddwtos-readonly) span.drop',\r\n                    questionManager.handleKeyPress)\r\n                .on('keydown',\r\n                    '.que.ddwtos:not(.qtype_ddwtos-readonly) span.draghome.placed:not(.beingdragged)',\r\n                    questionManager.handleKeyPress)\r\n                .on('qtype_ddwtos-dragmoved', questionManager.handleDragMoved);\r\n        },\r\n\r\n        /**\r\n         * Binding the drag/touch event again for newly created element.\r\n         *\r\n         * @param {jQuery} element Element to bind the event\r\n         */\r\n        addEventHandlersToDrag: function(element) {\r\n            // Unbind all the mousedown and touchstart events to prevent double binding.\r\n            element.unbind('mousedown touchstart');\r\n            element.on('mousedown touchstart', questionManager.handleDragStart);\r\n        },\r\n\r\n        /**\r\n         * Handle mouse down / touch start on drags.\r\n         * @param {Event} e the DOM event.\r\n         */\r\n        handleDragStart: function(e) {\r\n            e.preventDefault();\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleDragStart(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle key down / press on drops.\r\n         * @param {KeyboardEvent} e\r\n         */\r\n        handleKeyPress: function(e) {\r\n            if (questionManager.isKeyboardNavigation) {\r\n                return;\r\n            }\r\n            questionManager.isKeyboardNavigation = true;\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleKeyPress(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Given an event, work out which question it affects.\r\n         *\r\n         * @param {Event} e the event.\r\n         * @returns {DragDropToTextQuestion|undefined} The question, or undefined.\r\n         */\r\n        getQuestionForEvent: function(e) {\r\n            var containerId = $(e.currentTarget).closest('.que.ddwtos').attr('id');\r\n            return questionManager.questions[containerId];\r\n        },\r\n\r\n        /**\r\n         * Handle when drag moved.\r\n         *\r\n         * @param {Event} e the event.\r\n         * @param {jQuery} drag the drag\r\n         * @param {jQuery} target the target\r\n         * @param {DragDropToTextQuestion} thisQ the question.\r\n         */\r\n        handleDragMoved: function(e, drag, target, thisQ) {\r\n            drag.removeClass('beingdragged');\r\n            drag.css('top', '').css('left', '');\r\n            target.after(drag);\r\n            target.removeClass('active');\r\n            if (typeof drag.data('unplaced') !== 'undefined' && drag.data('unplaced') === true) {\r\n                drag.removeClass('placed').addClass('unplaced');\r\n                drag.removeAttr('tabindex');\r\n                drag.removeData('unplaced');\r\n                if (drag.hasClass('infinite') && thisQ.getInfiniteDragClones(drag, true).length > 1) {\r\n                    thisQ.getInfiniteDragClones(drag, true).first().remove();\r\n                }\r\n            }\r\n            if (typeof drag.data('isfocus') !== 'undefined' && drag.data('isfocus') === true) {\r\n                drag.focus();\r\n                drag.removeData('isfocus');\r\n            }\r\n            if (typeof target.data('isfocus') !== 'undefined' && target.data('isfocus') === true) {\r\n                target.removeData('isfocus');\r\n            }\r\n            if (questionManager.isKeyboardNavigation) {\r\n                questionManager.isKeyboardNavigation = false;\r\n            }\r\n            if (thisQ.isQuestionInteracted()) {\r\n                // The user has interacted with the draggable items. We need to mark the form as dirty.\r\n                questionManager.handleFormDirty();\r\n                // Save the new answered value.\r\n                thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle when the form is dirty.\r\n         */\r\n        handleFormDirty: function() {\r\n            const responseForm = document.getElementById('responseform');\r\n            FormChangeChecker.markFormAsDirty(responseForm);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @alias module:qtype_ddwtos/ddwtos\r\n     */\r\n    return {\r\n        /**\r\n         * Initialise one drag-drop into text question.\r\n         *\r\n         * @param {String} containerId id of the outer div for this question.\r\n         * @param {boolean} readOnly whether the question is being displayed read-only.\r\n         */\r\n        init: questionManager.init\r\n    };\r\n});\r\n"],"names":["define","$","dragDrop","keys","FormChangeChecker","DragDropToTextQuestion","containerId","readOnly","questionAnswer","getRoot","addClass","resizeAllDragsAndDrops","cloneDrags","positionDrags","prototype","thisQ","this","find","each","i","node","resizeAllDragsAndDropsInGroup","getClassnameNumericSuffix","group","dragHomes","maxWidth","maxHeight","drag","Math","max","ceil","offsetWidth","offsetHeight","setElementSize","drop","element","width","height","css","index","draghome","placeHolder","clone","removeClass","getChoice","getGroup","before","root","not","dragNode","currentPlace","removeAttr","inputNode","input","choice","val","place","getPlace","dropPosition","offset","data","top","left","unplacedDrag","getUnplacedChoice","hiddenDrag","getDragClone","length","hasClass","noOfDrags","noOfDropsInGroup","getInfiniteDragClones","cloneDrag","after","questionManager","addEventHandlersToDrag","sendDragToDrop","getQuestionAnsweredValues","result","id","value","isQuestionInteracted","oldAnswer","newAnswer","isInteracted","JSON","stringify","Object","forEach","key","handleDragStart","e","target","closest","prepare","start","setInputValue","hiddenDrop","getDrop","x","y","dragMove","dragEnd","pageX","pageY","dropNode","isPointInDrop","placed","dropZone","sendDragHome","oldDrag","getCurrentDragInPlace","hasDropSameDrag","focus","attr","animateTo","getDragHome","handleKeyPress","placedDrag","currentDrag","nextDrag","keyCode","space","arrowRight","arrowDown","getNextDrag","arrowLeft","arrowUp","getPreviousDrag","escape","isKeyboardNavigation","preventDefault","numChoices","noOfChoicesInGroup","next","previous","currentPos","targetPos","M","util","js_pending","animate","parseInt","duration","done","trigger","js_complete","position","document","getElementById","is","slice","prefix","classes","undefined","classesArr","split","RegExp","test","match","exec","Number","inHome","eventHandlersInitialised","dragEventHandlersInitialised","questions","init","setupEventHandlers","hasOwnProperty","questionContainer","classList","contains","on","handleDragMoved","unbind","question","getQuestionForEvent","currentTarget","removeData","first","remove","handleFormDirty","responseForm","markFormAsDirty"],"mappings":"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"}