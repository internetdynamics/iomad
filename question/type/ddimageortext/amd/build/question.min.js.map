{"version":3,"file":"question.min.js","sources":["../src/question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * JavaScript to allow dragging options to slots (using mouse down or touch) or tab through slots using keyboard.\r\n *\r\n * @module     qtype_ddimageortext/question\r\n * @copyright  2018 The Open University\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/dragdrop',\r\n    'core/key_codes',\r\n    'core_form/changechecker'\r\n], function(\r\n    $,\r\n    dragDrop,\r\n    keys,\r\n    FormChangeChecker\r\n) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Initialise one drag-drop onto image question.\r\n     *\r\n     * @param {String} containerId id of the outer div for this question.\r\n     * @param {boolean} readOnly whether the question is being displayed read-only.\r\n     * @param {Array} places Information about the drop places.\r\n     * @constructor\r\n     */\r\n    function DragDropOntoImageQuestion(containerId, readOnly, places) {\r\n        this.containerId = containerId;\r\n        this.questionAnswer = {};\r\n        M.util.js_pending('qtype_ddimageortext-init-' + this.containerId);\r\n        this.places = places;\r\n        this.allImagesLoaded = false;\r\n        this.imageLoadingTimeoutId = null;\r\n        this.isPrinting = false;\r\n        if (readOnly) {\r\n            this.getRoot().addClass('qtype_ddimageortext-readonly');\r\n        }\r\n\r\n        var thisQ = this;\r\n        this.getNotYetLoadedImages().one('load', function() {\r\n            thisQ.waitForAllImagesToBeLoaded();\r\n        });\r\n        this.waitForAllImagesToBeLoaded();\r\n    }\r\n\r\n    /**\r\n     * Waits until all images are loaded before calling setupQuestion().\r\n     *\r\n     * This function is called from the onLoad of each image, and also polls with\r\n     * a time-out, because image on-loads are allegedly unreliable.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.waitForAllImagesToBeLoaded = function() {\r\n        var thisQ = this;\r\n\r\n        // This method may get called multiple times (via image on-loads or timeouts.\r\n        // If we are already done, don't do it again.\r\n        if (this.allImagesLoaded) {\r\n            return;\r\n        }\r\n\r\n        // Clear any current timeout, if set.\r\n        if (this.imageLoadingTimeoutId !== null) {\r\n            clearTimeout(this.imageLoadingTimeoutId);\r\n        }\r\n\r\n        // If we have not yet loaded all images, set a timeout to\r\n        // call ourselves again, since apparently images on-load\r\n        // events are flakey.\r\n        if (this.getNotYetLoadedImages().length > 0) {\r\n            this.imageLoadingTimeoutId = setTimeout(function() {\r\n                thisQ.waitForAllImagesToBeLoaded();\r\n            }, 100);\r\n            return;\r\n        }\r\n\r\n        // We now have all images. Carry on, but only after giving the layout a chance to settle down.\r\n        this.allImagesLoaded = true;\r\n        thisQ.setupQuestion();\r\n    };\r\n\r\n    /**\r\n     * Get any of the images in the drag-drop area that are not yet fully loaded.\r\n     *\r\n     * @returns {jQuery} those images.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getNotYetLoadedImages = function() {\r\n        var thisQ = this;\r\n        return this.getRoot().find('.ddarea img').not(function(i, imgNode) {\r\n            return thisQ.imageIsLoaded(imgNode);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Check if an image has loaded without errors.\r\n     *\r\n     * @param {HTMLImageElement} imgElement an image.\r\n     * @returns {boolean} true if this image has loaded without errors.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.imageIsLoaded = function(imgElement) {\r\n        return imgElement.complete && imgElement.naturalHeight !== 0;\r\n    };\r\n\r\n    /**\r\n     * Set up the question, once all images have been loaded.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.setupQuestion = function() {\r\n        this.resizeAllDragsAndDrops();\r\n        this.cloneDrags();\r\n        this.positionDragsAndDrops();\r\n        M.util.js_complete('qtype_ddimageortext-init-' + this.containerId);\r\n    };\r\n\r\n    /**\r\n     * In each group, resize all the items to be the same size.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.resizeAllDragsAndDrops = function() {\r\n        var thisQ = this;\r\n        this.getRoot().find('.draghomes > div').each(function(i, node) {\r\n            thisQ.resizeAllDragsAndDropsInGroup(\r\n                    thisQ.getClassnameNumericSuffix($(node), 'dragitemgroup'));\r\n        });\r\n    };\r\n\r\n    /**\r\n     * In a given group, set all the drags and drops to be the same size.\r\n     *\r\n     * @param {int} group the group number.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.resizeAllDragsAndDropsInGroup = function(group) {\r\n        var root = this.getRoot(),\r\n            dragHomes = root.find('.dragitemgroup' + group + ' .draghome'),\r\n            maxWidth = 0,\r\n            maxHeight = 0;\r\n\r\n        // Find the maximum size of any drag in this groups.\r\n        dragHomes.each(function(i, drag) {\r\n            maxWidth = Math.max(maxWidth, Math.ceil(drag.offsetWidth));\r\n            maxHeight = Math.max(maxHeight, Math.ceil(drag.offsetHeight));\r\n        });\r\n\r\n        // The size we will want to set is a bit bigger than this.\r\n        maxWidth += 10;\r\n        maxHeight += 10;\r\n\r\n        // Set each drag home to that size.\r\n        dragHomes.each(function(i, drag) {\r\n            var left = Math.round((maxWidth - drag.offsetWidth) / 2),\r\n                top = Math.floor((maxHeight - drag.offsetHeight) / 2);\r\n            // Set top and left padding so the item is centred.\r\n            $(drag).css({\r\n                'padding-left': left + 'px',\r\n                'padding-right': (maxWidth - drag.offsetWidth - left) + 'px',\r\n                'padding-top': top + 'px',\r\n                'padding-bottom': (maxHeight - drag.offsetHeight - top) + 'px'\r\n            });\r\n        });\r\n\r\n        // Create the drops and make them the right size.\r\n        for (var i in this.places) {\r\n            if (!this.places.hasOwnProperty((i))) {\r\n                continue;\r\n            }\r\n            var place = this.places[i],\r\n                label = place.text;\r\n            if (parseInt(place.group) !== group) {\r\n                continue;\r\n            }\r\n            if (label === '') {\r\n                label = M.util.get_string('blank', 'qtype_ddimageortext');\r\n            }\r\n            root.find('.dropzones').append('<div class=\"dropzone active group' + place.group +\r\n                            ' place' + i + '\" tabindex=\"0\">' +\r\n                    '<span class=\"accesshide\">' + label + '</span>&nbsp;</div>');\r\n            root.find('.dropzone.place' + i).width(maxWidth - 2).height(maxHeight - 2);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Invisible 'drag homes' are output by the renderer. These have the same properties\r\n     * as the drag items but are invisible. We clone these invisible elements to make the\r\n     * actual drag items.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.cloneDrags = function() {\r\n        var thisQ = this;\r\n        thisQ.getRoot().find('.draghome').each(function(index, dragHome) {\r\n            var drag = $(dragHome);\r\n            var placeHolder = drag.clone();\r\n            placeHolder.removeClass();\r\n            placeHolder.addClass('draghome choice' +\r\n                thisQ.getChoice(drag) + ' group' +\r\n                thisQ.getGroup(drag) + ' dragplaceholder');\r\n            drag.before(placeHolder);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Clone drag item for one choice.\r\n     *\r\n     * @param {jQuery} dragHome the drag home to clone.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.cloneDragsForOneChoice = function(dragHome) {\r\n        if (dragHome.hasClass('infinite')) {\r\n            var noOfDrags = this.noOfDropsInGroup(this.getGroup(dragHome));\r\n            for (var i = 0; i < noOfDrags; i++) {\r\n                this.cloneDrag(dragHome);\r\n            }\r\n        } else {\r\n            this.cloneDrag(dragHome);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Clone drag item.\r\n     *\r\n     * @param {jQuery} dragHome\r\n     */\r\n    DragDropOntoImageQuestion.prototype.cloneDrag = function(dragHome) {\r\n        var drag = dragHome.clone();\r\n        drag.removeClass('draghome')\r\n            .addClass('drag unplaced moodle-has-zindex')\r\n            .offset(dragHome.offset());\r\n        this.getRoot().find('.dragitems').append(drag);\r\n    };\r\n\r\n    /**\r\n     * Update the position of drags.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.positionDragsAndDrops = function() {\r\n        var thisQ = this,\r\n            root = this.getRoot(),\r\n            bgRatio = this.bgRatio();\r\n\r\n        // Move the drops into position.\r\n        root.find('.ddarea .dropzone').each(function(i, dropNode) {\r\n            var drop = $(dropNode),\r\n                place = thisQ.places[thisQ.getPlace(drop)];\r\n            // The xy values come from PHP as strings, so we need parseInt to stop JS doing string concatenation.\r\n            drop.css('left', parseInt(place.xy[0]) * bgRatio)\r\n                .css('top', parseInt(place.xy[1]) * bgRatio);\r\n            drop.data('originX', parseInt(place.xy[0]))\r\n                .data('originY', parseInt(place.xy[1]));\r\n            thisQ.handleElementScale(drop, 'left top');\r\n        });\r\n\r\n        // First move all items back home.\r\n        root.find('.draghome').not('.dragplaceholder').each(function(i, dragNode) {\r\n            var drag = $(dragNode),\r\n                currentPlace = thisQ.getClassnameNumericSuffix(drag, 'inplace');\r\n            drag.addClass('unplaced')\r\n                .removeClass('placed');\r\n            drag.removeAttr('tabindex');\r\n            if (currentPlace !== null) {\r\n                drag.removeClass('inplace' + currentPlace);\r\n            }\r\n        });\r\n\r\n        // Then place the ones that should be placed.\r\n        root.find('input.placeinput').each(function(i, inputNode) {\r\n            var input = $(inputNode),\r\n                choice = input.val();\r\n            if (choice.length === 0 || (choice.length > 0 && choice === '0')) {\r\n                // No item in this place.\r\n                return;\r\n            }\r\n\r\n            var place = thisQ.getPlace(input);\r\n            // Get the unplaced drag.\r\n            var unplacedDrag = thisQ.getUnplacedChoice(thisQ.getGroup(input), choice);\r\n            // Get the clone of the drag.\r\n            var hiddenDrag = thisQ.getDragClone(unplacedDrag);\r\n            if (hiddenDrag.length) {\r\n                if (unplacedDrag.hasClass('infinite')) {\r\n                    var noOfDrags = thisQ.noOfDropsInGroup(thisQ.getGroup(unplacedDrag));\r\n                    var cloneDrags = thisQ.getInfiniteDragClones(unplacedDrag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = unplacedDrag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        // Sometimes, for the question that has a lot of input groups and unlimited draggable items,\r\n                        // this 'clone' process takes longer than usual, so the questionManager.init() method\r\n                        // will not add the eventHandler for this cloned drag.\r\n                        // We need to make sure to add the eventHandler for the cloned drag too.\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                }\r\n            }\r\n\r\n            // Send the drag to drop.\r\n            var drop = root.find('.dropzone.place' + place);\r\n            thisQ.sendDragToDrop(unplacedDrag, drop);\r\n        });\r\n\r\n        // Save the question answer.\r\n        thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\r\n    };\r\n\r\n    /**\r\n     * Get the question answered values.\r\n     *\r\n     * @return {Object} Contain key-value with key is the input id and value is the input value.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getQuestionAnsweredValues = function() {\r\n        let result = {};\r\n        this.getRoot().find('input.placeinput').each((i, inputNode) => {\r\n            result[inputNode.id] = inputNode.value;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Check if the question is being interacted or not.\r\n     *\r\n     * @return {boolean} Return true if the user has changed the question-answer.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.isQuestionInteracted = function() {\r\n        const oldAnswer = this.questionAnswer;\r\n        const newAnswer = this.getQuestionAnsweredValues();\r\n        let isInteracted = false;\r\n\r\n        // First, check both answers have the same structure or not.\r\n        if (JSON.stringify(newAnswer) !== JSON.stringify(oldAnswer)) {\r\n            isInteracted = true;\r\n            return isInteracted;\r\n        }\r\n        // Check the values.\r\n        Object.keys(newAnswer).forEach(key => {\r\n            if (newAnswer[key] !== oldAnswer[key]) {\r\n                isInteracted = true;\r\n            }\r\n        });\r\n\r\n        return isInteracted;\r\n    };\r\n\r\n    /**\r\n     * Handles the start of dragging an item.\r\n     *\r\n     * @param {Event} e the touch start or mouse down event.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleDragStart = function(e) {\r\n        var thisQ = this,\r\n            drag = $(e.target).closest('.draghome'),\r\n            currentIndex = this.calculateZIndex(),\r\n            newIndex = currentIndex + 2;\r\n\r\n        var info = dragDrop.prepare(e);\r\n        if (!info.start || drag.hasClass('beingdragged')) {\r\n            return;\r\n        }\r\n\r\n        drag.addClass('beingdragged').css('transform', '').css('z-index', newIndex);\r\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\r\n        if (currentPlace !== null) {\r\n            this.setInputValue(currentPlace, 0);\r\n            drag.removeClass('inplace' + currentPlace);\r\n            var hiddenDrop = thisQ.getDrop(drag, currentPlace);\r\n            if (hiddenDrop.length) {\r\n                hiddenDrop.addClass('active');\r\n                drag.offset(hiddenDrop.offset());\r\n            }\r\n        } else {\r\n            var hiddenDrag = thisQ.getDragClone(drag);\r\n            if (hiddenDrag.length) {\r\n                if (drag.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(thisQ.getGroup(drag));\r\n                    var cloneDrags = this.getInfiniteDragClones(drag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = drag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        drag.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        drag.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    drag.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n        }\r\n\r\n        dragDrop.start(e, drag, function(x, y, drag) {\r\n            thisQ.dragMove(x, y, drag);\r\n        }, function(x, y, drag) {\r\n            thisQ.dragEnd(x, y, drag);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Called whenever the currently dragged items moves.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.dragMove = function(pageX, pageY, drag) {\r\n        var thisQ = this,\r\n            highlighted = false;\r\n        this.getRoot().find('.dropzone.group' + this.getGroup(drag)).each(function(i, dropNode) {\r\n            var drop = $(dropNode);\r\n            if (thisQ.isPointInDrop(pageX, pageY, drop) && !highlighted) {\r\n                highlighted = true;\r\n                drop.addClass('valid-drag-over-drop');\r\n            } else {\r\n                drop.removeClass('valid-drag-over-drop');\r\n            }\r\n        });\r\n        this.getRoot().find('.draghome.placed.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, dropNode) {\r\n            var drop = $(dropNode);\r\n            if (thisQ.isPointInDrop(pageX, pageY, drop) && !highlighted && !thisQ.isDragSameAsDrop(drag, drop)) {\r\n                highlighted = true;\r\n                drop.addClass('valid-drag-over-drop');\r\n            } else {\r\n                drop.removeClass('valid-drag-over-drop');\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Called when user drops a drag item.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.dragEnd = function(pageX, pageY, drag) {\r\n        var thisQ = this,\r\n            root = this.getRoot(),\r\n            placed = false;\r\n\r\n        // Looking for drag that was dropped on a dropzone.\r\n        root.find('.dropzone.group' + this.getGroup(drag)).each(function(i, dropNode) {\r\n            var drop = $(dropNode);\r\n            if (!thisQ.isPointInDrop(pageX, pageY, drop)) {\r\n                // Not this drop.\r\n                return true;\r\n            }\r\n\r\n            // Now put this drag into the drop.\r\n            drop.removeClass('valid-drag-over-drop');\r\n            thisQ.sendDragToDrop(drag, drop);\r\n            placed = true;\r\n            return false; // Stop the each() here.\r\n        });\r\n\r\n        if (!placed) {\r\n            // Looking for drag that was dropped on a placed drag.\r\n            root.find('.draghome.placed.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, placedNode) {\r\n                var placedDrag = $(placedNode);\r\n                if (!thisQ.isPointInDrop(pageX, pageY, placedDrag) || thisQ.isDragSameAsDrop(drag, placedDrag)) {\r\n                    // Not this placed drag.\r\n                    return true;\r\n                }\r\n\r\n                // Now put this drag into the drop.\r\n                placedDrag.removeClass('valid-drag-over-drop');\r\n                var currentPlace = thisQ.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n                var drop = thisQ.getDrop(drag, currentPlace);\r\n                thisQ.sendDragToDrop(drag, drop);\r\n                placed = true;\r\n                return false; // Stop the each() here.\r\n            });\r\n        }\r\n\r\n        if (!placed) {\r\n            this.sendDragHome(drag);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Animate a drag item into a given place (or back home).\r\n     *\r\n     * @param {jQuery|null} drag the item to place. If null, clear the place.\r\n     * @param {jQuery} drop the place to put it.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.sendDragToDrop = function(drag, drop) {\r\n        // Is there already a drag in this drop? if so, evict it.\r\n        var oldDrag = this.getCurrentDragInPlace(this.getPlace(drop));\r\n        if (oldDrag.length !== 0) {\r\n            oldDrag.addClass('beingdragged');\r\n            oldDrag.offset(oldDrag.offset());\r\n            var currentPlace = this.getClassnameNumericSuffix(oldDrag, 'inplace');\r\n            var hiddenDrop = this.getDrop(oldDrag, currentPlace);\r\n            hiddenDrop.addClass('active');\r\n            this.sendDragHome(oldDrag);\r\n        }\r\n\r\n        if (drag.length === 0) {\r\n            this.setInputValue(this.getPlace(drop), 0);\r\n            if (drop.data('isfocus')) {\r\n                drop.focus();\r\n            }\r\n        } else {\r\n            this.setInputValue(this.getPlace(drop), this.getChoice(drag));\r\n            drag.removeClass('unplaced')\r\n                .addClass('placed inplace' + this.getPlace(drop));\r\n            drag.attr('tabindex', 0);\r\n            this.animateTo(drag, drop);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Animate a drag back to its home.\r\n     *\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.sendDragHome = function(drag) {\r\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\r\n        if (currentPlace !== null) {\r\n            drag.removeClass('inplace' + currentPlace);\r\n        }\r\n        drag.data('unplaced', true);\r\n\r\n        this.animateTo(drag, this.getDragHome(this.getGroup(drag), this.getChoice(drag)));\r\n    };\r\n\r\n    /**\r\n     * Handles keyboard events on drops.\r\n     *\r\n     * Drops are focusable. Once focused, right/down/space switches to the next choice, and\r\n     * left/up switches to the previous. Escape clear.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleKeyPress = function(e) {\r\n        var drop = $(e.target).closest('.dropzone');\r\n        if (drop.length === 0) {\r\n            var placedDrag = $(e.target);\r\n            var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n            if (currentPlace !== null) {\r\n                drop = this.getDrop(placedDrag, currentPlace);\r\n            }\r\n        }\r\n        var currentDrag = this.getCurrentDragInPlace(this.getPlace(drop)),\r\n            nextDrag = $();\r\n\r\n        switch (e.keyCode) {\r\n            case keys.space:\r\n            case keys.arrowRight:\r\n            case keys.arrowDown:\r\n                nextDrag = this.getNextDrag(this.getGroup(drop), currentDrag);\r\n                break;\r\n\r\n            case keys.arrowLeft:\r\n            case keys.arrowUp:\r\n                nextDrag = this.getPreviousDrag(this.getGroup(drop), currentDrag);\r\n                break;\r\n\r\n            case keys.escape:\r\n                questionManager.isKeyboardNavigation = false;\r\n                break;\r\n\r\n            default:\r\n                questionManager.isKeyboardNavigation = false;\r\n                return; // To avoid the preventDefault below.\r\n        }\r\n\r\n        if (nextDrag.length) {\r\n            nextDrag.data('isfocus', true);\r\n            nextDrag.addClass('beingdragged');\r\n            var hiddenDrag = this.getDragClone(nextDrag);\r\n            if (hiddenDrag.length) {\r\n                if (nextDrag.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(nextDrag));\r\n                    var cloneDrags = this.getInfiniteDragClones(nextDrag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = nextDrag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        nextDrag.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        nextDrag.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    nextDrag.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n        } else {\r\n            drop.data('isfocus', true);\r\n        }\r\n\r\n        e.preventDefault();\r\n        this.sendDragToDrop(nextDrag, drop);\r\n    };\r\n\r\n    /**\r\n     * Choose the next drag in a group.\r\n     *\r\n     * @param {int} group which group.\r\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\r\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getNextDrag = function(group, drag) {\r\n        var choice,\r\n            numChoices = this.noOfChoicesInGroup(group);\r\n\r\n        if (drag.length === 0) {\r\n            choice = 1; // Was empty, so we want to select the first choice.\r\n        } else {\r\n            choice = this.getChoice(drag) + 1;\r\n        }\r\n\r\n        var next = this.getUnplacedChoice(group, choice);\r\n        while (next.length === 0 && choice < numChoices) {\r\n            choice++;\r\n            next = this.getUnplacedChoice(group, choice);\r\n        }\r\n\r\n        return next;\r\n    };\r\n\r\n    /**\r\n     * Choose the previous drag in a group.\r\n     *\r\n     * @param {int} group which group.\r\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\r\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getPreviousDrag = function(group, drag) {\r\n        var choice;\r\n\r\n        if (drag.length === 0) {\r\n            choice = this.noOfChoicesInGroup(group);\r\n        } else {\r\n            choice = this.getChoice(drag) - 1;\r\n        }\r\n\r\n        var previous = this.getUnplacedChoice(group, choice);\r\n        while (previous.length === 0 && choice > 1) {\r\n            choice--;\r\n            previous = this.getUnplacedChoice(group, choice);\r\n        }\r\n\r\n        // Does this choice exist?\r\n        return previous;\r\n    };\r\n\r\n    /**\r\n     * Animate an object to the given destination.\r\n     *\r\n     * @param {jQuery} drag the element to be animated.\r\n     * @param {jQuery} target element marking the place to move it to.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.animateTo = function(drag, target) {\r\n        var currentPos = drag.offset(),\r\n            targetPos = target.offset(),\r\n            thisQ = this;\r\n\r\n        M.util.js_pending('qtype_ddimageortext-animate-' + thisQ.containerId);\r\n        // Animate works in terms of CSS position, whereas locating an object\r\n        // on the page works best with jQuery offset() function. So, to get\r\n        // the right target position, we work out the required change in\r\n        // offset() and then add that to the current CSS position.\r\n        drag.animate(\r\n            {\r\n                left: parseInt(drag.css('left')) + targetPos.left - currentPos.left,\r\n                top: parseInt(drag.css('top')) + targetPos.top - currentPos.top\r\n            },\r\n            {\r\n                duration: 'fast',\r\n                done: function() {\r\n                    $('body').trigger('qtype_ddimageortext-dragmoved', [drag, target, thisQ]);\r\n                    M.util.js_complete('qtype_ddimageortext-animate-' + thisQ.containerId);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Detect if a point is inside a given DOM node.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drop the node to check (typically a drop).\r\n     * @return {boolean} whether the point is inside the node.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.isPointInDrop = function(pageX, pageY, drop) {\r\n        var position = drop.offset();\r\n        if (drop.hasClass('draghome')) {\r\n            return pageX >= position.left && pageX < position.left + drop.outerWidth()\r\n                && pageY >= position.top && pageY < position.top + drop.outerHeight();\r\n        }\r\n        return pageX >= position.left && pageX < position.left + drop.width()\r\n            && pageY >= position.top && pageY < position.top + drop.height();\r\n    };\r\n\r\n    /**\r\n     * Set the value of the hidden input for a place, to record what is currently there.\r\n     *\r\n     * @param {int} place which place to set the input value for.\r\n     * @param {int} choice the value to set.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.setInputValue = function(place, choice) {\r\n        this.getRoot().find('input.placeinput.place' + place).val(choice);\r\n    };\r\n\r\n    /**\r\n     * Get the outer div for this question.\r\n     *\r\n     * @returns {jQuery} containing that div.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getRoot = function() {\r\n        return $(document.getElementById(this.containerId));\r\n    };\r\n\r\n    /**\r\n     * Get the img that is the background image.\r\n     * @returns {jQuery} containing that img.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.bgImage = function() {\r\n        return this.getRoot().find('img.dropbackground');\r\n    };\r\n\r\n    /**\r\n     * Get drag home for a given choice.\r\n     *\r\n     * @param {int} group the group.\r\n     * @param {int} choice the choice number.\r\n     * @returns {jQuery} containing that div.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getDragHome = function(group, choice) {\r\n        if (!this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice).is(':visible')) {\r\n            return this.getRoot().find('.dragitemgroup' + group +\r\n                ' .draghome.infinite' +\r\n                '.choice' + choice +\r\n                '.group' + group);\r\n        }\r\n        return this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice);\r\n    };\r\n\r\n    /**\r\n     * Get an unplaced choice for a particular group.\r\n     *\r\n     * @param {int} group the group.\r\n     * @param {int} choice the choice number.\r\n     * @returns {jQuery} jQuery wrapping the unplaced choice. If there isn't one, the jQuery will be empty.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getUnplacedChoice = function(group, choice) {\r\n        return this.getRoot().find('.ddarea .draghome.group' + group + '.choice' + choice + '.unplaced').slice(0, 1);\r\n    };\r\n\r\n    /**\r\n     * Get the drag that is currently in a given place.\r\n     *\r\n     * @param {int} place the place number.\r\n     * @return {jQuery} the current drag (or an empty jQuery if none).\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getCurrentDragInPlace = function(place) {\r\n        return this.getRoot().find('.ddarea .draghome.inplace' + place);\r\n    };\r\n\r\n    /**\r\n     * Return the number of blanks in a given group.\r\n     *\r\n     * @param {int} group the group number.\r\n     * @returns {int} the number of drops.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.noOfDropsInGroup = function(group) {\r\n        return this.getRoot().find('.dropzone.group' + group).length;\r\n    };\r\n\r\n    /**\r\n     * Return the number of choices in a given group.\r\n     *\r\n     * @param {int} group the group number.\r\n     * @returns {int} the number of choices.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.noOfChoicesInGroup = function(group) {\r\n        return this.getRoot().find('.dragitemgroup' + group + ' .draghome').length;\r\n    };\r\n\r\n    /**\r\n     * Return the number at the end of the CSS class name with the given prefix.\r\n     *\r\n     * @param {jQuery} node\r\n     * @param {String} prefix name prefix\r\n     * @returns {Number|null} the suffix if found, else null.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getClassnameNumericSuffix = function(node, prefix) {\r\n        var classes = node.attr('class');\r\n        if (classes !== '') {\r\n            var classesArr = classes.split(' ');\r\n            for (var index = 0; index < classesArr.length; index++) {\r\n                var patt1 = new RegExp('^' + prefix + '([0-9])+$');\r\n                if (patt1.test(classesArr[index])) {\r\n                    var patt2 = new RegExp('([0-9])+$');\r\n                    var match = patt2.exec(classesArr[index]);\r\n                    return Number(match[0]);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Get the choice number of a drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {Number} the choice number.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getChoice = function(drag) {\r\n        return this.getClassnameNumericSuffix(drag, 'choice');\r\n    };\r\n\r\n    /**\r\n     * Given a DOM node that is significant to this question\r\n     * (drag, drop, ...) get the group it belongs to.\r\n     *\r\n     * @param {jQuery} node a DOM node.\r\n     * @returns {Number} the group it belongs to.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getGroup = function(node) {\r\n        return this.getClassnameNumericSuffix(node, 'group');\r\n    };\r\n\r\n    /**\r\n     * Get the place number of a drop, or its corresponding hidden input.\r\n     *\r\n     * @param {jQuery} node the DOM node.\r\n     * @returns {Number} the place number.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getPlace = function(node) {\r\n        return this.getClassnameNumericSuffix(node, 'place');\r\n    };\r\n\r\n    /**\r\n     * Get drag clone for a given drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {jQuery} the drag's clone.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getDragClone = function(drag) {\r\n        return this.getRoot().find('.dragitemgroup' +\r\n            this.getGroup(drag) +\r\n            ' .draghome' +\r\n            '.choice' + this.getChoice(drag) +\r\n            '.group' + this.getGroup(drag) +\r\n            '.dragplaceholder');\r\n    };\r\n\r\n    /**\r\n     * Get infinite drag clones for given drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @param {Boolean} inHome in the home area or not.\r\n     * @returns {jQuery} the drag's clones.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getInfiniteDragClones = function(drag, inHome) {\r\n        if (inHome) {\r\n            return this.getRoot().find('.dragitemgroup' +\r\n                this.getGroup(drag) +\r\n                ' .draghome' +\r\n                '.choice' + this.getChoice(drag) +\r\n                '.group' + this.getGroup(drag) +\r\n                '.infinite').not('.dragplaceholder');\r\n        }\r\n        return this.getRoot().find('.draghome' +\r\n            '.choice' + this.getChoice(drag) +\r\n            '.group' + this.getGroup(drag) +\r\n            '.infinite').not('.dragplaceholder');\r\n    };\r\n\r\n    /**\r\n     * Get drop for a given drag and place.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @param {Integer} currentPlace the current place of drag.\r\n     * @returns {jQuery} the drop's clone.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getDrop = function(drag, currentPlace) {\r\n        return this.getRoot().find('.dropzone.group' + this.getGroup(drag) + '.place' + currentPlace);\r\n    };\r\n\r\n    /**\r\n     * Handle when the window is resized.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleResize = function() {\r\n        var thisQ = this,\r\n            bgRatio = this.bgRatio();\r\n        if (this.isPrinting) {\r\n            bgRatio = 1;\r\n        }\r\n\r\n        this.getRoot().find('.ddarea .dropzone').each(function(i, dropNode) {\r\n            $(dropNode)\r\n                .css('left', parseInt($(dropNode).data('originX')) * parseFloat(bgRatio))\r\n                .css('top', parseInt($(dropNode).data('originY')) * parseFloat(bgRatio));\r\n            thisQ.handleElementScale(dropNode, 'left top');\r\n        });\r\n\r\n        this.getRoot().find('div.droparea .draghome').not('.beingdragged').each(function(key, drag) {\r\n            $(drag)\r\n                .css('left', parseFloat($(drag).data('originX')) * parseFloat(bgRatio))\r\n                .css('top', parseFloat($(drag).data('originY')) * parseFloat(bgRatio));\r\n            thisQ.handleElementScale(drag, 'left top');\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Return the background ratio.\r\n     *\r\n     * @returns {number} Background ratio.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.bgRatio = function() {\r\n        var bgImg = this.bgImage();\r\n        var bgImgNaturalWidth = bgImg.get(0).naturalWidth;\r\n        var bgImgClientWidth = bgImg.width();\r\n\r\n        return bgImgClientWidth / bgImgNaturalWidth;\r\n    };\r\n\r\n    /**\r\n     * Scale the drag if needed.\r\n     *\r\n     * @param {jQuery} element the item to place.\r\n     * @param {String} type scaling type\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleElementScale = function(element, type) {\r\n        var bgRatio = parseFloat(this.bgRatio());\r\n        if (this.isPrinting) {\r\n            bgRatio = 1;\r\n        }\r\n        $(element).css({\r\n            '-webkit-transform': 'scale(' + bgRatio + ')',\r\n            '-moz-transform': 'scale(' + bgRatio + ')',\r\n            '-ms-transform': 'scale(' + bgRatio + ')',\r\n            '-o-transform': 'scale(' + bgRatio + ')',\r\n            'transform': 'scale(' + bgRatio + ')',\r\n            'transform-origin': type\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Calculate z-index value.\r\n     *\r\n     * @returns {number} z-index value\r\n     */\r\n    DragDropOntoImageQuestion.prototype.calculateZIndex = function() {\r\n        var zIndex = 0;\r\n        this.getRoot().find('.ddarea .dropzone, div.droparea .draghome').each(function(i, dropNode) {\r\n            dropNode = $(dropNode);\r\n            // Note that webkit browsers won't return the z-index value from the CSS stylesheet\r\n            // if the element doesn't have a position specified. Instead it'll return \"auto\".\r\n            var itemZIndex = dropNode.css('z-index') ? parseInt(dropNode.css('z-index')) : 0;\r\n\r\n            if (itemZIndex > zIndex) {\r\n                zIndex = itemZIndex;\r\n            }\r\n        });\r\n\r\n        return zIndex;\r\n    };\r\n\r\n    /**\r\n     * Check that the drag is drop to it's clone.\r\n     *\r\n     * @param {jQuery} drag The drag.\r\n     * @param {jQuery} drop The drop.\r\n     * @returns {boolean}\r\n     */\r\n    DragDropOntoImageQuestion.prototype.isDragSameAsDrop = function(drag, drop) {\r\n        return this.getChoice(drag) === this.getChoice(drop) && this.getGroup(drag) === this.getGroup(drop);\r\n    };\r\n\r\n    /**\r\n     * Singleton object that handles all the DragDropOntoImageQuestions\r\n     * on the page, and deals with event dispatching.\r\n     * @type {Object}\r\n     */\r\n    var questionManager = {\r\n\r\n        /**\r\n         * {boolean} ensures that the event handlers are only initialised once per page.\r\n         */\r\n        eventHandlersInitialised: false,\r\n\r\n        /**\r\n         * {Object} ensures that the drag event handlers are only initialised once per question,\r\n         * indexed by containerId (id on the .que div).\r\n         */\r\n        dragEventHandlersInitialised: {},\r\n\r\n        /**\r\n         * {boolean} is printing or not.\r\n         */\r\n        isPrinting: false,\r\n\r\n        /**\r\n         * {boolean} is keyboard navigation or not.\r\n         */\r\n        isKeyboardNavigation: false,\r\n\r\n        /**\r\n         * {Object} all the questions on this page, indexed by containerId (id on the .que div).\r\n         */\r\n        questions: {}, // An object containing all the information about each question on the page.\r\n\r\n        /**\r\n         * Initialise one question.\r\n         *\r\n         * @method\r\n         * @param {String} containerId the id of the div.que that contains this question.\r\n         * @param {boolean} readOnly whether the question is read-only.\r\n         * @param {Array} places data.\r\n         */\r\n        init: function(containerId, readOnly, places) {\r\n            questionManager.questions[containerId] =\r\n                new DragDropOntoImageQuestion(containerId, readOnly, places);\r\n            if (!questionManager.eventHandlersInitialised) {\r\n                questionManager.setupEventHandlers();\r\n                questionManager.eventHandlersInitialised = true;\r\n            }\r\n            if (!questionManager.dragEventHandlersInitialised.hasOwnProperty(containerId)) {\r\n                questionManager.dragEventHandlersInitialised[containerId] = true;\r\n                // We do not use the body event here to prevent the other event on Mobile device, such as scroll event.\r\n                var questionContainer = document.getElementById(containerId);\r\n                if (questionContainer.classList.contains('ddimageortext') &&\r\n                    !questionContainer.classList.contains('qtype_ddimageortext-readonly')) {\r\n                    // TODO: Convert all the jQuery selectors and events to native Javascript.\r\n                    questionManager.addEventHandlersToDrag($(questionContainer).find('.draghome'));\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set up the event handlers that make this question type work. (Done once per page.)\r\n         */\r\n        setupEventHandlers: function() {\r\n            $('body')\r\n                .on('keydown',\r\n                    '.que.ddimageortext:not(.qtype_ddimageortext-readonly) .dropzones .dropzone',\r\n                    questionManager.handleKeyPress)\r\n                .on('keydown',\r\n                    '.que.ddimageortext:not(.qtype_ddimageortext-readonly) .draghome.placed:not(.beingdragged)',\r\n                    questionManager.handleKeyPress)\r\n                .on('qtype_ddimageortext-dragmoved', questionManager.handleDragMoved);\r\n            $(window).on('resize', function() {\r\n                questionManager.handleWindowResize(false);\r\n            });\r\n            window.addEventListener('beforeprint', function() {\r\n                questionManager.isPrinting = true;\r\n                questionManager.handleWindowResize(questionManager.isPrinting);\r\n            });\r\n            window.addEventListener('afterprint', function() {\r\n                questionManager.isPrinting = false;\r\n                questionManager.handleWindowResize(questionManager.isPrinting);\r\n            });\r\n            setTimeout(function() {\r\n                questionManager.fixLayoutIfThingsMoved();\r\n            }, 100);\r\n        },\r\n\r\n        /**\r\n         * Binding the drag/touch event again for newly created element.\r\n         *\r\n         * @param {jQuery} element Element to bind the event\r\n         */\r\n        addEventHandlersToDrag: function(element) {\r\n            // Unbind all the mousedown and touchstart events to prevent double binding.\r\n            element.unbind('mousedown touchstart');\r\n            element.on('mousedown touchstart', questionManager.handleDragStart);\r\n        },\r\n\r\n        /**\r\n         * Handle mouse down / touch start events on drags.\r\n         * @param {Event} e the DOM event.\r\n         */\r\n        handleDragStart: function(e) {\r\n            e.preventDefault();\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleDragStart(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle key down / press events on drags.\r\n         * @param {KeyboardEvent} e\r\n         */\r\n        handleKeyPress: function(e) {\r\n            if (questionManager.isKeyboardNavigation) {\r\n                return;\r\n            }\r\n            questionManager.isKeyboardNavigation = true;\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleKeyPress(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle when the window is resized.\r\n         * @param {boolean} isPrinting\r\n         */\r\n        handleWindowResize: function(isPrinting) {\r\n            for (var containerId in questionManager.questions) {\r\n                if (questionManager.questions.hasOwnProperty(containerId)) {\r\n                    questionManager.questions[containerId].isPrinting = isPrinting;\r\n                    questionManager.questions[containerId].handleResize();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sometimes, despite our best efforts, things change in a way that cannot\r\n         * be specifically caught (e.g. dock expanding or collapsing in Boost).\r\n         * Therefore, we need to periodically check everything is in the right position.\r\n         */\r\n        fixLayoutIfThingsMoved: function() {\r\n            this.handleWindowResize(questionManager.isPrinting);\r\n            // We use setTimeout after finishing work, rather than setInterval,\r\n            // in case positioning things is slow. We want 100 ms gap\r\n            // between executions, not what setInterval does.\r\n            setTimeout(function() {\r\n                questionManager.fixLayoutIfThingsMoved(questionManager.isPrinting);\r\n            }, 100);\r\n        },\r\n\r\n        /**\r\n         * Handle when drag moved.\r\n         *\r\n         * @param {Event} e the event.\r\n         * @param {jQuery} drag the drag\r\n         * @param {jQuery} target the target\r\n         * @param {DragDropOntoImageQuestion} thisQ the question.\r\n         */\r\n        handleDragMoved: function(e, drag, target, thisQ) {\r\n            drag.removeClass('beingdragged').css('z-index', '');\r\n            drag.css('top', target.position().top).css('left', target.position().left);\r\n            target.after(drag);\r\n            target.removeClass('active');\r\n            if (typeof drag.data('unplaced') !== 'undefined' && drag.data('unplaced') === true) {\r\n                drag.removeClass('placed').addClass('unplaced');\r\n                drag.removeAttr('tabindex');\r\n                drag.removeData('unplaced');\r\n                drag.css('top', '')\r\n                    .css('left', '')\r\n                    .css('transform', '');\r\n                if (drag.hasClass('infinite') && thisQ.getInfiniteDragClones(drag, true).length > 1) {\r\n                    thisQ.getInfiniteDragClones(drag, true).first().remove();\r\n                }\r\n            } else {\r\n                drag.data('originX', target.data('originX')).data('originY', target.data('originY'));\r\n                thisQ.handleElementScale(drag, 'left top');\r\n            }\r\n            if (typeof drag.data('isfocus') !== 'undefined' && drag.data('isfocus') === true) {\r\n                drag.focus();\r\n                drag.removeData('isfocus');\r\n            }\r\n            if (typeof target.data('isfocus') !== 'undefined' && target.data('isfocus') === true) {\r\n                target.removeData('isfocus');\r\n            }\r\n            if (questionManager.isKeyboardNavigation) {\r\n                questionManager.isKeyboardNavigation = false;\r\n            }\r\n            if (thisQ.isQuestionInteracted()) {\r\n                // The user has interacted with the draggable items. We need to mark the form as dirty.\r\n                questionManager.handleFormDirty();\r\n                // Save the new answered value.\r\n                thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Given an event, work out which question it effects.\r\n         * @param {Event} e the event.\r\n         * @returns {DragDropOntoImageQuestion|undefined} The question, or undefined.\r\n         */\r\n        getQuestionForEvent: function(e) {\r\n            var containerId = $(e.currentTarget).closest('.que.ddimageortext').attr('id');\r\n            return questionManager.questions[containerId];\r\n        },\r\n\r\n        /**\r\n         * Handle when the form is dirty.\r\n         */\r\n        handleFormDirty: function() {\r\n            const responseForm = document.getElementById('responseform');\r\n            FormChangeChecker.markFormAsDirty(responseForm);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @alias module:qtype_ddimageortext/question\r\n     */\r\n    return {\r\n        init: questionManager.init\r\n    };\r\n});\r\n"],"names":["define","$","dragDrop","keys","FormChangeChecker","DragDropOntoImageQuestion","containerId","readOnly","places","questionAnswer","M","util","js_pending","this","allImagesLoaded","imageLoadingTimeoutId","isPrinting","getRoot","addClass","thisQ","getNotYetLoadedImages","one","waitForAllImagesToBeLoaded","prototype","clearTimeout","length","setTimeout","setupQuestion","find","not","i","imgNode","imageIsLoaded","imgElement","complete","naturalHeight","resizeAllDragsAndDrops","cloneDrags","positionDragsAndDrops","js_complete","each","node","resizeAllDragsAndDropsInGroup","getClassnameNumericSuffix","group","root","dragHomes","maxWidth","maxHeight","drag","Math","max","ceil","offsetWidth","offsetHeight","left","round","top","floor","css","hasOwnProperty","place","label","text","parseInt","get_string","append","width","height","index","dragHome","placeHolder","clone","removeClass","getChoice","getGroup","before","cloneDragsForOneChoice","hasClass","noOfDrags","noOfDropsInGroup","cloneDrag","offset","bgRatio","dropNode","drop","getPlace","xy","data","handleElementScale","dragNode","currentPlace","removeAttr","inputNode","input","choice","val","unplacedDrag","getUnplacedChoice","hiddenDrag","getDragClone","getInfiniteDragClones","after","questionManager","addEventHandlersToDrag","sendDragToDrop","getQuestionAnsweredValues","result","id","value","isQuestionInteracted","oldAnswer","newAnswer","isInteracted","JSON","stringify","Object","forEach","key","handleDragStart","e","target","closest","newIndex","calculateZIndex","prepare","start","setInputValue","hiddenDrop","getDrop","x","y","dragMove","dragEnd","pageX","pageY","highlighted","isPointInDrop","isDragSameAsDrop","placed","placedNode","placedDrag","sendDragHome","oldDrag","getCurrentDragInPlace","focus","attr","animateTo","getDragHome","handleKeyPress","currentDrag","nextDrag","keyCode","space","arrowRight","arrowDown","getNextDrag","arrowLeft","arrowUp","getPreviousDrag","escape","isKeyboardNavigation","preventDefault","numChoices","noOfChoicesInGroup","next","previous","currentPos","targetPos","animate","duration","done","trigger","position","outerWidth","outerHeight","document","getElementById","bgImage","is","slice","prefix","classes","classesArr","split","RegExp","test","match","exec","Number","inHome","handleResize","parseFloat","bgImg","bgImgNaturalWidth","get","naturalWidth","element","type","zIndex","itemZIndex","eventHandlersInitialised","dragEventHandlersInitialised","questions","init","setupEventHandlers","questionContainer","classList","contains","on","handleDragMoved","window","handleWindowResize","addEventListener","fixLayoutIfThingsMoved","unbind","question","getQuestionForEvent","removeData","first","remove","handleFormDirty","currentTarget","responseForm","markFormAsDirty"],"mappings":"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"}