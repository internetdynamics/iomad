{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * JavaScript to allow dragging options to slots (using mouse down or touch) or tab through slots using keyboard.\r\n *\r\n * @module     qtype_ddimageortext/form\r\n * @copyright  2018 The Open University\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/dragdrop'], function($, dragDrop) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Singleton object to handle progressive enhancement of the\r\n     * drag-drop onto image question editing form.\r\n     * @type {Object}\r\n     */\r\n    var dragDropToImageForm = {\r\n        /**\r\n         * @var {Object} maxBgImageSize Properties width and height.\r\n         * @private\r\n         */\r\n        maxBgImageSize: null,\r\n\r\n        /**\r\n         * @var {Object} maxDragImageSize with properties width and height.\r\n         * @private\r\n         */\r\n        maxDragImageSize: null,\r\n\r\n        /**\r\n         * @property {object} fp for interacting with the file pickers.\r\n         * @private\r\n         */\r\n        fp: null, // Object containing functions associated with the file picker.\r\n\r\n        /**\r\n         * Initialise the form javascript features.\r\n         *\r\n         * @method\r\n         */\r\n        init: function() {\r\n            dragDropToImageForm.fp = dragDropToImageForm.filePickers();\r\n            dragDropToImageForm.updateVisibilityOfFilePickers();\r\n            dragDropToImageForm.setOptionsForDragItemSelectors();\r\n            dragDropToImageForm.setupEventHandlers();\r\n            dragDropToImageForm.waitForFilePickerToInitialise();\r\n        },\r\n\r\n        /**\r\n         * Add html for the preview area.\r\n         */\r\n        setupPreviewArea: function() {\r\n            $('#id_previewareaheader').append(\r\n                '<div class=\"ddarea que ddimageortext\">' +\r\n                '  <div id=\"id_droparea\" class=\"droparea\">' +\r\n                '    <img class=\"dropbackground\" />' +\r\n                '    <div class=\"dropzones\"></div>' +\r\n                '  </div>' +\r\n                '  <div class=\"dragitems\"></div>' +\r\n                '</div>');\r\n        },\r\n\r\n        /**\r\n         * Waits for the file-pickers to be sufficiently ready before initialising the preview.\r\n         */\r\n        waitForFilePickerToInitialise: function() {\r\n            if (dragDropToImageForm.fp.file('bgimage').href === null) {\r\n                // It would be better to use an onload or onchange event rather than this timeout.\r\n                // Unfortunately attempts to do this early are overwritten by filepicker during its loading.\r\n                setTimeout(dragDropToImageForm.waitForFilePickerToInitialise, 1000);\r\n                return;\r\n            }\r\n            M.util.js_pending('dragDropToImageForm');\r\n\r\n            // From now on, when a new file gets loaded into the filepicker, update the preview.\r\n            // This is not in the setupEventHandlers section as it needs to be delayed until\r\n            // after filepicker's javascript has finished.\r\n            $('form.mform[data-qtype=\"ddimageortext\"]').on('change', '.filepickerhidden', function() {\r\n                M.util.js_pending('dragDropToImageForm');\r\n                dragDropToImageForm.loadPreviewImage();\r\n            });\r\n            if ($('#id_droparea').length) {\r\n                dragDropToImageForm.loadPreviewImage();\r\n            } else {\r\n                // Setup preview area when the background image is uploaded the first time.\r\n                dragDropToImageForm.setupPreviewArea();\r\n                dragDropToImageForm.loadPreviewImage();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Loads the preview background image.\r\n         */\r\n        loadPreviewImage: function() {\r\n            $('fieldset#id_previewareaheader .dropbackground')\r\n                .one('load', dragDropToImageForm.afterPreviewImageLoaded)\r\n                .attr('src', dragDropToImageForm.fp.file('bgimage').href);\r\n        },\r\n\r\n        /**\r\n         * After the background image is loaded, continue setting up the preview.\r\n         */\r\n        afterPreviewImageLoaded: function() {\r\n            dragDropToImageForm.createDropZones();\r\n            M.util.js_complete('dragDropToImageForm');\r\n        },\r\n\r\n        /**\r\n         * Create, or recreate all the drop zones.\r\n         */\r\n        createDropZones: function() {\r\n            var dropZoneHolder = $('.dropzones');\r\n            dropZoneHolder.empty();\r\n\r\n            var bgimageurl = dragDropToImageForm.fp.file('bgimage').href;\r\n            if (bgimageurl === null) {\r\n                return; // There is not currently a valid preview to update.\r\n            }\r\n\r\n            var numDrops = dragDropToImageForm.form.getFormValue('nodropzone', []);\r\n            for (var dropNo = 0; dropNo < numDrops; dropNo++) {\r\n                var dragNo = dragDropToImageForm.form.getFormValue('drops', [dropNo, 'choice']);\r\n                if (dragNo === '0') {\r\n                    continue;\r\n                }\r\n                dragNo = dragNo - 1;\r\n                var group = dragDropToImageForm.form.getFormValue('drags', [dragNo, 'draggroup']),\r\n                    label = dragDropToImageForm.form.getFormValue('draglabel', [dragNo]);\r\n                if ('image' === dragDropToImageForm.form.getFormValue('drags', [dragNo, 'dragitemtype'])) {\r\n                    var imgUrl = dragDropToImageForm.fp.file('dragitem[' + dragNo + ']').href;\r\n                    if (imgUrl === null) {\r\n                        continue;\r\n                    }\r\n                    // Althoug these are previews of drops, we also add the class name 'drag',\r\n                    dropZoneHolder.append('<img class=\"droppreview group' + group + ' drop' + dropNo +\r\n                            '\" src=\"' + imgUrl + '\" alt=\"' + label + '\" data-drop-no=\"' + dropNo + '\">');\r\n\r\n                } else if (label !== '') {\r\n                    dropZoneHolder.append('<div class=\"droppreview group' + group + ' drop' + dropNo +\r\n                        '\"  data-drop-no=\"' + dropNo + '\">' + label + '</div>');\r\n                }\r\n            }\r\n\r\n            dragDropToImageForm.waitForAllDropImagesToBeLoaded();\r\n        },\r\n\r\n        /**\r\n         * This polls until all the drop-zone images have loaded, and then calls updateDropZones().\r\n         */\r\n        waitForAllDropImagesToBeLoaded: function() {\r\n            var notYetLoadedImages = $('.dropzones img').not(function(i, imgNode) {\r\n                return dragDropToImageForm.imageIsLoaded(imgNode);\r\n            });\r\n\r\n            if (notYetLoadedImages.length > 0) {\r\n                setTimeout(function() {\r\n                    dragDropToImageForm.waitForAllDropImagesToBeLoaded();\r\n                }, 100);\r\n                return;\r\n            }\r\n\r\n            dragDropToImageForm.updateDropZones();\r\n        },\r\n\r\n        /**\r\n         * Check if an image has loaded without errors.\r\n         *\r\n         * @param {HTMLImageElement} imgElement an image.\r\n         * @returns {boolean} true if this image has loaded without errors.\r\n         */\r\n        imageIsLoaded: function(imgElement) {\r\n            return imgElement.complete && imgElement.naturalHeight !== 0;\r\n        },\r\n\r\n        /**\r\n         * Set the size and position of all the drop zones.\r\n         */\r\n        updateDropZones: function() {\r\n            var bgimageurl = dragDropToImageForm.fp.file('bgimage').href;\r\n            if (bgimageurl === null) {\r\n                return; // There is not currently a valid preview to update.\r\n            }\r\n\r\n            var dropBackgroundPosition = $('fieldset#id_previewareaheader .dropbackground').offset(),\r\n                numDrops = dragDropToImageForm.form.getFormValue('nodropzone', []);\r\n\r\n            // Move each drop to the right position and update the text.\r\n            for (var dropNo = 0; dropNo < numDrops; dropNo++) {\r\n                var drop = $('.dropzones .drop' + dropNo);\r\n                if (drop.length === 0) {\r\n                    continue;\r\n                }\r\n                var dragNo = dragDropToImageForm.form.getFormValue('drops', [dropNo, 'choice']) - 1;\r\n\r\n                drop.offset({\r\n                    left: dropBackgroundPosition.left +\r\n                            parseInt(dragDropToImageForm.form.getFormValue('drops', [dropNo, 'xleft'])),\r\n                    top: dropBackgroundPosition.top +\r\n                            parseInt(dragDropToImageForm.form.getFormValue('drops', [dropNo, 'ytop']))\r\n                });\r\n\r\n                var label = dragDropToImageForm.form.getFormValue('draglabel', [dragNo]);\r\n                if (drop.is('img')) {\r\n                    drop.attr('alt', label);\r\n                } else {\r\n                    drop.html(label);\r\n                }\r\n            }\r\n\r\n            // Resize them to the same size.\r\n            $('.dropzones .droppreview').css('padding', '0');\r\n            var numGroups = $('.draggroup select').first().find('option').length;\r\n            for (var group = 1; group <= numGroups; group++) {\r\n                dragDropToImageForm.resizeAllDragsAndDropsInGroup(group);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * In a given group, set all the drags and drops to be the same size.\r\n         *\r\n         * @param {int} group the group number.\r\n         */\r\n        resizeAllDragsAndDropsInGroup: function(group) {\r\n            var drops = $('.dropzones .droppreview.group' + group),\r\n                maxWidth = 0,\r\n                maxHeight = 0;\r\n\r\n            // Find the maximum size of any drag in this groups.\r\n            drops.each(function(i, drop) {\r\n                maxWidth = Math.max(maxWidth, Math.ceil(drop.offsetWidth));\r\n                maxHeight = Math.max(maxHeight, Math.ceil(drop.offsetHeight));\r\n            });\r\n\r\n            // The size we will want to set is a bit bigger than this.\r\n            maxWidth += 10;\r\n            maxHeight += 10;\r\n\r\n            // Set each drag home to that size.\r\n            drops.each(function(i, drop) {\r\n                var left = Math.round((maxWidth - drop.offsetWidth) / 2),\r\n                    top = Math.floor((maxHeight - drop.offsetHeight) / 2);\r\n                // Set top and left padding so the item is centred.\r\n                $(drop).css({\r\n                    'padding-left': left + 'px',\r\n                    'padding-right': (maxWidth - drop.offsetWidth - left) + 'px',\r\n                    'padding-top': top + 'px',\r\n                    'padding-bottom': (maxHeight - drop.offsetHeight - top) + 'px'\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Events linked to form actions.\r\n         */\r\n        setupEventHandlers: function() {\r\n            // Changes to settings in the draggable items section.\r\n            $('fieldset#id_draggableitemheader')\r\n                .on('change input', 'input, select', function(e) {\r\n                    var input = $(e.target).closest('select, input');\r\n                    if (input.hasClass('dragitemtype')) {\r\n                        dragDropToImageForm.updateVisibilityOfFilePickers();\r\n                    }\r\n\r\n                    dragDropToImageForm.setOptionsForDragItemSelectors();\r\n\r\n                    if (input.is('.dragitemtype, .draggroup')) {\r\n                        dragDropToImageForm.createDropZones();\r\n                    } else if (input.is('.draglabel')) {\r\n                        dragDropToImageForm.updateDropZones();\r\n                    }\r\n                });\r\n\r\n            // Changes to Drop zones section: left, top and drag item.\r\n            $('fieldset#id_dropzoneheader').on('change input', 'input, select', function(e) {\r\n                var input = $(e.target).closest('select, input');\r\n                if (input.is('select')) {\r\n                    dragDropToImageForm.createDropZones();\r\n                } else {\r\n                    dragDropToImageForm.updateDropZones();\r\n                }\r\n            });\r\n\r\n            // Moving drop zones in the preview.\r\n            $('fieldset#id_previewareaheader').on('mousedown touchstart', '.droppreview', function(e) {\r\n                dragDropToImageForm.dragStart(e);\r\n            });\r\n\r\n            $(window).on('resize', function() {\r\n                dragDropToImageForm.updateDropZones();\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Update all the drag item filepickers, so they are only shown for\r\n         */\r\n        updateVisibilityOfFilePickers: function() {\r\n            var numDrags = dragDropToImageForm.form.getFormValue('noitems', []);\r\n            for (var dragNo = 0; dragNo < numDrags; dragNo++) {\r\n                var picker = $('input#id_dragitem_' + dragNo).closest('.fitem_ffilepicker');\r\n                if ('image' === dragDropToImageForm.form.getFormValue('drags', [dragNo, 'dragitemtype'])) {\r\n                    picker.show();\r\n                } else {\r\n                    picker.hide();\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n        setOptionsForDragItemSelectors: function() {\r\n            var dragItemOptions = {'0': ''},\r\n                numDrags = dragDropToImageForm.form.getFormValue('noitems', []),\r\n                numDrops = dragDropToImageForm.form.getFormValue('nodropzone', []);\r\n\r\n            // Work out the list of options.\r\n            for (var dragNo = 0; dragNo < numDrags; dragNo++) {\r\n                var label = dragDropToImageForm.form.getFormValue('draglabel', [dragNo]);\r\n                var file = dragDropToImageForm.fp.file(dragDropToImageForm.form.toNameWithIndex('dragitem', [dragNo]));\r\n                if ('image' === dragDropToImageForm.form.getFormValue('drags', [dragNo, 'dragitemtype']) && file.name !== null) {\r\n                    dragItemOptions[dragNo + 1] = (dragNo + 1) + '. ' + label + ' (' + file.name + ')';\r\n                } else if (label !== '') {\r\n                    dragItemOptions[dragNo + 1] = (dragNo + 1) + '. ' + label;\r\n                }\r\n            }\r\n\r\n            // Initialise each select.\r\n            for (var dropNo = 0; dropNo < numDrops; dropNo++) {\r\n                var selector = $('#id_drops_' + dropNo + '_choice');\r\n\r\n                var selectedvalue = selector.val();\r\n                selector.find('option').remove();\r\n                for (var value in dragItemOptions) {\r\n                    if (!dragItemOptions.hasOwnProperty(value)) {\r\n                        continue;\r\n                    }\r\n                    selector.append('<option value=\"' + value + '\">' + dragItemOptions[value] + '</option>');\r\n                    var optionnode = selector.find('option[value=\"' + value + '\"]');\r\n                    if (parseInt(value) === parseInt(selectedvalue)) {\r\n                        optionnode.attr('selected', true);\r\n                    } else if (dragDropToImageForm.isItemUsed(parseInt(value))) {\r\n                        optionnode.attr('disabled', true);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Checks if the specified drag option is already used somewhere.\r\n         *\r\n         * @param {Number} value of the drag item to check\r\n         * @return {Boolean} true if item is allocated to dropzone\r\n         */\r\n        isItemUsed: function(value) {\r\n            if (value === 0) {\r\n                return false; // None option can always be selected.\r\n            }\r\n\r\n            if (dragDropToImageForm.form.getFormValue('drags', [value - 1, 'infinite'])) {\r\n                return false; // Infinite, so can't be used up.\r\n            }\r\n\r\n            return $('fieldset#id_dropzoneheader select').filter(function(i, selectNode) {\r\n                return parseInt($(selectNode).val()) === value;\r\n            }).length !== 0;\r\n        },\r\n\r\n        /**\r\n         * Handles when a dropzone in dragged in the preview.\r\n         * @param {Object} e Event object\r\n         */\r\n        dragStart: function(e) {\r\n            var drop = $(e.target).closest('.droppreview');\r\n\r\n            var info = dragDrop.prepare(e);\r\n            if (!info.start) {\r\n                return;\r\n            }\r\n\r\n            dragDrop.start(e, drop, function(x, y, drop) {\r\n                dragDropToImageForm.dragMove(drop);\r\n            }, function() {\r\n                dragDropToImageForm.dragEnd();\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Handles update while a drop is being dragged.\r\n         *\r\n         * @param {jQuery} drop the drop preview being moved.\r\n         */\r\n        dragMove: function(drop) {\r\n            var backgroundImage = $('fieldset#id_previewareaheader .dropbackground'),\r\n                backgroundPosition = backgroundImage.offset(),\r\n                dropNo = drop.data('dropNo'),\r\n                dropPosition = drop.offset(),\r\n                left = Math.round(dropPosition.left - backgroundPosition.left),\r\n                top = Math.round(dropPosition.top - backgroundPosition.top);\r\n\r\n            // Constrain coordinates to be inside the background.\r\n            left = Math.round(Math.max(0, Math.min(left, backgroundImage.outerWidth() - drop.outerWidth())));\r\n            top = Math.round(Math.max(0, Math.min(top, backgroundImage.outerHeight() - drop.outerHeight())));\r\n\r\n            // Update the form.\r\n            dragDropToImageForm.form.setFormValue('drops', [dropNo, 'xleft'], left);\r\n            dragDropToImageForm.form.setFormValue('drops', [dropNo, 'ytop'], top);\r\n        },\r\n\r\n        /**\r\n         * Handles when the drag ends.\r\n         */\r\n        dragEnd: function() {\r\n            // Redraw, in case the position was constrained.\r\n            dragDropToImageForm.updateDropZones();\r\n        },\r\n\r\n        /**\r\n         * Low level operations on form.\r\n         */\r\n        form: {\r\n            toNameWithIndex: function(name, indexes) {\r\n                var indexString = name;\r\n                for (var i = 0; i < indexes.length; i++) {\r\n                    indexString = indexString + '[' + indexes[i] + ']';\r\n                }\r\n                return indexString;\r\n            },\r\n\r\n            getEl: function(name, indexes) {\r\n                var form = $('form.mform[data-qtype=\"ddimageortext\"]')[0];\r\n                return form.elements[this.toNameWithIndex(name, indexes)];\r\n            },\r\n\r\n            /**\r\n             * Helper to get the value of a form elements with name like \"drops[0][xleft]\".\r\n             *\r\n             * @param {String} name the base name, e.g. 'drops'.\r\n             * @param {String[]} indexes the indexes, e.g. ['0', 'xleft'].\r\n             * @return {String} the value of that field.\r\n             */\r\n            getFormValue: function(name, indexes) {\r\n                var el = this.getEl(name, indexes);\r\n                if (!el.type) {\r\n                    el = el[el.length - 1];\r\n                }\r\n                if (el.type === 'checkbox') {\r\n                    return el.checked;\r\n                } else {\r\n                    return el.value;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Helper to get the value of a form elements with name like \"drops[0][xleft]\".\r\n             *\r\n             * @param {String} name the base name, e.g. 'drops'.\r\n             * @param {String[]} indexes the indexes, e.g. ['0', 'xleft'].\r\n             * @param {String|Number} value the value to set.\r\n             */\r\n            setFormValue: function(name, indexes, value) {\r\n                var el = this.getEl(name, indexes);\r\n                if (el.type === 'checkbox') {\r\n                    el.checked = value;\r\n                } else {\r\n                    el.value = value;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Utility to get the file name and url from the filepicker.\r\n         * @returns {Object} object containing functions {file, name}\r\n         */\r\n        filePickers: function() {\r\n            var draftItemIdsToName;\r\n            var nameToParentNode;\r\n\r\n            if (draftItemIdsToName === undefined) {\r\n                draftItemIdsToName = {};\r\n                nameToParentNode = {};\r\n                var fp = $('form.mform[data-qtype=\"ddimageortext\"] input.filepickerhidden');\r\n                fp.each(function(index, filepicker) {\r\n                    draftItemIdsToName[filepicker.value] = filepicker.name;\r\n                    nameToParentNode[filepicker.name] = filepicker.parentNode;\r\n                });\r\n            }\r\n\r\n            return {\r\n                file: function(name) {\r\n                    var parentNode = $(nameToParentNode[name]);\r\n                    var fileAnchor = parentNode.find('div.filepicker-filelist a');\r\n                    if (fileAnchor.length) {\r\n                        return {href: fileAnchor.get(0).href, name: fileAnchor.get(0).innerHTML};\r\n                    } else {\r\n                        return {href: null, name: null};\r\n                    }\r\n                },\r\n\r\n                name: function(draftitemid) {\r\n                    return draftItemIdsToName[draftitemid];\r\n                }\r\n            };\r\n        }\r\n    };\r\n\r\n    return {\r\n        init: dragDropToImageForm.init\r\n    };\r\n});\r\n"],"names":["define","$","dragDrop","dragDropToImageForm","maxBgImageSize","maxDragImageSize","fp","init","filePickers","updateVisibilityOfFilePickers","setOptionsForDragItemSelectors","setupEventHandlers","waitForFilePickerToInitialise","setupPreviewArea","append","file","href","M","util","js_pending","on","loadPreviewImage","length","setTimeout","one","afterPreviewImageLoaded","attr","createDropZones","js_complete","dropZoneHolder","empty","numDrops","form","getFormValue","dropNo","dragNo","group","label","imgUrl","waitForAllDropImagesToBeLoaded","not","i","imgNode","imageIsLoaded","updateDropZones","imgElement","complete","naturalHeight","dropBackgroundPosition","offset","drop","left","parseInt","top","is","html","css","numGroups","first","find","resizeAllDragsAndDropsInGroup","drops","maxWidth","maxHeight","each","Math","max","ceil","offsetWidth","offsetHeight","round","floor","e","input","target","closest","hasClass","dragStart","window","numDrags","picker","show","hide","dragItemOptions","toNameWithIndex","name","selector","selectedvalue","val","value","remove","hasOwnProperty","optionnode","isItemUsed","filter","selectNode","prepare","start","x","y","dragMove","dragEnd","backgroundImage","backgroundPosition","data","dropPosition","min","outerWidth","outerHeight","setFormValue","indexes","indexString","getEl","elements","this","el","type","checked","draftItemIdsToName","nameToParentNode","undefined","index","filepicker","parentNode","fileAnchor","get","innerHTML","draftitemid"],"mappings":"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"}