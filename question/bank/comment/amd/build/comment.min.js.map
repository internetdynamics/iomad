{"version":3,"file":"comment.min.js","sources":["../src/comment.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Column selector js.\r\n *\r\n * @module    qbank_comment/comment\r\n * @copyright 2021 Catalyst IT Australia Pty Ltd\r\n * @author    Safat Shahin <safatshahin@catalyst-au.net>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Fragment from 'core/fragment';\r\nimport * as Str from 'core/str';\r\nimport ModalEvents from 'core/modal_events';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport Notification from 'core/notification';\r\n\r\n/**\r\n * Event listeners for the module.\r\n *\r\n * @method clickEvent\r\n * @param {Number} questionId\r\n * @param {Number} courseID\r\n * @param {Number} contextId\r\n */\r\nconst commentEvent = (questionId, courseID, contextId) => {\r\n    let args = {\r\n        questionid: questionId,\r\n        courseid: courseID\r\n    };\r\n    ModalFactory.create({\r\n        type: ModalFactory.types.SAVE_CANCEL,\r\n        title: Str.get_string('commentheader', 'qbank_comment'),\r\n        body: Fragment.loadFragment('qbank_comment', 'question_comment', contextId, args),\r\n        large: true,\r\n    }).then((modal) => {\r\n        let root = modal.getRoot();\r\n\r\n        // Don't display the default add comment link in the modal.\r\n        root.on(ModalEvents.bodyRendered, function() {\r\n            const submitlink = document.querySelectorAll(\"div.comment-area a\")[0];\r\n            submitlink.style.display = 'none';\r\n        });\r\n\r\n        // Version selection event.\r\n        root.on('change', '#question_comment_version_dropdown', function(e) {\r\n            args.questionid = e.target.value;\r\n            modal.setBody(Fragment.loadFragment('qbank_comment', 'question_comment', contextId, args));\r\n        });\r\n\r\n        // Get the required strings and updated the modal button text labels.\r\n        Str.get_strings([\r\n            {key: 'addcomment', component: 'qbank_comment'},\r\n            {key: 'close', component: 'qbank_comment'},\r\n        ]).then((strings) => {\r\n            modal.setButtonText('save', strings[0]);\r\n            modal.setButtonText('cancel', strings[1]);\r\n            return;\r\n        }).fail(Notification.exception);\r\n\r\n        root.on(ModalEvents.cancel, function() {\r\n            location.reload();\r\n            modal.hide();\r\n        });\r\n\r\n        // Handle adding the comment when the button in the modal is clicked.\r\n        root.on(ModalEvents.save, function(e) {\r\n            e.preventDefault();\r\n            const submitlink = document.querySelectorAll(\"div.comment-area a\")[0];\r\n            const textarea = document.querySelectorAll(\"div.comment-area textarea\")[0];\r\n\r\n            // Check there is a valid comment to add, and trigger adding if there is.\r\n            if (textarea.value != textarea.getAttribute('aria-label') && textarea.value != '') {\r\n                submitlink.click();\r\n            }\r\n\r\n        });\r\n        root.on('click', 'button[data-action=\"hide\"]', () => {\r\n            location.reload();\r\n            modal.hide();\r\n        });\r\n        modal.show();\r\n        return modal;\r\n    }).fail(Notification.exception);\r\n};\r\n\r\n/**\r\n * Entrypoint of the js.\r\n *\r\n * @method init\r\n * @param {string} questionSelector the question comment identifier.\r\n */\r\nexport const init = (questionSelector) => {\r\n    const target = document.querySelector(questionSelector);\r\n    target.addEventListener('click', () => {\r\n        // Call for the event listener to listed for clicks in any comment count row.\r\n        commentEvent(target.dataset.questionid, target.dataset.courseid, target.dataset.contextid);\r\n    });\r\n};\r\n"],"names":["questionSelector","target","document","querySelector","addEventListener","questionId","courseID","contextId","args","questionid","courseid","create","type","ModalFactory","types","SAVE_CANCEL","title","Str","get_string","body","Fragment","loadFragment","large","then","modal","root","getRoot","on","ModalEvents","bodyRendered","querySelectorAll","style","display","e","value","setBody","get_strings","key","component","strings","setButtonText","fail","Notification","exception","cancel","location","reload","hide","save","preventDefault","submitlink","textarea","getAttribute","click","show","commentEvent","dataset","contextid"],"mappings":";;;;;;;;g8BAyGqBA,yBACXC,OAASC,SAASC,cAAcH,kBACtCC,OAAOG,iBAAiB,SAAS,KArEhB,EAACC,WAAYC,SAAUC,iBACpCC,KAAO,CACPC,WAAYJ,WACZK,SAAUJ,iCAEDK,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBC,MAAOC,IAAIC,WAAW,gBAAiB,iBACvCC,KAAMC,kBAASC,aAAa,gBAAiB,mBAAoBd,UAAWC,MAC5Ec,OAAO,IACRC,MAAMC,YACDC,KAAOD,MAAME,iBAGjBD,KAAKE,GAAGC,sBAAYC,cAAc,WACX3B,SAAS4B,iBAAiB,sBAAsB,GACxDC,MAAMC,QAAU,UAI/BP,KAAKE,GAAG,SAAU,sCAAsC,SAASM,GAC7DzB,KAAKC,WAAawB,EAAEhC,OAAOiC,MAC3BV,MAAMW,QAAQf,kBAASC,aAAa,gBAAiB,mBAAoBd,UAAWC,UAIxFS,IAAImB,YAAY,CACZ,CAACC,IAAK,aAAcC,UAAW,iBAC/B,CAACD,IAAK,QAASC,UAAW,mBAC3Bf,MAAMgB,UACLf,MAAMgB,cAAc,OAAQD,QAAQ,IACpCf,MAAMgB,cAAc,SAAUD,QAAQ,OAEvCE,KAAKC,sBAAaC,WAErBlB,KAAKE,GAAGC,sBAAYgB,QAAQ,WACxBC,SAASC,SACTtB,MAAMuB,UAIVtB,KAAKE,GAAGC,sBAAYoB,MAAM,SAASf,GAC/BA,EAAEgB,uBACIC,WAAahD,SAAS4B,iBAAiB,sBAAsB,GAC7DqB,SAAWjD,SAAS4B,iBAAiB,6BAA6B,GAGpEqB,SAASjB,OAASiB,SAASC,aAAa,eAAmC,IAAlBD,SAASjB,OAClEgB,WAAWG,WAInB5B,KAAKE,GAAG,QAAS,8BAA8B,KAC3CkB,SAASC,SACTtB,MAAMuB,UAEVvB,MAAM8B,OACC9B,SACRiB,KAAKC,sBAAaC,YAajBY,CAAatD,OAAOuD,QAAQ/C,WAAYR,OAAOuD,QAAQ9C,SAAUT,OAAOuD,QAAQC"}