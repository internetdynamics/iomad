{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A javascript module to handle course ajax actions.\r\n *\r\n * @module     core_course/repository\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Ajax from 'core/ajax';\r\n\r\n/**\r\n * Get the list of courses that the logged in user is enrolled in for a given\r\n * timeline classification.\r\n *\r\n * @param {string} classification past, inprogress, or future\r\n * @param {int} limit Only return this many results\r\n * @param {int} offset Skip this many results from the start of the result set\r\n * @param {string} sort Column to sort by and direction, e.g. 'shortname asc'\r\n * @return {object} jQuery promise resolved with courses.\r\n */\r\nconst getEnrolledCoursesByTimelineClassification = (classification, limit, offset, sort) => {\r\n    const args = {\r\n        classification: classification\r\n    };\r\n\r\n    if (typeof limit !== 'undefined') {\r\n        args.limit = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n        args.offset = offset;\r\n    }\r\n\r\n    if (typeof sort !== 'undefined') {\r\n        args.sort = sort;\r\n    }\r\n\r\n    const request = {\r\n        methodname: 'core_course_get_enrolled_courses_by_timeline_classification',\r\n        args: args\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Get a list of courses that the logged in user is enrolled in, where they have at least one action event,\r\n * for a given timeline classification.\r\n *\r\n * @param {string} classification past, inprogress, or future\r\n * @param {int} limit The maximum number of courses to return\r\n * @param {int} offset Skip this many results from the start of the result set\r\n * @param {string} sort Column to sort by and direction, e.g. 'shortname asc'\r\n * @param {string} searchValue Optional text search value\r\n * @param {int} eventsFrom Optional start timestamp (inclusive) that the course should have event(s) in\r\n * @param {int} eventsTo Optional end timestamp (inclusive) that the course should have event(s) in\r\n * @return {object} jQuery promise resolved with courses.\r\n */\r\n const getEnrolledCoursesWithEventsByTimelineClassification = (classification, limit = 0, offset = 0, sort = null,\r\n        searchValue = null, eventsFrom = null, eventsTo = null) => {\r\n\r\n    const args = {\r\n        classification: classification,\r\n        limit: limit,\r\n        offset: offset,\r\n        sort: sort,\r\n        eventsfrom: eventsFrom,\r\n        eventsto: eventsTo,\r\n        searchvalue: searchValue,\r\n    };\r\n\r\n    const request = {\r\n        methodname: 'core_course_get_enrolled_courses_with_action_events_by_timeline_classification',\r\n        args: args\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Get the list of courses that the user has most recently accessed.\r\n *\r\n * @method getLastAccessedCourses\r\n * @param {int} userid User from which the courses will be obtained\r\n * @param {int} limit Only return this many results\r\n * @param {int} offset Skip this many results from the start of the result set\r\n * @param {string} sort Column to sort by and direction, e.g. 'shortname asc'\r\n * @return {promise} Resolved with an array of courses\r\n */\r\nconst getLastAccessedCourses = (userid, limit, offset, sort) => {\r\n    const args = {};\r\n\r\n    if (typeof userid !== 'undefined') {\r\n        args.userid = userid;\r\n    }\r\n\r\n    if (typeof limit !== 'undefined') {\r\n        args.limit = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n        args.offset = offset;\r\n    }\r\n\r\n    if (typeof sort !== 'undefined') {\r\n        args.sort = sort;\r\n    }\r\n\r\n    const request = {\r\n        methodname: 'core_course_get_recent_courses',\r\n        args: args\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Get the list of users enrolled in this cmid.\r\n *\r\n * @param {Number} cmid Course Module from which the users will be obtained\r\n * @param {Number} groupID Group ID from which the users will be obtained\r\n * @param {Boolean} onlyActive Whether to fetch only the active enrolled users or all enrolled users in the course.\r\n * @returns {Promise} Promise containing a list of users\r\n */\r\nconst getEnrolledUsersFromCourseModuleID = (cmid, groupID, onlyActive = false) => {\r\n    var request = {\r\n        methodname: 'core_course_get_enrolled_users_by_cmid',\r\n        args: {\r\n            cmid: cmid,\r\n            groupid: groupID,\r\n            onlyactive: onlyActive,\r\n        },\r\n    };\r\n\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Toggle the completion state of an activity with manual completion.\r\n *\r\n * @param {Number} cmid The course module ID.\r\n * @param {Boolean} completed Whether to set as complete or not.\r\n * @returns {object} jQuery promise\r\n */\r\nconst toggleManualCompletion = (cmid, completed) => {\r\n    const request = {\r\n        methodname: 'core_completion_update_activity_completion_status_manually',\r\n        args: {\r\n            cmid,\r\n            completed,\r\n        }\r\n    };\r\n    return Ajax.call([request])[0];\r\n};\r\n\r\nexport default {\r\n    getEnrolledCoursesByTimelineClassification,\r\n    getLastAccessedCourses,\r\n    getUsersFromCourseModuleID: getEnrolledUsersFromCourseModuleID,\r\n    toggleManualCompletion,\r\n    getEnrolledCoursesWithEventsByTimelineClassification,\r\n};\r\n"],"names":["getEnrolledCoursesByTimelineClassification","classification","limit","offset","sort","args","request","methodname","Ajax","call","getLastAccessedCourses","userid","getUsersFromCourseModuleID","cmid","groupID","onlyActive","groupid","onlyactive","toggleManualCompletion","completed","getEnrolledCoursesWithEventsByTimelineClassification","searchValue","eventsFrom","eventsTo","eventsfrom","eventsto","searchvalue"],"mappings":";;;;;;;sJA0Ke,CACXA,2CAxI+C,CAACC,eAAgBC,MAAOC,OAAQC,cACzEC,KAAO,CACTJ,eAAgBA,qBAGC,IAAVC,QACPG,KAAKH,MAAQA,YAGK,IAAXC,SACPE,KAAKF,OAASA,aAGE,IAATC,OACPC,KAAKD,KAAOA,YAGVE,QAAU,CACZC,WAAY,8DACZF,KAAMA,aAGHG,cAAKC,KAAK,CAACH,UAAU,IAmH5BI,uBApE2B,CAACC,OAAQT,MAAOC,OAAQC,cAC7CC,KAAO,QAES,IAAXM,SACPN,KAAKM,OAASA,aAGG,IAAVT,QACPG,KAAKH,MAAQA,YAGK,IAAXC,SACPE,KAAKF,OAASA,aAGE,IAATC,OACPC,KAAKD,KAAOA,YAGVE,QAAU,CACZC,WAAY,iCACZF,KAAMA,aAGHG,cAAKC,KAAK,CAACH,UAAU,IA6C5BM,2BAlCuC,SAACC,KAAMC,aAASC,uEACnDT,QAAU,CACVC,WAAY,yCACZF,KAAM,CACFQ,KAAMA,KACNG,QAASF,QACTG,WAAYF,oBAIbP,cAAKC,KAAK,CAACH,UAAU,IAyB5BY,uBAf2B,CAACL,KAAMM,mBAC5Bb,QAAU,CACZC,WAAY,6DACZF,KAAM,CACFQ,KAAAA,KACAM,UAAAA,mBAGDX,cAAKC,KAAK,CAACH,UAAU,IAQ5Bc,qDAtG0D,SAACnB,oBAAgBC,6DAAQ,EAAGC,8DAAS,EAAGC,4DAAO,KACrGiB,mEAAc,KAAMC,kEAAa,KAAMC,gEAAW,WAEhDlB,KAAO,CACTJ,eAAgBA,eAChBC,MAAOA,MACPC,OAAQA,OACRC,KAAMA,KACNoB,WAAYF,WACZG,SAAUF,SACVG,YAAaL,aAGXf,QAAU,CACZC,WAAY,iFACZF,KAAMA,aAGHG,cAAKC,KAAK,CAACH,UAAU"}