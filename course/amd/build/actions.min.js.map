{"version":3,"file":"actions.min.js","sources":["../src/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Various actions on modules and sections in the editing mode - hiding, duplicating, deleting, etc.\r\n *\r\n * @module     core_course/actions\r\n * @copyright  2016 Marina Glancy\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.3\r\n */\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'core/ajax',\r\n        'core/templates',\r\n        'core/notification',\r\n        'core/str',\r\n        'core/url',\r\n        'core/yui',\r\n        'core/modal_copy_to_clipboard',\r\n        'core/modal_factory',\r\n        'core/modal_events',\r\n        'core/key_codes',\r\n        'core/log',\r\n        'core_courseformat/courseeditor',\r\n        'core/event_dispatcher',\r\n        'core_course/events'\r\n    ],\r\n    function(\r\n        $,\r\n        ajax,\r\n        templates,\r\n        notification,\r\n        str,\r\n        url,\r\n        Y,\r\n        ModalCopyToClipboard,\r\n        ModalFactory,\r\n        ModalEvents,\r\n        KeyCodes,\r\n        log,\r\n        editor,\r\n        EventDispatcher,\r\n        CourseEvents\r\n    ) {\r\n\r\n        // Eventually, core_courseformat/local/content/actions will handle all actions for\r\n        // component compatible formats and the default actions.js won't be necessary anymore.\r\n        // Meanwhile, we filter the migrated actions.\r\n        const componentActions = [\r\n            'moveSection', 'moveCm', 'addSection', 'deleteSection', 'cmDelete', 'cmDuplicate', 'sectionHide', 'sectionShow',\r\n            'cmHide', 'cmShow', 'cmStealth', 'sectionHighlight', 'sectionUnhighlight', 'cmMoveRight', 'cmMoveLeft',\r\n        ];\r\n\r\n        // The course reactive instance.\r\n        const courseeditor = editor.getCurrentCourseEditor();\r\n\r\n        // The current course format name (loaded on init).\r\n        let formatname;\r\n\r\n        var CSS = {\r\n            EDITINPROGRESS: 'editinprogress',\r\n            SECTIONDRAGGABLE: 'sectiondraggable',\r\n            EDITINGMOVE: 'editing_move'\r\n        };\r\n        var SELECTOR = {\r\n            ACTIVITYLI: 'li.activity',\r\n            ACTIONAREA: '.actions',\r\n            ACTIVITYACTION: 'a.cm-edit-action',\r\n            MENU: '.moodle-actionmenu[data-enhance=moodle-core-actionmenu]',\r\n            TOGGLE: '.toggle-display,.dropdown-toggle',\r\n            SECTIONLI: 'li.section',\r\n            SECTIONACTIONMENU: '.section_action_menu',\r\n            SECTIONITEM: '[data-for=\"section_title\"]',\r\n            ADDSECTIONS: '.changenumsections [data-add-sections]',\r\n            SECTIONBADGES: '[data-region=\"sectionbadges\"]',\r\n        };\r\n\r\n        Y.use('moodle-course-coursebase', function() {\r\n            var courseformatselector = M.course.format.get_section_selector();\r\n            if (courseformatselector) {\r\n                SELECTOR.SECTIONLI = courseformatselector;\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Dispatch event wrapper.\r\n         *\r\n         * Old jQuery events will be replaced by native events gradually.\r\n         *\r\n         * @method dispatchEvent\r\n         * @param {String} eventName The name of the event\r\n         * @param {Object} detail Any additional details to pass into the eveent\r\n         * @param {Node|HTMLElement} container The point at which to dispatch the event\r\n         * @param {Object} options\r\n         * @param {Boolean} options.bubbles Whether to bubble up the DOM\r\n         * @param {Boolean} options.cancelable Whether preventDefault() can be called\r\n         * @param {Boolean} options.composed Whether the event can bubble across the ShadowDOM boundary\r\n         * @returns {CustomEvent}\r\n         */\r\n        const dispatchEvent = function(eventName, detail, container, options) {\r\n            // Most actions still uses jQuery node instead of regular HTMLElement.\r\n            if (!(container instanceof Element) && container.get !== undefined) {\r\n                container = container.get(0);\r\n            }\r\n            return EventDispatcher.dispatchEvent(eventName, detail, container, options);\r\n        };\r\n\r\n        /**\r\n         * Wrapper for Y.Moodle.core_course.util.cm.getId\r\n         *\r\n         * @param {JQuery} element\r\n         * @returns {Integer}\r\n         */\r\n        var getModuleId = function(element) {\r\n            // Check if we have a data-id first.\r\n            const item = element.get(0);\r\n            if (item.dataset.id) {\r\n                return item.dataset.id;\r\n            }\r\n            // Use YUI way if data-id is not present.\r\n            let id;\r\n            Y.use('moodle-course-util', function(Y) {\r\n                id = Y.Moodle.core_course.util.cm.getId(Y.Node(item));\r\n            });\r\n            return id;\r\n        };\r\n\r\n        /**\r\n         * Wrapper for Y.Moodle.core_course.util.cm.getName\r\n         *\r\n         * @param {JQuery} element\r\n         * @returns {String}\r\n         */\r\n        var getModuleName = function(element) {\r\n            var name;\r\n            Y.use('moodle-course-util', function(Y) {\r\n                name = Y.Moodle.core_course.util.cm.getName(Y.Node(element.get(0)));\r\n            });\r\n            // Check if we have the name in the course state.\r\n            const state = courseeditor.state;\r\n            const cmid = getModuleId(element);\r\n            if (!name && state && cmid) {\r\n                name = state.cm.get(cmid)?.name;\r\n            }\r\n            return name;\r\n        };\r\n\r\n        /**\r\n         * Wrapper for M.util.add_spinner for an activity\r\n         *\r\n         * @param {JQuery} activity\r\n         * @returns {Node}\r\n         */\r\n        var addActivitySpinner = function(activity) {\r\n            activity.addClass(CSS.EDITINPROGRESS);\r\n            var actionarea = activity.find(SELECTOR.ACTIONAREA).get(0);\r\n            if (actionarea) {\r\n                var spinner = M.util.add_spinner(Y, Y.Node(actionarea));\r\n                spinner.show();\r\n                // Lock the activity state element.\r\n                if (activity.data('id') !== undefined) {\r\n                    courseeditor.dispatch('cmLock', [activity.data('id')], true);\r\n                }\r\n                return spinner;\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Wrapper for M.util.add_spinner for a section\r\n         *\r\n         * @param {JQuery} sectionelement\r\n         * @returns {Node}\r\n         */\r\n        var addSectionSpinner = function(sectionelement) {\r\n            sectionelement.addClass(CSS.EDITINPROGRESS);\r\n            var actionarea = sectionelement.find(SELECTOR.SECTIONACTIONMENU).get(0);\r\n            if (actionarea) {\r\n                var spinner = M.util.add_spinner(Y, Y.Node(actionarea));\r\n                spinner.show();\r\n                // Lock the section state element.\r\n                if (sectionelement.data('id') !== undefined) {\r\n                    courseeditor.dispatch('sectionLock', [sectionelement.data('id')], true);\r\n                }\r\n                return spinner;\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Wrapper for M.util.add_lightbox\r\n         *\r\n         * @param {JQuery} sectionelement\r\n         * @returns {Node}\r\n         */\r\n        var addSectionLightbox = function(sectionelement) {\r\n            const item = sectionelement.get(0);\r\n            var lightbox = M.util.add_lightbox(Y, Y.Node(item));\r\n            if (item.dataset.for == 'section' && item.dataset.id) {\r\n                courseeditor.dispatch('sectionLock', [item.dataset.id], true);\r\n                lightbox.setAttribute('data-state', 'section');\r\n                lightbox.setAttribute('data-state-id', item.dataset.id);\r\n            }\r\n            lightbox.show();\r\n            return lightbox;\r\n        };\r\n\r\n        /**\r\n         * Removes the spinner element\r\n         *\r\n         * @param {JQuery} element\r\n         * @param {Node} spinner\r\n         * @param {Number} delay\r\n         */\r\n        var removeSpinner = function(element, spinner, delay) {\r\n            window.setTimeout(function() {\r\n                element.removeClass(CSS.EDITINPROGRESS);\r\n                if (spinner) {\r\n                    spinner.hide();\r\n                }\r\n                // Unlock the state element.\r\n                if (element.data('id') !== undefined) {\r\n                    const mutation = (element.data('for') === 'section') ? 'sectionLock' : 'cmLock';\r\n                    courseeditor.dispatch(mutation, [element.data('id')], false);\r\n                }\r\n            }, delay);\r\n        };\r\n\r\n        /**\r\n         * Removes the lightbox element\r\n         *\r\n         * @param {Node} lightbox lighbox YUI element returned by addSectionLightbox\r\n         * @param {Number} delay\r\n         */\r\n        var removeLightbox = function(lightbox, delay) {\r\n            if (lightbox) {\r\n                window.setTimeout(function() {\r\n                    lightbox.hide();\r\n                    // Unlock state if necessary.\r\n                    if (lightbox.getAttribute('data-state')) {\r\n                        courseeditor.dispatch(\r\n                            `${lightbox.getAttribute('data-state')}Lock`,\r\n                            [lightbox.getAttribute('data-state-id')],\r\n                            false\r\n                        );\r\n                    }\r\n                }, delay);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Initialise action menu for the element (section or module)\r\n         *\r\n         * @param {String} elementid CSS id attribute of the element\r\n         */\r\n        var initActionMenu = function(elementid) {\r\n            // Initialise action menu in the new activity.\r\n            Y.use('moodle-course-coursebase', function() {\r\n                M.course.coursebase.invoke_function('setup_for_resource', '#' + elementid);\r\n            });\r\n            if (M.core.actionmenu && M.core.actionmenu.newDOMNode) {\r\n                M.core.actionmenu.newDOMNode(Y.one('#' + elementid));\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Returns focus to the element that was clicked or \"Edit\" link if element is no longer visible.\r\n         *\r\n         * @param {String} elementId CSS id attribute of the element\r\n         * @param {String} action data-action property of the element that was clicked\r\n         */\r\n        var focusActionItem = function(elementId, action) {\r\n            var mainelement = $('#' + elementId);\r\n            var selector = '[data-action=' + action + ']';\r\n            if (action === 'groupsseparate' || action === 'groupsvisible' || action === 'groupsnone') {\r\n                // New element will have different data-action.\r\n                selector = '[data-action=groupsseparate],[data-action=groupsvisible],[data-action=groupsnone]';\r\n            }\r\n            if (mainelement.find(selector).is(':visible')) {\r\n                mainelement.find(selector).focus();\r\n            } else {\r\n                // Element not visible, focus the \"Edit\" link.\r\n                mainelement.find(SELECTOR.MENU).find(SELECTOR.TOGGLE).focus();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Find next <a> after the element\r\n         *\r\n         * @param {JQuery} mainElement element that is about to be deleted\r\n         * @returns {JQuery}\r\n         */\r\n        var findNextFocusable = function(mainElement) {\r\n            var tabables = $(\"a:visible\");\r\n            var isInside = false;\r\n            var foundElement = null;\r\n            tabables.each(function() {\r\n                if ($.contains(mainElement[0], this)) {\r\n                    isInside = true;\r\n                } else if (isInside) {\r\n                    foundElement = this;\r\n                    return false; // Returning false in .each() is equivalent to \"break;\" inside the loop in php.\r\n                }\r\n                return true;\r\n            });\r\n            return foundElement;\r\n        };\r\n\r\n        /**\r\n         * Performs an action on a module (moving, deleting, duplicating, hiding, etc.)\r\n         *\r\n         * @param {JQuery} moduleElement activity element we perform action on\r\n         * @param {Number} cmid\r\n         * @param {JQuery} target the element (menu item) that was clicked\r\n         */\r\n        var editModule = function(moduleElement, cmid, target) {\r\n            var action = target.attr('data-action');\r\n            var spinner = addActivitySpinner(moduleElement);\r\n            var promises = ajax.call([{\r\n                methodname: 'core_course_edit_module',\r\n                args: {id: cmid,\r\n                    action: action,\r\n                    sectionreturn: target.attr('data-sectionreturn') ? target.attr('data-sectionreturn') : 0\r\n                }\r\n            }], true);\r\n\r\n            var lightbox;\r\n            if (action === 'duplicate') {\r\n                lightbox = addSectionLightbox(target.closest(SELECTOR.SECTIONLI));\r\n            }\r\n            $.when.apply($, promises)\r\n                .done(function(data) {\r\n                    var elementToFocus = findNextFocusable(moduleElement);\r\n                    moduleElement.replaceWith(data);\r\n                    let affectedids = [];\r\n                    // Initialise action menu for activity(ies) added as a result of this.\r\n                    $('<div>' + data + '</div>').find(SELECTOR.ACTIVITYLI).each(function(index) {\r\n                        initActionMenu($(this).attr('id'));\r\n                        if (index === 0) {\r\n                            focusActionItem($(this).attr('id'), action);\r\n                            elementToFocus = null;\r\n                        }\r\n                        // Save any activity id in cmids.\r\n                        affectedids.push(getModuleId($(this)));\r\n                    });\r\n                    // In case of activity deletion focus the next focusable element.\r\n                    if (elementToFocus) {\r\n                        elementToFocus.focus();\r\n                    }\r\n                    // Remove spinner and lightbox with a delay.\r\n                    removeSpinner(moduleElement, spinner, 400);\r\n                    removeLightbox(lightbox, 400);\r\n                    // Trigger event that can be observed by course formats.\r\n                    moduleElement.trigger($.Event('coursemoduleedited', {ajaxreturn: data, action: action}));\r\n\r\n                    // Modify cm state.\r\n                    courseeditor.dispatch('legacyActivityAction', action, cmid, affectedids);\r\n\r\n                }).fail(function(ex) {\r\n                    // Remove spinner and lightbox.\r\n                    removeSpinner(moduleElement, spinner);\r\n                    removeLightbox(lightbox);\r\n                    // Trigger event that can be observed by course formats.\r\n                    var e = $.Event('coursemoduleeditfailed', {exception: ex, action: action});\r\n                    moduleElement.trigger(e);\r\n                    if (!e.isDefaultPrevented()) {\r\n                        notification.exception(ex);\r\n                    }\r\n                });\r\n        };\r\n\r\n        /**\r\n         * Requests html for the module via WS core_course_get_module and updates the module on the course page\r\n         *\r\n         * Used after d&d of the module to another section\r\n         *\r\n         * @param {JQuery|Element} element\r\n         * @param {Number} cmid\r\n         * @param {Number} sectionreturn\r\n         * @return {Promise} the refresh promise\r\n         */\r\n        var refreshModule = function(element, cmid, sectionreturn) {\r\n\r\n            if (sectionreturn === undefined) {\r\n                sectionreturn = courseeditor.sectionReturn;\r\n            }\r\n\r\n            const activityElement = $(element);\r\n            var spinner = addActivitySpinner(activityElement);\r\n            var promises = ajax.call([{\r\n                methodname: 'core_course_get_module',\r\n                args: {id: cmid, sectionreturn: sectionreturn}\r\n            }], true);\r\n\r\n            return new Promise((resolve, reject) => {\r\n                $.when.apply($, promises)\r\n                    .done(function(data) {\r\n                        removeSpinner(activityElement, spinner, 400);\r\n                        replaceActivityHtmlWith(data);\r\n                        resolve(data);\r\n                    }).fail(function() {\r\n                        removeSpinner(activityElement, spinner);\r\n                        reject();\r\n                    });\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Requests html for the section via WS core_course_edit_section and updates the section on the course page\r\n         *\r\n         * @param {JQuery|Element} element\r\n         * @param {Number} sectionid\r\n         * @param {Number} sectionreturn\r\n         * @return {Promise} the refresh promise\r\n         */\r\n        var refreshSection = function(element, sectionid, sectionreturn) {\r\n\r\n            if (sectionreturn === undefined) {\r\n                sectionreturn = courseeditor.sectionReturn;\r\n            }\r\n\r\n            const sectionElement = $(element);\r\n            const action = 'refresh';\r\n            const promises = ajax.call([{\r\n                methodname: 'core_course_edit_section',\r\n                args: {id: sectionid, action, sectionreturn},\r\n            }], true);\r\n\r\n            var spinner = addSectionSpinner(sectionElement);\r\n            return new Promise((resolve, reject) => {\r\n                $.when.apply($, promises)\r\n                    .done(dataencoded => {\r\n\r\n                        removeSpinner(sectionElement, spinner);\r\n                        const data = $.parseJSON(dataencoded);\r\n\r\n                        const newSectionElement = $(data.content);\r\n                        sectionElement.replaceWith(newSectionElement);\r\n\r\n                        // Init modules menus.\r\n                        $(`${SELECTOR.SECTIONLI}#${sectionid} ${SELECTOR.ACTIVITYLI}`).each(\r\n                            (index, activity) => {\r\n                                initActionMenu(activity.data('id'));\r\n                            }\r\n                        );\r\n\r\n                        // Trigger event that can be observed by course formats.\r\n                        const event = dispatchEvent(\r\n                            CourseEvents.sectionRefreshed,\r\n                            {\r\n                                ajaxreturn: data,\r\n                                action: action,\r\n                                newSectionElement: newSectionElement.get(0),\r\n                            },\r\n                            newSectionElement\r\n                        );\r\n\r\n                        if (!event.defaultPrevented) {\r\n                            defaultEditSectionHandler(\r\n                                newSectionElement, $(SELECTOR.SECTIONLI + '#' + sectionid),\r\n                                data,\r\n                                formatname,\r\n                                sectionid\r\n                            );\r\n                        }\r\n                        resolve(data);\r\n                    }).fail(ex => {\r\n                        // Trigger event that can be observed by course formats.\r\n                        const event = dispatchEvent(\r\n                            'coursesectionrefreshfailed',\r\n                            {exception: ex, action: action},\r\n                            sectionElement\r\n                        );\r\n                        if (!event.defaultPrevented) {\r\n                            notification.exception(ex);\r\n                        }\r\n                        reject();\r\n                    });\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Displays the delete confirmation to delete a module\r\n         *\r\n         * @param {JQuery} mainelement activity element we perform action on\r\n         * @param {function} onconfirm function to execute on confirm\r\n         */\r\n        var confirmDeleteModule = function(mainelement, onconfirm) {\r\n            var modtypename = mainelement.attr('class').match(/modtype_([^\\s]*)/)[1];\r\n            var modulename = getModuleName(mainelement);\r\n\r\n            str.get_string('pluginname', modtypename).done(function(pluginname) {\r\n                var plugindata = {\r\n                    type: pluginname,\r\n                    name: modulename\r\n                };\r\n                str.get_strings([\r\n                    {key: 'confirm', component: 'core'},\r\n                    {key: modulename === null ? 'deletechecktype' : 'deletechecktypename', param: plugindata},\r\n                    {key: 'yes'},\r\n                    {key: 'no'}\r\n                ]).done(function(s) {\r\n                        notification.confirm(s[0], s[1], s[2], s[3], onconfirm);\r\n                    }\r\n                );\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Displays the delete confirmation to delete a section\r\n         *\r\n         * @param {String} message confirmation message\r\n         * @param {function} onconfirm function to execute on confirm\r\n         */\r\n        var confirmEditSection = function(message, onconfirm) {\r\n            str.get_strings([\r\n                {key: 'confirm'}, // TODO link text\r\n                {key: 'yes'},\r\n                {key: 'no'}\r\n            ]).done(function(s) {\r\n                    notification.confirm(s[0], message, s[1], s[2], onconfirm);\r\n                }\r\n            );\r\n        };\r\n\r\n        /**\r\n         * Replaces an action menu item with another one (for example Show->Hide, Set marker->Remove marker)\r\n         *\r\n         * @param {JQuery} actionitem\r\n         * @param {String} image new image name (\"i/show\", \"i/hide\", etc.)\r\n         * @param {String} stringname new string for the action menu item\r\n         * @param {String} stringcomponent\r\n         * @param {String} newaction new value for data-action attribute of the link\r\n         * @return {Promise} promise which is resolved when the replacement has completed\r\n         */\r\n        var replaceActionItem = function(actionitem, image, stringname,\r\n                                           stringcomponent, newaction) {\r\n\r\n            var stringRequests = [{key: stringname, component: stringcomponent}];\r\n            // Do not provide an icon with duplicate, different text to the menu item.\r\n\r\n            return str.get_strings(stringRequests).then(function(strings) {\r\n                actionitem.find('span.menu-action-text').html(strings[0]);\r\n\r\n                return templates.renderPix(image, 'core');\r\n            }).then(function(pixhtml) {\r\n                actionitem.find('.icon').replaceWith(pixhtml);\r\n                actionitem.attr('data-action', newaction);\r\n                return;\r\n            }).catch(notification.exception);\r\n        };\r\n\r\n        /**\r\n         * Default post-processing for section AJAX edit actions.\r\n         *\r\n         * This can be overridden in course formats by listening to event coursesectionedited:\r\n         *\r\n         * $('body').on('coursesectionedited', 'li.section', function(e) {\r\n         *     var action = e.action,\r\n         *         sectionElement = $(e.target),\r\n         *         data = e.ajaxreturn;\r\n         *     // ... Do some processing here.\r\n         *     e.preventDefault(); // Prevent default handler.\r\n         * });\r\n         *\r\n         * @param {JQuery} sectionElement\r\n         * @param {JQuery} actionItem\r\n         * @param {Object} data\r\n         * @param {String} courseformat\r\n         * @param {Number} sectionid\r\n         */\r\n        var defaultEditSectionHandler = function(sectionElement, actionItem, data, courseformat, sectionid) {\r\n            var action = actionItem.attr('data-action');\r\n            if (action === 'hide' || action === 'show') {\r\n                if (action === 'hide') {\r\n                    sectionElement.addClass('hidden');\r\n                    setSectionBadge(sectionElement[0], 'hiddenfromstudents', true, false);\r\n                    replaceActionItem(actionItem, 'i/show',\r\n                        'showfromothers', 'format_' + courseformat, 'show');\r\n                } else {\r\n                    setSectionBadge(sectionElement[0], 'hiddenfromstudents', false, false);\r\n                    sectionElement.removeClass('hidden');\r\n                    replaceActionItem(actionItem, 'i/hide',\r\n                        'hidefromothers', 'format_' + courseformat, 'hide');\r\n                }\r\n                // Replace the modules with new html (that indicates that they are now hidden or not hidden).\r\n                if (data.modules !== undefined) {\r\n                    for (var i in data.modules) {\r\n                        replaceActivityHtmlWith(data.modules[i]);\r\n                    }\r\n                }\r\n                // Replace the section availability information.\r\n                if (data.section_availability !== undefined) {\r\n                    sectionElement.find('.section_availability').first().replaceWith(data.section_availability);\r\n                }\r\n                // Modify course state.\r\n                const section = courseeditor.state.section.get(sectionid);\r\n                if (section !== undefined) {\r\n                    courseeditor.dispatch('sectionState', [sectionid]);\r\n                }\r\n            } else if (action === 'setmarker') {\r\n                var oldmarker = $(SELECTOR.SECTIONLI + '.current'),\r\n                    oldActionItem = oldmarker.find(SELECTOR.SECTIONACTIONMENU + ' ' + 'a[data-action=removemarker]');\r\n                oldmarker.removeClass('current');\r\n                replaceActionItem(oldActionItem, 'i/marker',\r\n                    'highlight', 'core', 'setmarker');\r\n                sectionElement.addClass('current');\r\n                replaceActionItem(actionItem, 'i/marked',\r\n                    'highlightoff', 'core', 'removemarker');\r\n                courseeditor.dispatch('legacySectionAction', action, sectionid);\r\n                setSectionBadge(sectionElement[0], 'iscurrent', true, true);\r\n            } else if (action === 'removemarker') {\r\n                sectionElement.removeClass('current');\r\n                replaceActionItem(actionItem, 'i/marker',\r\n                    'highlight', 'core', 'setmarker');\r\n                courseeditor.dispatch('legacySectionAction', action, sectionid);\r\n                setSectionBadge(sectionElement[0], 'iscurrent', false, true);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Get the focused element path in an activity if any.\r\n         *\r\n         * This method is used to restore focus when the activity HTML is refreshed.\r\n         * Only the main course editor elements can be refocused as they are always present\r\n         * even if the activity content changes.\r\n         *\r\n         * @param {String} id the element id the activity element\r\n         * @return {String|undefined} the inner path of the focused element or undefined\r\n         */\r\n        const getActivityFocusedElement = function(id) {\r\n            const element = document.getElementById(id);\r\n            if (!element || !element.contains(document.activeElement)) {\r\n                return undefined;\r\n            }\r\n            // Check if the actions menu toggler is focused.\r\n            if (element.querySelector(SELECTOR.ACTIONAREA).contains(document.activeElement)) {\r\n                return `${SELECTOR.ACTIONAREA} [tabindex=\"0\"]`;\r\n            }\r\n            // Return the current element id if any.\r\n            if (document.activeElement.id) {\r\n                return `#${document.activeElement.id}`;\r\n            }\r\n            return undefined;\r\n        };\r\n\r\n        /**\r\n         * Replaces the course module with the new html (used to update module after it was edited or its visibility was changed).\r\n         *\r\n         * @param {String} activityHTML\r\n         */\r\n        var replaceActivityHtmlWith = function(activityHTML) {\r\n            $('<div>' + activityHTML + '</div>').find(SELECTOR.ACTIVITYLI).each(function() {\r\n                // Extract id from the new activity html.\r\n                var id = $(this).attr('id');\r\n                // Check if the current focused element is inside the activity.\r\n                let focusedPath = getActivityFocusedElement(id);\r\n                // Find the existing element with the same id and replace its contents with new html.\r\n                $(SELECTOR.ACTIVITYLI + '#' + id).replaceWith(activityHTML);\r\n                // Initialise action menu.\r\n                initActionMenu(id);\r\n                // Re-focus the previous elements.\r\n                if (focusedPath) {\r\n                    const newItem = document.getElementById(id);\r\n                    newItem.querySelector(focusedPath)?.focus();\r\n                }\r\n\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Performs an action on a module (moving, deleting, duplicating, hiding, etc.)\r\n         *\r\n         * @param {JQuery} sectionElement section element we perform action on\r\n         * @param {Nunmber} sectionid\r\n         * @param {JQuery} target the element (menu item) that was clicked\r\n         * @param {String} courseformat\r\n         * @return {boolean} true the action call is sent to the server or false if it is ignored.\r\n         */\r\n        var editSection = function(sectionElement, sectionid, target, courseformat) {\r\n            var action = target.attr('data-action'),\r\n                sectionreturn = target.attr('data-sectionreturn') ? target.attr('data-sectionreturn') : 0;\r\n\r\n            // Filter direct component handled actions.\r\n            if (courseeditor.supportComponents && componentActions.includes(action)) {\r\n                return false;\r\n            }\r\n\r\n            var spinner = addSectionSpinner(sectionElement);\r\n            var promises = ajax.call([{\r\n                methodname: 'core_course_edit_section',\r\n                args: {id: sectionid, action: action, sectionreturn: sectionreturn}\r\n            }], true);\r\n\r\n            var lightbox = addSectionLightbox(sectionElement);\r\n            $.when.apply($, promises)\r\n                .done(function(dataencoded) {\r\n                    var data = $.parseJSON(dataencoded);\r\n                    removeSpinner(sectionElement, spinner);\r\n                    removeLightbox(lightbox);\r\n                    sectionElement.find(SELECTOR.SECTIONACTIONMENU).find(SELECTOR.TOGGLE).focus();\r\n                    // Trigger event that can be observed by course formats.\r\n                    var e = $.Event('coursesectionedited', {ajaxreturn: data, action: action});\r\n                    sectionElement.trigger(e);\r\n                    if (!e.isDefaultPrevented()) {\r\n                        defaultEditSectionHandler(sectionElement, target, data, courseformat, sectionid);\r\n                    }\r\n                }).fail(function(ex) {\r\n                    // Remove spinner and lightbox.\r\n                    removeSpinner(sectionElement, spinner);\r\n                    removeLightbox(lightbox);\r\n                    // Trigger event that can be observed by course formats.\r\n                    var e = $.Event('coursesectioneditfailed', {exception: ex, action: action});\r\n                    sectionElement.trigger(e);\r\n                    if (!e.isDefaultPrevented()) {\r\n                        notification.exception(ex);\r\n                    }\r\n                });\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * Sets the section badge in the section header.\r\n         *\r\n         * @param {JQuery} sectionElement section element we perform action on\r\n         * @param {String} badgetype the type of badge this is for\r\n         * @param {bool} add true to add, false to remove\r\n         * @param {boolean} removeOther in case of adding a badge, whether to remove all other.\r\n         */\r\n        var setSectionBadge = function(sectionElement, badgetype, add, removeOther) {\r\n            const sectionbadges = sectionElement.querySelector(SELECTOR.SECTIONBADGES);\r\n            if (!sectionbadges) {\r\n                return;\r\n            }\r\n            const badge = sectionbadges.querySelector('[data-type=\"' + badgetype + '\"]');\r\n            if (!badge) {\r\n                return;\r\n            }\r\n            if (add) {\r\n                if (removeOther) {\r\n                    document.querySelectorAll('[data-type=\"' + badgetype + '\"]').forEach((b) => {\r\n                        b.classList.add('d-none');\r\n                    });\r\n                }\r\n                badge.classList.remove('d-none');\r\n            } else {\r\n                badge.classList.add('d-none');\r\n            }\r\n        };\r\n\r\n        // Register a function to be executed after D&D of an activity.\r\n        Y.use('moodle-course-coursebase', function() {\r\n            M.course.coursebase.register_module({\r\n                // Ignore camelcase eslint rule for the next line because it is an expected name of the callback.\r\n                // eslint-disable-next-line camelcase\r\n                set_visibility_resource_ui: function(args) {\r\n                    var mainelement = $(args.element.getDOMNode());\r\n                    var cmid = getModuleId(mainelement);\r\n                    if (cmid) {\r\n                        var sectionreturn = mainelement.find('.' + CSS.EDITINGMOVE).attr('data-sectionreturn');\r\n                        refreshModule(mainelement, cmid, sectionreturn);\r\n                    }\r\n                },\r\n                /**\r\n                 * Update the course state when some cm is moved via YUI.\r\n                 * @param {*} params\r\n                 */\r\n                updateMovedCmState: (params) => {\r\n                    const state = courseeditor.state;\r\n\r\n                    // Update old section.\r\n                    const cm = state.cm.get(params.cmid);\r\n                    if (cm !== undefined) {\r\n                        courseeditor.dispatch('sectionState', [cm.sectionid]);\r\n                    }\r\n                    // Update cm state.\r\n                    courseeditor.dispatch('cmState', [params.cmid]);\r\n                },\r\n                /**\r\n                 * Update the course state when some section is moved via YUI.\r\n                 */\r\n                updateMovedSectionState: () => {\r\n                    courseeditor.dispatch('courseState');\r\n                },\r\n            });\r\n        });\r\n\r\n        // From Moodle 4.0 all edit actions are being re-implemented as state mutation.\r\n        // This means all method from this \"actions\" module will be deprecated when all the course\r\n        // interface is migrated to reactive components.\r\n        // Most legacy actions did not provide enough information to regenarate the course so they\r\n        // use the mutations courseState, sectionState and cmState to get the updated state from\r\n        // the server. However, some activity actions where we can prevent an extra webservice\r\n        // call by implementing an adhoc mutation.\r\n        courseeditor.addMutations({\r\n            /**\r\n             * Compatibility function to update Moodle 4.0 course state using legacy actions.\r\n             *\r\n             * This method only updates some actions which does not require to use cmState mutation\r\n             * to get updated data form the server.\r\n             *\r\n             * @param {Object} statemanager the current state in read write mode\r\n             * @param {String} action the performed action\r\n             * @param {Number} cmid the affected course module id\r\n             * @param {Array} affectedids all affected cm ids (for duplicate action)\r\n             */\r\n            legacyActivityAction: function(statemanager, action, cmid, affectedids) {\r\n\r\n                const state = statemanager.state;\r\n                const cm = state.cm.get(cmid);\r\n                if (cm === undefined) {\r\n                    return;\r\n                }\r\n                const section = state.section.get(cm.sectionid);\r\n                if (section === undefined) {\r\n                    return;\r\n                }\r\n\r\n                // Send the element is locked.\r\n                courseeditor.dispatch('cmLock', [cm.id], true);\r\n\r\n                // Now we do the real mutation.\r\n                statemanager.setReadOnly(false);\r\n\r\n                // This unlocked will take effect when the read only is restored.\r\n                cm.locked = false;\r\n\r\n                switch (action) {\r\n                    case 'delete':\r\n                        // Remove from section.\r\n                        section.cmlist = section.cmlist.reduce(\r\n                            (cmlist, current) => {\r\n                                if (current != cmid) {\r\n                                    cmlist.push(current);\r\n                                }\r\n                                return cmlist;\r\n                            },\r\n                            []\r\n                        );\r\n                        // Delete form list.\r\n                        state.cm.delete(cmid);\r\n                        break;\r\n\r\n                    case 'hide':\r\n                    case 'show':\r\n                    case 'duplicate':\r\n                        courseeditor.dispatch('cmState', affectedids);\r\n                        break;\r\n                }\r\n                statemanager.setReadOnly(true);\r\n            },\r\n            legacySectionAction: function(statemanager, action, sectionid) {\r\n\r\n                const state = statemanager.state;\r\n                const section = state.section.get(sectionid);\r\n                if (section === undefined) {\r\n                    return;\r\n                }\r\n\r\n                // Send the element is locked. Reactive events are only triggered when the state\r\n                // read only mode is restored. We want to notify the interface the element is\r\n                // locked so we need to do a quick lock operation before performing the rest\r\n                // of the mutation.\r\n                statemanager.setReadOnly(false);\r\n                section.locked = true;\r\n                statemanager.setReadOnly(true);\r\n\r\n                // Now we do the real mutation.\r\n                statemanager.setReadOnly(false);\r\n\r\n                // This locked will take effect when the read only is restored.\r\n                section.locked = false;\r\n\r\n                switch (action) {\r\n                    case 'setmarker':\r\n                        // Remove previous marker.\r\n                        state.section.forEach((current) => {\r\n                            if (current.id != sectionid) {\r\n                                current.current = false;\r\n                            }\r\n                        });\r\n                        section.current = true;\r\n                        break;\r\n\r\n                    case 'removemarker':\r\n                        section.current = false;\r\n                        break;\r\n                }\r\n                statemanager.setReadOnly(true);\r\n            },\r\n        });\r\n\r\n        return /** @alias module:core_course/actions */ {\r\n\r\n            /**\r\n             * Initialises course page\r\n             *\r\n             * @method init\r\n             * @param {String} courseformat name of the current course format (for fetching strings)\r\n             */\r\n            initCoursePage: function(courseformat) {\r\n\r\n                formatname = courseformat;\r\n\r\n                // Add a handler for course module actions.\r\n                $('body').on('click keypress', SELECTOR.ACTIVITYLI + ' ' +\r\n                        SELECTOR.ACTIVITYACTION + '[data-action]', function(e) {\r\n                    if (e.type === 'keypress' && e.keyCode !== 13) {\r\n                        return;\r\n                    }\r\n                    var actionItem = $(this),\r\n                        moduleElement = actionItem.closest(SELECTOR.ACTIVITYLI),\r\n                        action = actionItem.attr('data-action'),\r\n                        moduleId = getModuleId(moduleElement);\r\n                    switch (action) {\r\n                        case 'moveleft':\r\n                        case 'moveright':\r\n                        case 'delete':\r\n                        case 'duplicate':\r\n                        case 'hide':\r\n                        case 'stealth':\r\n                        case 'show':\r\n                        case 'groupsseparate':\r\n                        case 'groupsvisible':\r\n                        case 'groupsnone':\r\n                            break;\r\n                        default:\r\n                            // Nothing to do here!\r\n                            return;\r\n                    }\r\n                    if (!moduleId) {\r\n                        return;\r\n                    }\r\n                    e.preventDefault();\r\n                    if (action === 'delete') {\r\n                        // Deleting requires confirmation.\r\n                        confirmDeleteModule(moduleElement, function() {\r\n                            editModule(moduleElement, moduleId, actionItem);\r\n                        });\r\n                    } else {\r\n                        editModule(moduleElement, moduleId, actionItem);\r\n                    }\r\n                });\r\n\r\n                // Add a handler for section show/hide actions.\r\n                $('body').on('click keypress', SELECTOR.SECTIONLI + ' ' +\r\n                            SELECTOR.SECTIONACTIONMENU + '[data-sectionid] ' +\r\n                            'a[data-action]', function(e) {\r\n                    if (e.type === 'keypress' && e.keyCode !== 13) {\r\n                        return;\r\n                    }\r\n                    var actionItem = $(this),\r\n                        sectionElement = actionItem.closest(SELECTOR.SECTIONLI),\r\n                        sectionId = actionItem.closest(SELECTOR.SECTIONACTIONMENU).attr('data-sectionid');\r\n\r\n                    if (actionItem.attr('data-action') === 'permalink') {\r\n                        e.preventDefault();\r\n                        ModalCopyToClipboard.create({\r\n                            text: actionItem.attr('href'),\r\n                        }, str.get_string('sectionlink', 'course')\r\n                        );\r\n                        return;\r\n                    }\r\n\r\n                    let isExecuted = true;\r\n                    if (actionItem.attr('data-confirm')) {\r\n                        // Action requires confirmation.\r\n                        confirmEditSection(actionItem.attr('data-confirm'), function() {\r\n                            isExecuted = editSection(sectionElement, sectionId, actionItem, courseformat);\r\n                        });\r\n                    } else {\r\n                        isExecuted = editSection(sectionElement, sectionId, actionItem, courseformat);\r\n                    }\r\n                    // Prevent any other module from capturing the action if it is already in execution.\r\n                    if (isExecuted) {\r\n                        e.preventDefault();\r\n                    }\r\n                });\r\n\r\n                // The section and activity names are edited using inplace editable.\r\n                // The \"update\" jQuery event must be captured in order to update the course state.\r\n                $('body').on('updated', `${SELECTOR.SECTIONLI} ${SELECTOR.SECTIONITEM} [data-inplaceeditable]`, function(e) {\r\n                    if (e.ajaxreturn && e.ajaxreturn.itemid) {\r\n                        const state = courseeditor.state;\r\n                        const section = state.section.get(e.ajaxreturn.itemid);\r\n                        if (section !== undefined) {\r\n                            courseeditor.dispatch('sectionState', [e.ajaxreturn.itemid]);\r\n                        }\r\n                    }\r\n                });\r\n                $('body').on('updated', `${SELECTOR.ACTIVITYLI} [data-inplaceeditable]`, function(e) {\r\n                    if (e.ajaxreturn && e.ajaxreturn.itemid) {\r\n                        courseeditor.dispatch('cmState', [e.ajaxreturn.itemid]);\r\n                    }\r\n                });\r\n\r\n                // Component-based formats don't use modals to create sections.\r\n                if (courseeditor.supportComponents && componentActions.includes('addSection')) {\r\n                    return;\r\n                }\r\n\r\n                // Add a handler for \"Add sections\" link to ask for a number of sections to add.\r\n                str.get_string('numberweeks').done(function(strNumberSections) {\r\n                    var trigger = $(SELECTOR.ADDSECTIONS),\r\n                        modalTitle = trigger.attr('data-add-sections'),\r\n                        newSections = trigger.attr('data-new-sections');\r\n                    var modalBody = $('<div><label for=\"add_section_numsections\"></label> ' +\r\n                        '<input id=\"add_section_numsections\" type=\"number\" min=\"1\" max=\"' + newSections + '\" value=\"1\"></div>');\r\n                    modalBody.find('label').html(strNumberSections);\r\n                    ModalFactory.create({\r\n                        title: modalTitle,\r\n                        type: ModalFactory.types.SAVE_CANCEL,\r\n                        body: modalBody.html()\r\n                    }, trigger)\r\n                    .done(function(modal) {\r\n                        var numSections = $(modal.getBody()).find('#add_section_numsections'),\r\n                        addSections = function() {\r\n                            // Check if value of the \"Number of sections\" is a valid positive integer and redirect\r\n                            // to adding a section script.\r\n                            if ('' + parseInt(numSections.val()) === numSections.val() && parseInt(numSections.val()) >= 1) {\r\n                                document.location = trigger.attr('href') + '&numsections=' + parseInt(numSections.val());\r\n                            }\r\n                        };\r\n                        modal.setSaveButtonText(modalTitle);\r\n                        modal.getRoot().on(ModalEvents.shown, function() {\r\n                            // When modal is shown focus and select the input and add a listener to keypress of \"Enter\".\r\n                            numSections.focus().select().on('keydown', function(e) {\r\n                                if (e.keyCode === KeyCodes.enter) {\r\n                                    addSections();\r\n                                }\r\n                            });\r\n                        });\r\n                        modal.getRoot().on(ModalEvents.save, function(e) {\r\n                            // When modal \"Add\" button is pressed.\r\n                            e.preventDefault();\r\n                            addSections();\r\n                        });\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Replaces a section action menu item with another one (for example Show->Hide, Set marker->Remove marker)\r\n             *\r\n             * This method can be used by course formats in their listener to the coursesectionedited event\r\n             *\r\n             * @deprecated since Moodle 3.9\r\n             * @param {JQuery} sectionelement\r\n             * @param {String} selector CSS selector inside the section element, for example \"a[data-action=show]\"\r\n             * @param {String} image new image name (\"i/show\", \"i/hide\", etc.)\r\n             * @param {String} stringname new string for the action menu item\r\n             * @param {String} stringcomponent\r\n             * @param {String} newaction new value for data-action attribute of the link\r\n             */\r\n            replaceSectionActionItem: function(sectionelement, selector, image, stringname,\r\n                                                    stringcomponent, newaction) {\r\n                log.debug('replaceSectionActionItem() is deprecated and will be removed.');\r\n                var actionitem = sectionelement.find(SELECTOR.SECTIONACTIONMENU + ' ' + selector);\r\n                replaceActionItem(actionitem, image, stringname, stringcomponent, newaction);\r\n            },\r\n            // Method to refresh a module.\r\n            refreshModule,\r\n            refreshSection,\r\n        };\r\n    });\r\n"],"names":["define","$","ajax","templates","notification","str","url","Y","ModalCopyToClipboard","ModalFactory","ModalEvents","KeyCodes","log","editor","EventDispatcher","CourseEvents","componentActions","courseeditor","getCurrentCourseEditor","formatname","CSS","SELECTOR","ACTIVITYLI","ACTIONAREA","ACTIVITYACTION","MENU","TOGGLE","SECTIONLI","SECTIONACTIONMENU","SECTIONITEM","ADDSECTIONS","SECTIONBADGES","use","courseformatselector","M","course","format","get_section_selector","dispatchEvent","eventName","detail","container","options","Element","undefined","get","getModuleId","element","item","dataset","id","Moodle","core_course","util","cm","getId","Node","addActivitySpinner","activity","addClass","actionarea","find","spinner","add_spinner","show","data","dispatch","addSectionSpinner","sectionelement","addSectionLightbox","lightbox","add_lightbox","for","setAttribute","removeSpinner","delay","window","setTimeout","removeClass","hide","mutation","removeLightbox","getAttribute","initActionMenu","elementid","coursebase","invoke_function","core","actionmenu","newDOMNode","one","editModule","moduleElement","cmid","target","action","attr","promises","call","methodname","args","sectionreturn","closest","when","apply","done","mainElement","tabables","isInside","foundElement","elementToFocus","each","contains","this","replaceWith","affectedids","index","elementId","mainelement","selector","is","focus","focusActionItem","push","trigger","Event","ajaxreturn","fail","ex","e","exception","isDefaultPrevented","refreshModule","sectionReturn","activityElement","Promise","resolve","reject","replaceActivityHtmlWith","confirmDeleteModule","onconfirm","modtypename","match","modulename","name","getName","state","_state$cm$get","getModuleName","get_string","pluginname","plugindata","type","get_strings","key","component","param","s","confirm","replaceActionItem","actionitem","image","stringname","stringcomponent","newaction","stringRequests","then","strings","html","renderPix","pixhtml","catch","defaultEditSectionHandler","sectionElement","actionItem","courseformat","sectionid","setSectionBadge","modules","i","section_availability","first","section","oldmarker","oldActionItem","activityHTML","focusedPath","document","getElementById","activeElement","querySelector","getActivityFocusedElement","editSection","supportComponents","includes","dataencoded","parseJSON","badgetype","add","removeOther","sectionbadges","badge","querySelectorAll","forEach","b","classList","remove","register_module","set_visibility_resource_ui","getDOMNode","updateMovedCmState","params","updateMovedSectionState","addMutations","legacyActivityAction","statemanager","setReadOnly","locked","cmlist","reduce","current","delete","legacySectionAction","initCoursePage","on","keyCode","moduleId","preventDefault","sectionId","create","text","isExecuted","message","itemid","strNumberSections","modalTitle","newSections","modalBody","title","types","SAVE_CANCEL","body","modal","numSections","getBody","addSections","parseInt","val","location","setSaveButtonText","getRoot","shown","select","enter","save","replaceSectionActionItem","debug","refreshSection","newSectionElement","content","sectionRefreshed","defaultPrevented"],"mappings":"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"}