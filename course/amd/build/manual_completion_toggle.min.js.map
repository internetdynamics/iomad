{"version":3,"file":"manual_completion_toggle.min.js","sources":["../src/manual_completion_toggle.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Provides the functionality for toggling the manual completion state of a course module through\r\n * the manual completion button.\r\n *\r\n * @module      core_course/manual_completion_toggle\r\n * @copyright   2021 Jun Pataleta <jun@moodle.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Templates from 'core/templates';\r\nimport Notification from 'core/notification';\r\nimport {toggleManualCompletion} from 'core_course/repository';\r\nimport * as CourseEvents from 'core_course/events';\r\nimport Pending from 'core/pending';\r\n\r\n/**\r\n * Selectors in the manual completion template.\r\n *\r\n * @type {{MANUAL_TOGGLE: string}}\r\n */\r\nconst SELECTORS = {\r\n    MANUAL_TOGGLE: 'button[data-action=toggle-manual-completion]',\r\n};\r\n\r\n/**\r\n * Toggle type values for the data-toggletype attribute in the core_course/completion_manual template.\r\n *\r\n * @type {{TOGGLE_UNDO: string, TOGGLE_MARK_DONE: string}}\r\n */\r\nconst TOGGLE_TYPES = {\r\n    TOGGLE_MARK_DONE: 'manual:mark-done',\r\n    TOGGLE_UNDO: 'manual:undo',\r\n};\r\n\r\n/**\r\n * Whether the event listener has already been registered for this module.\r\n *\r\n * @type {boolean}\r\n */\r\nlet registered = false;\r\n\r\n/**\r\n * Registers the click event listener for the manual completion toggle button.\r\n */\r\nexport const init = () => {\r\n    if (registered) {\r\n        return;\r\n    }\r\n    document.addEventListener('click', (e) => {\r\n        const toggleButton = e.target.closest(SELECTORS.MANUAL_TOGGLE);\r\n        if (toggleButton) {\r\n            e.preventDefault();\r\n            toggleManualCompletionState(toggleButton).catch(Notification.exception);\r\n        }\r\n    });\r\n    registered = true;\r\n};\r\n\r\n/**\r\n * Toggles the manual completion state of the module for the given user.\r\n *\r\n * @param {HTMLElement} toggleButton\r\n * @returns {Promise<void>}\r\n */\r\nconst toggleManualCompletionState = async(toggleButton) => {\r\n    const pendingPromise = new Pending('core_course:toggleManualCompletionState');\r\n    // Make a copy of the original content of the button.\r\n    const originalInnerHtml = toggleButton.innerHTML;\r\n\r\n    // Disable the button to prevent double clicks.\r\n    toggleButton.setAttribute('disabled', 'disabled');\r\n\r\n    // Get button data.\r\n    const toggleType = toggleButton.getAttribute('data-toggletype');\r\n    const cmid = toggleButton.getAttribute('data-cmid');\r\n    const activityname = toggleButton.getAttribute('data-activityname');\r\n    // Get the target completion state.\r\n    const completed = toggleType === TOGGLE_TYPES.TOGGLE_MARK_DONE;\r\n\r\n    // Replace the button contents with the loading icon.\r\n    Templates.renderForPromise('core/loading', {})\r\n    .then((loadingHtml) => {\r\n        Templates.replaceNodeContents(toggleButton, loadingHtml, '');\r\n        return;\r\n    }).catch(() => {});\r\n\r\n    try {\r\n        // Call the webservice to update the manual completion status.\r\n        await toggleManualCompletion(cmid, completed);\r\n\r\n        // All good so far. Refresh the manual completion button to reflect its new state by re-rendering the template.\r\n        const templateContext = {\r\n            cmid: cmid,\r\n            activityname: activityname,\r\n            overallcomplete: completed,\r\n            overallincomplete: !completed,\r\n            istrackeduser: true, // We know that we're tracking completion for this user given the presence of this button.\r\n        };\r\n        const renderObject = await Templates.renderForPromise('core_course/completion_manual', templateContext);\r\n\r\n        // Replace the toggle button with the newly loaded template.\r\n        const replacedNode = await Templates.replaceNode(toggleButton, renderObject.html, renderObject.js);\r\n        const newToggleButton = replacedNode.pop();\r\n\r\n        // Build manualCompletionToggled custom event.\r\n        const withAvailability = toggleButton.getAttribute('data-withavailability');\r\n        const toggledEvent = new CustomEvent(CourseEvents.manualCompletionToggled, {\r\n            bubbles: true,\r\n            detail: {\r\n                cmid,\r\n                activityname,\r\n                completed,\r\n                withAvailability,\r\n            }\r\n        });\r\n        // Dispatch the manualCompletionToggled custom event.\r\n        newToggleButton.dispatchEvent(toggledEvent);\r\n\r\n    } catch (exception) {\r\n        // In case of an error, revert the original state and appearance of the button.\r\n        toggleButton.removeAttribute('disabled');\r\n        toggleButton.innerHTML = originalInnerHtml;\r\n\r\n        // Show the exception.\r\n        Notification.exception(exception);\r\n    }\r\n    pendingPromise.resolve();\r\n};\r\n"],"names":["SELECTORS","TOGGLE_TYPES","registered","document","addEventListener","e","toggleButton","target","closest","preventDefault","toggleManualCompletionState","catch","Notification","exception","async","pendingPromise","Pending","originalInnerHtml","innerHTML","setAttribute","toggleType","getAttribute","cmid","activityname","completed","renderForPromise","then","loadingHtml","replaceNodeContents","templateContext","overallcomplete","overallincomplete","istrackeduser","renderObject","Templates","newToggleButton","replaceNode","html","js","pop","withAvailability","toggledEvent","CustomEvent","CourseEvents","manualCompletionToggled","bubbles","detail","dispatchEvent","removeAttribute","resolve"],"mappings":";;;;;;;;44BAmCMA,wBACa,+CAQbC,8BACgB,uBASlBC,YAAa,gBAKG,KACZA,aAGJC,SAASC,iBAAiB,SAAUC,UAC1BC,aAAeD,EAAEE,OAAOC,QAAQR,yBAClCM,eACAD,EAAEI,iBACFC,4BAA4BJ,cAAcK,MAAMC,sBAAaC,eAGrEX,YAAa,UASXQ,4BAA8BI,MAAAA,qBAC1BC,eAAiB,IAAIC,iBAAQ,2CAE7BC,kBAAoBX,aAAaY,UAGvCZ,aAAaa,aAAa,WAAY,kBAGhCC,WAAad,aAAae,aAAa,mBACvCC,KAAOhB,aAAae,aAAa,aACjCE,aAAejB,aAAae,aAAa,qBAEzCG,UAAYJ,aAAenB,iDAGvBwB,iBAAiB,eAAgB,IAC1CC,MAAMC,iCACOC,oBAAoBtB,aAAcqB,YAAa,OAE1DhB,OAAM,mBAIC,sCAAuBW,KAAME,iBAG7BK,gBAAkB,CACpBP,KAAMA,KACNC,aAAcA,aACdO,gBAAiBN,UACjBO,mBAAoBP,UACpBQ,eAAe,GAEbC,mBAAqBC,mBAAUT,iBAAiB,gCAAiCI,iBAIjFM,uBADqBD,mBAAUE,YAAY9B,aAAc2B,aAAaI,KAAMJ,aAAaK,KAC1DC,MAG/BC,iBAAmBlC,aAAae,aAAa,yBAC7CoB,aAAe,IAAIC,YAAYC,aAAaC,wBAAyB,CACvEC,SAAS,EACTC,OAAQ,CACJxB,KAAAA,KACAC,aAAAA,aACAC,UAAAA,UACAgB,iBAAAA,oBAIRL,gBAAgBY,cAAcN,cAEhC,MAAO5B,WAELP,aAAa0C,gBAAgB,YAC7B1C,aAAaY,UAAYD,wCAGZJ,UAAUA,WAE3BE,eAAekC"}