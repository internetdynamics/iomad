{"version":3,"file":"section.min.js","sources":["../../../src/local/courseindex/section.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index section component.\r\n *\r\n * This component is used to control specific course section interactions like drag and drop.\r\n *\r\n * @module     core_courseformat/local/courseindex/section\r\n * @class      core_courseformat/local/courseindex/section\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport SectionTitle from 'core_courseformat/local/courseindex/sectiontitle';\r\nimport DndSection from 'core_courseformat/local/courseeditor/dndsection';\r\n\r\nexport default class Component extends DndSection {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'courseindex_section';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            SECTION_ITEM: `[data-for='section_item']`,\r\n            SECTION_TITLE: `[data-for='section_title']`,\r\n            CM_LAST: `[data-for=\"cm\"]:last-child`,\r\n        };\r\n        // Default classes to toggle on refresh.\r\n        this.classes = {\r\n            SECTIONHIDDEN: 'dimmed',\r\n            SECTIONCURRENT: 'current',\r\n            LOCKED: 'editinprogress',\r\n            RESTRICTIONS: 'restrictions',\r\n            PAGEITEM: 'pageitem',\r\n            OVERLAYBORDERS: 'overlay-preview-borders',\r\n        };\r\n\r\n        // We need our id to watch specific events.\r\n        this.id = this.element.dataset.id;\r\n        this.isPageItem = false;\r\n    }\r\n\r\n    /**\r\n     * Static method to create a component instance form the mustahce template.\r\n     *\r\n     * @param {string} target the DOM main element or its ID\r\n     * @param {object} selectors optional css selector overrides\r\n     * @return {Component}\r\n     */\r\n    static init(target, selectors) {\r\n        return new this({\r\n            element: document.getElementById(target),\r\n            selectors,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the initial state\r\n     */\r\n    stateReady(state) {\r\n        this.configState(state);\r\n        const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\r\n        // Drag and drop is only available for components compatible course formats.\r\n        if (this.reactive.isEditing && this.reactive.supportComponents) {\r\n            // Init the inner dragable element passing the full section as affected region.\r\n            const titleitem = new SectionTitle({\r\n                ...this,\r\n                element: sectionItem,\r\n                fullregion: this.element,\r\n            });\r\n            this.configDragDrop(titleitem);\r\n        }\r\n        // Check if the current url is the section url.\r\n        const section = state.section.get(this.id);\r\n        if (window.location.href == section.sectionurl.replace(/&amp;/g, \"&\")) {\r\n            this.reactive.dispatch('setPageItem', 'section', this.id);\r\n            sectionItem.scrollIntoView();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            {watch: `section[${this.id}]:deleted`, handler: this.remove},\r\n            {watch: `section[${this.id}]:updated`, handler: this._refreshSection},\r\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Get the last CM element of that section.\r\n     *\r\n     * @returns {element|null}\r\n     */\r\n    getLastCm() {\r\n        return this.getElement(this.selectors.CM_LAST);\r\n    }\r\n\r\n    /**\r\n     * Update a course index section using the state information.\r\n     *\r\n     * @param {Object} param details the update details.\r\n     * @param {Object} param.element the section element\r\n     */\r\n    _refreshSection({element}) {\r\n        // Update classes.\r\n        const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\r\n        sectionItem.classList.toggle(this.classes.SECTIONHIDDEN, !element.visible);\r\n        sectionItem.classList.toggle(this.classes.RESTRICTIONS, element.hasrestrictions ?? false);\r\n        this.element.classList.toggle(this.classes.SECTIONCURRENT, element.current);\r\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\r\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\r\n        this.locked = element.locked;\r\n        // Update title.\r\n        this.getElement(this.selectors.SECTION_TITLE).innerHTML = element.title;\r\n    }\r\n\r\n    /**\r\n     * Handle a page item update.\r\n     *\r\n     * @param {Object} details the update details\r\n     * @param {Object} details.state the state data.\r\n     * @param {Object} details.element the course state data.\r\n     */\r\n    _refreshPageItem({element, state}) {\r\n        if (!element.pageItem) {\r\n            return;\r\n        }\r\n        if (element.pageItem.sectionId !== this.id && this.isPageItem) {\r\n            this.pageItem = false;\r\n            this.getElement(this.selectors.SECTION_ITEM).classList.remove(this.classes.PAGEITEM);\r\n            return;\r\n        }\r\n        const section = state.section.get(this.id);\r\n        if (section.indexcollapsed && !element.pageItem?.isStatic) {\r\n            this.pageItem = (element.pageItem?.sectionId == this.id);\r\n        } else {\r\n            this.pageItem = (element.pageItem.type == 'section' && element.pageItem.id == this.id);\r\n        }\r\n        const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\r\n        sectionItem.classList.toggle(this.classes.PAGEITEM, this.pageItem ?? false);\r\n        if (this.pageItem && !this.reactive.isEditing) {\r\n            this.element.scrollIntoView({block: \"nearest\"});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Overridden version of the component addOverlay async method.\r\n     *\r\n     * The course index is not compatible with overlay elements.\r\n     */\r\n    async addOverlay() {\r\n        this.element.classList.add(this.classes.OVERLAYBORDERS);\r\n    }\r\n\r\n    /**\r\n     * Overridden version of the component removeOverlay.\r\n     *\r\n     * The course index is not compatible with overlay elements.\r\n     */\r\n    removeOverlay() {\r\n        this.element.classList.remove(this.classes.OVERLAYBORDERS);\r\n    }\r\n}\r\n"],"names":["Component","DndSection","create","name","selectors","SECTION_ITEM","SECTION_TITLE","CM_LAST","classes","SECTIONHIDDEN","SECTIONCURRENT","LOCKED","RESTRICTIONS","PAGEITEM","OVERLAYBORDERS","id","this","element","dataset","isPageItem","target","document","getElementById","stateReady","state","configState","sectionItem","getElement","reactive","isEditing","supportComponents","titleitem","SectionTitle","fullregion","configDragDrop","section","get","window","location","href","sectionurl","replace","dispatch","scrollIntoView","getWatchers","watch","handler","remove","_refreshSection","_refreshPageItem","getLastCm","classList","toggle","visible","hasrestrictions","current","DRAGGING","dragging","locked","innerHTML","title","pageItem","sectionId","indexcollapsed","_element$pageItem","isStatic","type","block","add","removeOverlay"],"mappings":";;;;;;;;;;+LA6BqBA,kBAAkBC,oBAKnCC,cAESC,KAAO,2BAEPC,UAAY,CACbC,yCACAC,2CACAC,2CAGCC,QAAU,CACXC,cAAe,SACfC,eAAgB,UAChBC,OAAQ,iBACRC,aAAc,eACdC,SAAU,WACVC,eAAgB,gCAIfC,GAAKC,KAAKC,QAAQC,QAAQH,QAC1BI,YAAa,cAUVC,OAAQhB,kBACT,IAAIY,KAAK,CACZC,QAASI,SAASC,eAAeF,QACjChB,UAAAA,YASRmB,WAAWC,YACFC,YAAYD,aACXE,YAAcV,KAAKW,WAAWX,KAAKZ,UAAUC,iBAE/CW,KAAKY,SAASC,WAAab,KAAKY,SAASE,kBAAmB,OAEtDC,UAAY,IAAIC,sBAAa,IAC5BhB,KACHC,QAASS,YACTO,WAAYjB,KAAKC,eAEhBiB,eAAeH,iBAGlBI,QAAUX,MAAMW,QAAQC,IAAIpB,KAAKD,IACnCsB,OAAOC,SAASC,MAAQJ,QAAQK,WAAWC,QAAQ,SAAU,YACxDb,SAASc,SAAS,cAAe,UAAW1B,KAAKD,IACtDW,YAAYiB,kBASpBC,oBACW,CACH,CAACC,wBAAkB7B,KAAKD,gBAAe+B,QAAS9B,KAAK+B,QACrD,CAACF,wBAAkB7B,KAAKD,gBAAe+B,QAAS9B,KAAKgC,iBACrD,CAACH,gCAAkCC,QAAS9B,KAAKiC,mBASzDC,mBACWlC,KAAKW,WAAWX,KAAKZ,UAAUG,SAS1CyC,sFAAgB/B,QAACA,oBAEPS,YAAcV,KAAKW,WAAWX,KAAKZ,UAAUC,cACnDqB,YAAYyB,UAAUC,OAAOpC,KAAKR,QAAQC,eAAgBQ,QAAQoC,SAClE3B,YAAYyB,UAAUC,OAAOpC,KAAKR,QAAQI,2CAAcK,QAAQqC,8EAC3DrC,QAAQkC,UAAUC,OAAOpC,KAAKR,QAAQE,eAAgBO,QAAQsC,cAC9DtC,QAAQkC,UAAUC,OAAOpC,KAAKR,QAAQgD,mCAAUvC,QAAQwC,+DACxDxC,QAAQkC,UAAUC,OAAOpC,KAAKR,QAAQG,+BAAQM,QAAQyC,yDACtDA,OAASzC,QAAQyC,YAEjB/B,WAAWX,KAAKZ,UAAUE,eAAeqD,UAAY1C,QAAQ2C,MAUtEX,iEAAiBhC,QAACA,QAADO,MAAUA,iBAClBP,QAAQ4C,mBAGT5C,QAAQ4C,SAASC,YAAc9C,KAAKD,IAAMC,KAAKG,uBAC1C0C,UAAW,YACXlC,WAAWX,KAAKZ,UAAUC,cAAc8C,UAAUJ,OAAO/B,KAAKR,QAAQK,kCAG/DW,MAAMW,QAAQC,IAAIpB,KAAKD,IAC3BgD,0CAAmB9C,QAAQ4C,uCAARG,kBAAkBC,cAGxCJ,SAAqC,WAAzB5C,QAAQ4C,SAASK,MAAqBjD,QAAQ4C,SAAS9C,IAAMC,KAAKD,QAF9E8C,qCAAY5C,QAAQ4C,iEAAUC,YAAa9C,KAAKD,GAIrCC,KAAKW,WAAWX,KAAKZ,UAAUC,cACvC8C,UAAUC,OAAOpC,KAAKR,QAAQK,gCAAUG,KAAK6C,oDACrD7C,KAAK6C,WAAa7C,KAAKY,SAASC,gBAC3BZ,QAAQ0B,eAAe,CAACwB,MAAO,oCAUnClD,QAAQkC,UAAUiB,IAAIpD,KAAKR,QAAQM,gBAQ5CuD,qBACSpD,QAAQkC,UAAUJ,OAAO/B,KAAKR,QAAQM"}