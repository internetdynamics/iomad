{"version":3,"file":"courseindex.min.js","sources":["../../../src/local/courseindex/courseindex.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index main component.\r\n *\r\n * @module     core_courseformat/local/courseindex/courseindex\r\n * @class     core_courseformat/local/courseindex/courseindex\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {BaseComponent} from 'core/reactive';\r\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\r\nimport jQuery from 'jquery';\r\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\r\n\r\nexport default class Component extends BaseComponent {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'courseindex';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            SECTION: `[data-for='section']`,\r\n            SECTION_CMLIST: `[data-for='cmlist']`,\r\n            CM: `[data-for='cm']`,\r\n            TOGGLER: `[data-action=\"togglecourseindexsection\"]`,\r\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\r\n            DRAWER: `.drawer`,\r\n        };\r\n        // Default classes to toggle on refresh.\r\n        this.classes = {\r\n            SECTIONHIDDEN: 'dimmed',\r\n            CMHIDDEN: 'dimmed',\r\n            SECTIONCURRENT: 'current',\r\n            COLLAPSED: `collapsed`,\r\n            SHOW: `show`,\r\n        };\r\n        // Arrays to keep cms and sections elements.\r\n        this.sections = {};\r\n        this.cms = {};\r\n    }\r\n\r\n    /**\r\n     * Static method to create a component instance form the mustache template.\r\n     *\r\n     * @param {element|string} target the DOM main element or its ID\r\n     * @param {object} selectors optional css selector overrides\r\n     * @return {Component}\r\n     */\r\n    static init(target, selectors) {\r\n        return new this({\r\n            element: document.getElementById(target),\r\n            reactive: getCurrentCourseEditor(),\r\n            selectors,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the state data\r\n     */\r\n    stateReady(state) {\r\n        // Activate section togglers.\r\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\r\n\r\n        // Get cms and sections elements.\r\n        const sections = this.getElements(this.selectors.SECTION);\r\n        sections.forEach((section) => {\r\n            this.sections[section.dataset.id] = section;\r\n        });\r\n        const cms = this.getElements(this.selectors.CM);\r\n        cms.forEach((cm) => {\r\n            this.cms[cm.dataset.id] = cm;\r\n        });\r\n\r\n        // Set the page item if any.\r\n        this._refreshPageItem({element: state.course, state});\r\n\r\n        // Configure Aria Tree.\r\n        this.contentTree = new ContentTree(this.element, this.selectors, this.reactive.isEditing);\r\n    }\r\n\r\n    getWatchers() {\r\n        return [\r\n            {watch: `section.indexcollapsed:updated`, handler: this._refreshSectionCollapsed},\r\n            {watch: `cm:created`, handler: this._createCm},\r\n            {watch: `cm:deleted`, handler: this._deleteCm},\r\n            {watch: `section:created`, handler: this._createSection},\r\n            {watch: `section:deleted`, handler: this._deleteSection},\r\n            {watch: `course.pageItem:created`, handler: this._refreshPageItem},\r\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\r\n            // Sections and cm sorting.\r\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\r\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Setup sections toggler.\r\n     *\r\n     * Toggler click is delegated to the main course index element because new sections can\r\n     * appear at any moment and this way we prevent accidental double bindings.\r\n     *\r\n     * @param {Event} event the triggered event\r\n     */\r\n    _sectionTogglers(event) {\r\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\r\n        const isChevron = event.target.closest(this.selectors.COLLAPSE);\r\n\r\n        if (sectionlink || isChevron) {\r\n\r\n            const section = event.target.closest(this.selectors.SECTION);\r\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\r\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\r\n\r\n            if (isChevron || isCollapsed) {\r\n                // Update the state.\r\n                const sectionId = section.getAttribute('data-id');\r\n                this.reactive.dispatch(\r\n                    'sectionIndexCollapsed',\r\n                    [sectionId],\r\n                    !isCollapsed\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update section collapsed.\r\n     *\r\n     * @param {object} args\r\n     * @param {object} args.element The leement to be expanded\r\n     */\r\n    _refreshSectionCollapsed({element}) {\r\n        const target = this.getElement(this.selectors.SECTION, element.id);\r\n        if (!target) {\r\n            throw new Error(`Unkown section with ID ${element.id}`);\r\n        }\r\n        // Check if it is already done.\r\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\r\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\r\n\r\n        if (element.indexcollapsed !== isCollapsed) {\r\n            this._expandSectionNode(element);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Expand a section node.\r\n     *\r\n     * By default the method will use element.indexcollapsed to decide if the\r\n     * section is opened or closed. However, using forceValue it is possible\r\n     * to open or close a section independant from the indexcollapsed attribute.\r\n     *\r\n     * @param {Object} element the course module state element\r\n     * @param {boolean} forceValue optional forced expanded value\r\n     */\r\n    _expandSectionNode(element, forceValue) {\r\n        const target = this.getElement(this.selectors.SECTION, element.id);\r\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\r\n        let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\r\n        if (!collapsibleId) {\r\n            return;\r\n        }\r\n        collapsibleId = collapsibleId.replace('#', '');\r\n        const collapsible = document.getElementById(collapsibleId);\r\n        if (!collapsible) {\r\n            return;\r\n        }\r\n\r\n        if (forceValue === undefined) {\r\n            forceValue = (element.indexcollapsed) ? false : true;\r\n        }\r\n\r\n        // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\r\n        // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\r\n        // it does not require jQuery anymore (when MDL-71979 is integrated).\r\n        const togglerValue = (forceValue) ? 'show' : 'hide';\r\n        jQuery(collapsible).collapse(togglerValue);\r\n    }\r\n\r\n    /**\r\n     * Handle a page item update.\r\n     *\r\n     * @param {Object} details the update details\r\n     * @param {Object} details.state the state data.\r\n     * @param {Object} details.element the course state data.\r\n     */\r\n    _refreshPageItem({element, state}) {\r\n        if (!element?.pageItem?.isStatic || element.pageItem.type != 'cm') {\r\n            return;\r\n        }\r\n        // Check if we need to uncollapse the section and scroll to the element.\r\n        const section = state.section.get(element.pageItem.sectionId);\r\n        if (section.indexcollapsed) {\r\n            this._expandSectionNode(section, true);\r\n            setTimeout(\r\n                () => this.cms[element.pageItem.id]?.scrollIntoView({block: \"nearest\"}),\r\n                250\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a newcm instance.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.state\r\n     * @param {Object} param.element\r\n     */\r\n    async _createCm({state, element}) {\r\n        // Create a fake node while the component is loading.\r\n        const fakeelement = document.createElement('li');\r\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\r\n        fakeelement.innerHTML = '&nbsp;';\r\n        this.cms[element.id] = fakeelement;\r\n        // Place the fake node on the correct position.\r\n        this._refreshSectionCmlist({\r\n            state,\r\n            element: state.section.get(element.sectionid),\r\n        });\r\n        // Collect render data.\r\n        const exporter = this.reactive.getExporter();\r\n        const data = exporter.cm(state, element);\r\n        // Create the new content.\r\n        const newcomponent = await this.renderComponent(fakeelement, 'core_courseformat/local/courseindex/cm', data);\r\n        // Replace the fake node with the real content.\r\n        const newelement = newcomponent.getElement();\r\n        this.cms[element.id] = newelement;\r\n        fakeelement.parentNode.replaceChild(newelement, fakeelement);\r\n    }\r\n\r\n    /**\r\n     * Create a new section instance.\r\n     *\r\n     * @param {Object} details the update details.\r\n     * @param {Object} details.state the state data.\r\n     * @param {Object} details.element the element data.\r\n     */\r\n    async _createSection({state, element}) {\r\n        // Create a fake node while the component is loading.\r\n        const fakeelement = document.createElement('div');\r\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\r\n        fakeelement.innerHTML = '&nbsp;';\r\n        this.sections[element.id] = fakeelement;\r\n        // Place the fake node on the correct position.\r\n        this._refreshCourseSectionlist({\r\n            state,\r\n            element: state.course,\r\n        });\r\n        // Collect render data.\r\n        const exporter = this.reactive.getExporter();\r\n        const data = exporter.section(state, element);\r\n        // Create the new content.\r\n        const newcomponent = await this.renderComponent(fakeelement, 'core_courseformat/local/courseindex/section', data);\r\n        // Replace the fake node with the real content.\r\n        const newelement = newcomponent.getElement();\r\n        this.sections[element.id] = newelement;\r\n        fakeelement.parentNode.replaceChild(newelement, fakeelement);\r\n    }\r\n\r\n    /**\r\n     * Refresh a section cm list.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element\r\n     */\r\n    _refreshSectionCmlist({element}) {\r\n        const cmlist = element.cmlist ?? [];\r\n        const listparent = this.getElement(this.selectors.SECTION_CMLIST, element.id);\r\n        this._fixOrder(listparent, cmlist, this.cms);\r\n    }\r\n\r\n    /**\r\n     * Refresh the section list.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element\r\n     */\r\n    _refreshCourseSectionlist({element}) {\r\n        const sectionlist = element.sectionlist ?? [];\r\n        this._fixOrder(this.element, sectionlist, this.sections);\r\n    }\r\n\r\n    /**\r\n     * Fix/reorder the section or cms order.\r\n     *\r\n     * @param {Element} container the HTML element to reorder.\r\n     * @param {Array} neworder an array with the ids order\r\n     * @param {Array} allitems the list of html elements that can be placed in the container\r\n     */\r\n    _fixOrder(container, neworder, allitems) {\r\n        // Empty lists should not be visible.\r\n        if (!neworder.length) {\r\n            container.classList.add('hidden');\r\n            container.innerHTML = '';\r\n            return;\r\n        }\r\n\r\n        // Grant the list is visible (in case it was empty).\r\n        container.classList.remove('hidden');\r\n\r\n        // Move the elements in order at the beginning of the list.\r\n        neworder.forEach((itemid, index) => {\r\n            const item = allitems[itemid];\r\n            // Get the current element at that position.\r\n            const currentitem = container.children[index];\r\n            if (currentitem === undefined) {\r\n                container.append(item);\r\n                return;\r\n            }\r\n            if (currentitem !== item && item) {\r\n                container.insertBefore(item, currentitem);\r\n            }\r\n        });\r\n        // Remove the remaining elements.\r\n        while (container.children.length > neworder.length) {\r\n            container.removeChild(container.lastChild);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a cm from the list.\r\n     *\r\n     * The actual DOM element removal is delegated to the cm component.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element\r\n     */\r\n    _deleteCm({element}) {\r\n        delete this.cms[element.id];\r\n    }\r\n\r\n    /**\r\n     * Remove a section from the list.\r\n     *\r\n     * The actual DOM element removal is delegated to the section component.\r\n     *\r\n     * @param {Object} details the update details.\r\n     * @param {Object} details.element the element data.\r\n     */\r\n    _deleteSection({element}) {\r\n        delete this.sections[element.id];\r\n    }\r\n}\r\n"],"names":["Component","BaseComponent","create","name","selectors","SECTION","SECTION_CMLIST","CM","TOGGLER","COLLAPSE","DRAWER","classes","SECTIONHIDDEN","CMHIDDEN","SECTIONCURRENT","COLLAPSED","SHOW","sections","cms","target","this","element","document","getElementById","reactive","stateReady","state","addEventListener","_sectionTogglers","getElements","forEach","section","dataset","id","cm","_refreshPageItem","course","contentTree","ContentTree","isEditing","getWatchers","watch","handler","_refreshSectionCollapsed","_createCm","_deleteCm","_createSection","_deleteSection","_refreshCourseSectionlist","_refreshSectionCmlist","event","sectionlink","closest","isChevron","toggler","querySelector","isCollapsed","classList","contains","sectionId","getAttribute","dispatch","getElement","Error","indexcollapsed","_expandSectionNode","forceValue","collapsibleId","replace","collapsible","undefined","togglerValue","collapse","pageItem","_element$pageItem","isStatic","type","get","setTimeout","_this$cms$element$pag","scrollIntoView","block","fakeelement","createElement","add","innerHTML","sectionid","data","getExporter","newelement","renderComponent","parentNode","replaceChild","cmlist","listparent","_fixOrder","sectionlist","container","neworder","allitems","length","remove","itemid","index","item","currentitem","children","insertBefore","append","removeChild","lastChild"],"mappings":"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"}