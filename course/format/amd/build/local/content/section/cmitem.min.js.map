{"version":3,"file":"cmitem.min.js","sources":["../../../../src/local/content/section/cmitem.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course course module item component.\r\n *\r\n * This component is used to control specific course modules interactions like drag and drop.\r\n *\r\n * @module     core_courseformat/local/content/section/cmitem\r\n * @class      core_courseformat/local/content/section/cmitem\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport DndCmItem from 'core_courseformat/local/courseeditor/dndcmitem';\r\n\r\nexport default class extends DndCmItem {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'content_section_cmitem';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            BULKSELECT: `[data-for='cmBulkSelect']`,\r\n            BULKCHECKBOX: `[data-bulkcheckbox]`,\r\n            CARD: `.activity-item`,\r\n            DRAGICON: `.editing_move`,\r\n            INPLACEEDITABLE: `[data-inplaceeditablelink]`,\r\n        };\r\n        // Most classes will be loaded later by DndCmItem.\r\n        this.classes = {\r\n            LOCKED: 'editinprogress',\r\n            HIDE: 'd-none',\r\n            SELECTED: 'selected',\r\n        };\r\n        // We need our id to watch specific events.\r\n        this.id = this.element.dataset.id;\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     * @param {Object} state the state data\r\n     */\r\n    stateReady(state) {\r\n        this.configDragDrop(this.id);\r\n        this.getElement(this.selectors.DRAGICON)?.classList.add(this.classes.DRAGICON);\r\n        this._refreshBulk({state});\r\n    }\r\n\r\n    /**\r\n     * Component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            {watch: `cm[${this.id}]:deleted`, handler: this.unregister},\r\n            {watch: `cm[${this.id}]:updated`, handler: this._refreshCm},\r\n            {watch: `bulk:updated`, handler: this._refreshBulk},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Update a course index cm using the state information.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshCm({element}) {\r\n        // Update classes.\r\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\r\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\r\n        this.locked = element.locked;\r\n    }\r\n\r\n    /**\r\n     * Update the bulk editing interface.\r\n     *\r\n     * @param {object} param\r\n     * @param {Object} param.state the state data\r\n     */\r\n    _refreshBulk({state}) {\r\n        const bulk = state.bulk;\r\n        // For now, dragging elements in bulk is not possible.\r\n        this.setDraggable(!bulk.enabled);\r\n        // Convert the card into an active element in bulk mode.\r\n        if (bulk.enabled) {\r\n            this.element.dataset.action = 'toggleSelectionCm';\r\n            this.element.dataset.preventDefault = 1;\r\n        } else {\r\n            this.element.removeAttribute('data-action');\r\n            this.element.removeAttribute('data-preventDefault');\r\n        }\r\n\r\n        this.getElement(this.selectors.BULKSELECT)?.classList.toggle(this.classes.HIDE, !bulk.enabled);\r\n\r\n        const disabled = !this._isCmBulkEnabled(bulk);\r\n        const selected = this._isSelected(bulk);\r\n        this._refreshActivityCard(bulk, selected);\r\n        this._setCheckboxValue(selected, disabled);\r\n    }\r\n\r\n    /**\r\n     * Update the activity card depending on the bulk selection.\r\n     *\r\n     * @param {Object} bulk the current bulk state data\r\n     * @param {Boolean} selected if the activity is selected.\r\n     */\r\n    _refreshActivityCard(bulk, selected) {\r\n        this.getElement(this.selectors.INPLACEEDITABLE)?.classList.toggle(this.classes.HIDE, bulk.enabled);\r\n        this.getElement(this.selectors.CARD)?.classList.toggle(this.classes.SELECTED, selected);\r\n        this.element.classList.toggle(this.classes.SELECTED, selected);\r\n    }\r\n\r\n    /**\r\n     * Modify the checkbox element.\r\n     * @param {Boolean} checked the new checked value\r\n     * @param {Boolean} disabled the new disabled value\r\n     */\r\n    _setCheckboxValue(checked, disabled) {\r\n        const checkbox = this.getElement(this.selectors.BULKCHECKBOX);\r\n        if (!checkbox) {\r\n            return;\r\n        }\r\n        checkbox.checked = checked;\r\n        checkbox.disabled = disabled;\r\n        // Is selectable is used to easily scan the page for bulk checkboxes.\r\n        if (disabled) {\r\n            checkbox.removeAttribute('data-is-selectable');\r\n        } else {\r\n            checkbox.dataset.isSelectable = 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if cm bulk selection is available.\r\n     * @param {Object} bulk the current state bulk attribute\r\n     * @returns {Boolean}\r\n     */\r\n    _isCmBulkEnabled(bulk) {\r\n        if (!bulk.enabled) {\r\n            return false;\r\n        }\r\n        return (bulk.selectedType === '' || bulk.selectedType === 'cm');\r\n    }\r\n\r\n    /**\r\n     * Check if the cm id is part of the current bulk selection.\r\n     * @param {Object} bulk the current state bulk attribute\r\n     * @returns {Boolean}\r\n     */\r\n    _isSelected(bulk) {\r\n        if (bulk.selectedType !== 'cm') {\r\n            return false;\r\n        }\r\n        return bulk.selection.includes(this.id);\r\n    }\r\n}\r\n"],"names":["DndCmItem","create","name","selectors","BULKSELECT","BULKCHECKBOX","CARD","DRAGICON","INPLACEEDITABLE","classes","LOCKED","HIDE","SELECTED","id","this","element","dataset","stateReady","state","configDragDrop","getElement","classList","add","_refreshBulk","getWatchers","watch","handler","unregister","_refreshCm","toggle","DRAGGING","dragging","locked","bulk","setDraggable","enabled","action","preventDefault","removeAttribute","disabled","_isCmBulkEnabled","selected","_isSelected","_refreshActivityCard","_setCheckboxValue","checked","checkbox","isSelectable","selectedType","selection","includes"],"mappings":";;;;;;;;;;0KA4B6BA,mBAKzBC,cAESC,KAAO,8BAEPC,UAAY,CACbC,uCACAC,mCACAC,sBACAC,yBACAC,mDAGCC,QAAU,CACXC,OAAQ,iBACRC,KAAM,SACNC,SAAU,iBAGTC,GAAKC,KAAKC,QAAQC,QAAQH,GAOnCI,WAAWC,iCACFC,eAAeL,KAAKD,kCACpBO,WAAWN,KAAKX,UAAUI,wDAAWc,UAAUC,IAAIR,KAAKL,QAAQF,eAChEgB,aAAa,CAACL,MAAAA,QAQvBM,oBACW,CACH,CAACC,mBAAaX,KAAKD,gBAAea,QAASZ,KAAKa,YAChD,CAACF,mBAAaX,KAAKD,gBAAea,QAASZ,KAAKc,YAChD,CAACH,qBAAuBC,QAASZ,KAAKS,eAU9CK,2DAAWb,QAACA,mBAEHA,QAAQM,UAAUQ,OAAOf,KAAKL,QAAQqB,mCAAUf,QAAQgB,+DACxDhB,QAAQM,UAAUQ,OAAOf,KAAKL,QAAQC,+BAAQK,QAAQiB,yDACtDA,OAASjB,QAAQiB,OAS1BT,8CAAaL,MAACA,mBACJe,KAAOf,MAAMe,UAEdC,cAAcD,KAAKE,SAEpBF,KAAKE,cACApB,QAAQC,QAAQoB,OAAS,yBACzBrB,QAAQC,QAAQqB,eAAiB,SAEjCtB,QAAQuB,gBAAgB,oBACxBvB,QAAQuB,gBAAgB,uDAG5BlB,WAAWN,KAAKX,UAAUC,4DAAaiB,UAAUQ,OAAOf,KAAKL,QAAQE,MAAOsB,KAAKE,eAEhFI,UAAYzB,KAAK0B,iBAAiBP,MAClCQ,SAAW3B,KAAK4B,YAAYT,WAC7BU,qBAAqBV,KAAMQ,eAC3BG,kBAAkBH,SAAUF,UASrCI,qBAAqBV,KAAMQ,iFAClBrB,WAAWN,KAAKX,UAAUK,iEAAkBa,UAAUQ,OAAOf,KAAKL,QAAQE,KAAMsB,KAAKE,wCACrFf,WAAWN,KAAKX,UAAUG,sDAAOe,UAAUQ,OAAOf,KAAKL,QAAQG,SAAU6B,eACzE1B,QAAQM,UAAUQ,OAAOf,KAAKL,QAAQG,SAAU6B,UAQzDG,kBAAkBC,QAASN,gBACjBO,SAAWhC,KAAKM,WAAWN,KAAKX,UAAUE,cAC3CyC,WAGLA,SAASD,QAAUA,QACnBC,SAASP,SAAWA,SAEhBA,SACAO,SAASR,gBAAgB,sBAEzBQ,SAAS9B,QAAQ+B,aAAe,GASxCP,iBAAiBP,cACRA,KAAKE,UAGoB,KAAtBF,KAAKe,cAA6C,OAAtBf,KAAKe,cAQ7CN,YAAYT,YACkB,OAAtBA,KAAKe,cAGFf,KAAKgB,UAAUC,SAASpC,KAAKD"}