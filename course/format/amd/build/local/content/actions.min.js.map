{"version":3,"file":"actions.min.js","sources":["../../../src/local/content/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course state actions dispatcher.\r\n *\r\n * This module captures all data-dispatch links in the course content and dispatch the proper\r\n * state mutation, including any confirmation and modal required.\r\n *\r\n * @module     core_courseformat/local/content/actions\r\n * @class      core_courseformat/local/content/actions\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {BaseComponent} from 'core/reactive';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport ModalEvents from 'core/modal_events';\r\nimport Templates from 'core/templates';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {get_string as getString} from 'core/str';\r\nimport {getFirst} from 'core/normalise';\r\nimport {toggleBulkSelectionAction} from 'core_courseformat/local/content/actions/bulkselection';\r\nimport * as CourseEvents from 'core_course/events';\r\nimport Pending from 'core/pending';\r\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\r\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\r\nimport jQuery from 'jquery';\r\n\r\n// Load global strings.\r\nprefetchStrings('core', ['movecoursesection', 'movecoursemodule', 'confirm', 'delete']);\r\n\r\n// Mutations are dispatched by the course content actions.\r\n// Formats can use this module addActions static method to add custom actions.\r\n// Direct mutations can be simple strings (mutation) name or functions.\r\nconst directMutations = {\r\n    sectionHide: 'sectionHide',\r\n    sectionShow: 'sectionShow',\r\n    cmHide: 'cmHide',\r\n    cmShow: 'cmShow',\r\n    cmStealth: 'cmStealth',\r\n    cmMoveRight: 'cmMoveRight',\r\n    cmMoveLeft: 'cmMoveLeft',\r\n};\r\n\r\nexport default class extends BaseComponent {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'content_actions';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            ACTIONLINK: `[data-action]`,\r\n            // Move modal selectors.\r\n            SECTIONLINK: `[data-for='section']`,\r\n            CMLINK: `[data-for='cm']`,\r\n            SECTIONNODE: `[data-for='sectionnode']`,\r\n            MODALTOGGLER: `[data-toggle='collapse']`,\r\n            ADDSECTION: `[data-action='addSection']`,\r\n            CONTENTTREE: `#destination-selector`,\r\n            ACTIONMENU: `.action-menu`,\r\n            ACTIONMENUTOGGLER: `[data-toggle=\"dropdown\"]`,\r\n            // Availability modal selectors.\r\n            OPTIONSRADIO: `[type='radio']`,\r\n        };\r\n        // Component css classes.\r\n        this.classes = {\r\n            DISABLED: `text-body`,\r\n            ITALIC: `font-italic`,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Add extra actions to the module.\r\n     *\r\n     * @param {array} actions array of methods to execute\r\n     */\r\n    static addActions(actions) {\r\n        for (const [action, mutationReference] of Object.entries(actions)) {\r\n            if (typeof mutationReference !== 'function' && typeof mutationReference !== 'string') {\r\n                throw new Error(`${action} action must be a mutation name or a function`);\r\n            }\r\n            directMutations[action] = mutationReference;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {Object} state the state data.\r\n     *\r\n     */\r\n    stateReady(state) {\r\n        // Delegate dispatch clicks.\r\n        this.addEventListener(\r\n            this.element,\r\n            'click',\r\n            this._dispatchClick\r\n        );\r\n        // Check section limit.\r\n        this._checkSectionlist({state});\r\n        // Add an Event listener to recalculate limits it if a section HTML is altered.\r\n        this.addEventListener(\r\n            this.element,\r\n            CourseEvents.sectionRefreshed,\r\n            () => this._checkSectionlist({state})\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Return the component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            // Check section limit.\r\n            {watch: `course.sectionlist:updated`, handler: this._checkSectionlist},\r\n        ];\r\n    }\r\n\r\n    _dispatchClick(event) {\r\n        const target = event.target.closest(this.selectors.ACTIONLINK);\r\n        if (!target) {\r\n            return;\r\n        }\r\n        if (target.classList.contains(this.classes.DISABLED)) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // Invoke proper method.\r\n        const actionName = target.dataset.action;\r\n        const methodName = this._actionMethodName(actionName);\r\n\r\n        if (this[methodName] !== undefined) {\r\n            this[methodName](target, event);\r\n            return;\r\n        }\r\n\r\n        // Check direct mutations or mutations handlers.\r\n        if (directMutations[actionName] !== undefined) {\r\n            if (typeof directMutations[actionName] === 'function') {\r\n                directMutations[actionName](target, event);\r\n                return;\r\n            }\r\n            this._requestMutationAction(target, event, directMutations[actionName]);\r\n            return;\r\n        }\r\n    }\r\n\r\n    _actionMethodName(name) {\r\n        const requestName = name.charAt(0).toUpperCase() + name.slice(1);\r\n        return `_request${requestName}`;\r\n    }\r\n\r\n    /**\r\n     * Check the section list and disable some options if needed.\r\n     *\r\n     * @param {Object} detail the update details.\r\n     * @param {Object} detail.state the state object.\r\n     */\r\n    _checkSectionlist({state}) {\r\n        // Disable \"add section\" actions if the course max sections has been exceeded.\r\n        this._setAddSectionLocked(state.course.sectionlist.length > state.course.maxsections);\r\n    }\r\n\r\n    /**\r\n     * Return the ids represented by this element.\r\n     *\r\n     * Depending on the dataset attributes the action could represent a single id\r\n     * or a bulk actions with all the current selected ids.\r\n     *\r\n     * @param {HTMLElement} target\r\n     * @returns {Number[]} array of Ids\r\n     */\r\n    _getTargetIds(target) {\r\n        let ids = [];\r\n        if (target?.dataset?.id) {\r\n            ids.push(target.dataset.id);\r\n        }\r\n        const bulkType = target?.dataset?.bulk;\r\n        if (!bulkType) {\r\n            return ids;\r\n        }\r\n        const bulk = this.reactive.get('bulk');\r\n        if (bulk.enabled && bulk.selectedType === bulkType) {\r\n            ids = [...ids, ...bulk.selection];\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    /**\r\n     * Handle a move section request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestMoveSection(target, event) {\r\n        // Check we have an id.\r\n        const sectionIds = this._getTargetIds(target);\r\n        if (sectionIds.length == 0) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n\r\n        const pendingModalReady = new Pending(`courseformat/actions:prepareMoveSectionModal`);\r\n\r\n        // The section edit menu to refocus on end.\r\n        const editTools = this._getClosestActionMenuToogler(target);\r\n\r\n        // Collect section information from the state.\r\n        const exporter = this.reactive.getExporter();\r\n        const data = exporter.course(this.reactive.state);\r\n        let titleText = null;\r\n\r\n        // Add the target section id and title.\r\n        let sectionInfo = null;\r\n        if (sectionIds.length == 1) {\r\n            sectionInfo = this.reactive.get('section', sectionIds[0]);\r\n            data.sectionid = sectionInfo.id;\r\n            data.sectiontitle = sectionInfo.title;\r\n            data.information = await this.reactive.getFormatString('sectionmove_info', data.sectiontitle);\r\n            titleText = this.reactive.getFormatString('sectionmove_title');\r\n        } else {\r\n            data.information = await this.reactive.getFormatString('sectionsmove_info', sectionIds.length);\r\n            titleText = this.reactive.getFormatString('sectionsmove_title');\r\n        }\r\n\r\n\r\n        // Build the modal parameters from the event data.\r\n        const modalParams = {\r\n            title: titleText,\r\n            body: Templates.render('core_courseformat/local/content/movesection', data),\r\n        };\r\n\r\n        // Create the modal.\r\n        const modal = await this._modalBodyRenderedPromise(modalParams);\r\n\r\n        const modalBody = getFirst(modal.getBody());\r\n\r\n        // Disable current selected section ids.\r\n        sectionIds.forEach(sectionId => {\r\n            const currentElement = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-id='${sectionId}']`);\r\n            this._disableLink(currentElement);\r\n        });\r\n\r\n        // Setup keyboard navigation.\r\n        new ContentTree(\r\n            modalBody.querySelector(this.selectors.CONTENTTREE),\r\n            {\r\n                SECTION: this.selectors.SECTIONNODE,\r\n                TOGGLER: this.selectors.MODALTOGGLER,\r\n                COLLAPSE: this.selectors.MODALTOGGLER,\r\n            },\r\n            true\r\n        );\r\n\r\n        // Capture click.\r\n        modalBody.addEventListener('click', (event) => {\r\n            const target = event.target;\r\n            if (!target.matches('a') || target.dataset.for != 'section' || target.dataset.id === undefined) {\r\n                return;\r\n            }\r\n            if (target.getAttribute('aria-disabled')) {\r\n                return;\r\n            }\r\n            event.preventDefault();\r\n            this.reactive.dispatch('sectionMoveAfter', sectionIds, target.dataset.id);\r\n            this._destroyModal(modal, editTools);\r\n        });\r\n\r\n        pendingModalReady.resolve();\r\n    }\r\n\r\n    /**\r\n     * Handle a move cm request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestMoveCm(target, event) {\r\n        // Check we have an id.\r\n        const cmIds = this._getTargetIds(target);\r\n        if (cmIds.length == 0) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n\r\n        const pendingModalReady = new Pending(`courseformat/actions:prepareMoveCmModal`);\r\n\r\n        // The section edit menu to refocus on end.\r\n        const editTools = this._getClosestActionMenuToogler(target);\r\n\r\n        // Collect information from the state.\r\n        const exporter = this.reactive.getExporter();\r\n        const data = exporter.course(this.reactive.state);\r\n\r\n        let titleText = null;\r\n        if (cmIds.length == 1) {\r\n            const cmInfo = this.reactive.get('cm', cmIds[0]);\r\n            data.cmid = cmInfo.id;\r\n            data.cmname = cmInfo.name;\r\n            data.information = await this.reactive.getFormatString('cmmove_info', data.cmname);\r\n            titleText = this.reactive.getFormatString('cmmove_title');\r\n        } else {\r\n            data.information = await this.reactive.getFormatString('cmsmove_info', cmIds.length);\r\n            titleText = this.reactive.getFormatString('cmsmove_title');\r\n        }\r\n\r\n        // Build the modal parameters from the event data.\r\n        const modalParams = {\r\n            title: titleText,\r\n            body: Templates.render('core_courseformat/local/content/movecm', data),\r\n        };\r\n\r\n        // Create the modal.\r\n        const modal = await this._modalBodyRenderedPromise(modalParams);\r\n\r\n        const modalBody = getFirst(modal.getBody());\r\n\r\n        // Disable current selected section ids.\r\n        cmIds.forEach(cmId => {\r\n            const currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\r\n            this._disableLink(currentElement);\r\n        });\r\n\r\n        // Setup keyboard navigation.\r\n        new ContentTree(\r\n            modalBody.querySelector(this.selectors.CONTENTTREE),\r\n            {\r\n                SECTION: this.selectors.SECTIONNODE,\r\n                TOGGLER: this.selectors.MODALTOGGLER,\r\n                COLLAPSE: this.selectors.MODALTOGGLER,\r\n                ENTER: this.selectors.SECTIONLINK,\r\n            }\r\n        );\r\n\r\n        // Open the cm section node if possible (Bootstrap 4 uses jQuery to interact with collapsibles).\r\n        // All jQuery in this code can be replaced when MDL-71979 is integrated.\r\n        cmIds.forEach(cmId => {\r\n            const currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\r\n            const sectionnode = currentElement.closest(this.selectors.SECTIONNODE);\r\n            const toggler = jQuery(sectionnode).find(this.selectors.MODALTOGGLER);\r\n            let collapsibleId = toggler.data('target') ?? toggler.attr('href');\r\n            if (collapsibleId) {\r\n                // We cannot be sure we have # in the id element name.\r\n                collapsibleId = collapsibleId.replace('#', '');\r\n                const expandNode = modalBody.querySelector(`#${collapsibleId}`);\r\n                jQuery(expandNode).collapse('show');\r\n            }\r\n        });\r\n\r\n        modalBody.addEventListener('click', (event) => {\r\n            const target = event.target;\r\n            if (!target.matches('a') || target.dataset.for === undefined || target.dataset.id === undefined) {\r\n                return;\r\n            }\r\n            if (target.getAttribute('aria-disabled')) {\r\n                return;\r\n            }\r\n            event.preventDefault();\r\n\r\n            let targetSectionId;\r\n            let targetCmId;\r\n            if (target.dataset.for == 'cm') {\r\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\r\n                targetSectionId = dropData.sectionid;\r\n                targetCmId = dropData.nextcmid;\r\n            } else {\r\n                const section = this.reactive.get('section', target.dataset.id);\r\n                targetSectionId = target.dataset.id;\r\n                targetCmId = section?.cmlist[0];\r\n            }\r\n            this.reactive.dispatch('cmMove', cmIds, targetSectionId, targetCmId);\r\n            this._destroyModal(modal, editTools);\r\n        });\r\n\r\n        pendingModalReady.resolve();\r\n    }\r\n\r\n    /**\r\n     * Handle a create section request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestAddSection(target, event) {\r\n        event.preventDefault();\r\n        this.reactive.dispatch('addSection', target.dataset.id ?? 0);\r\n    }\r\n\r\n    /**\r\n     * Handle a delete section request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestDeleteSection(target, event) {\r\n        const sectionIds = this._getTargetIds(target);\r\n        if (sectionIds.length == 0) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n\r\n        // We don't need confirmation to delete empty sections.\r\n        let needsConfirmation = sectionIds.some(sectionId => {\r\n            const sectionInfo = this.reactive.get('section', sectionId);\r\n            const cmList = sectionInfo.cmlist ?? [];\r\n            return (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle);\r\n        });\r\n        if (!needsConfirmation) {\r\n            this.reactive.dispatch('sectionDelete', sectionIds);\r\n            return;\r\n        }\r\n\r\n        let bodyText = null;\r\n        let titleText = null;\r\n        if (sectionIds.length == 1) {\r\n            titleText = this.reactive.getFormatString('sectiondelete_title');\r\n            const sectionInfo = this.reactive.get('section', sectionIds[0]);\r\n            bodyText = this.reactive.getFormatString('sectiondelete_info', {name: sectionInfo.title});\r\n        } else {\r\n            titleText = this.reactive.getFormatString('sectionsdelete_title');\r\n            bodyText = this.reactive.getFormatString('sectionsdelete_info', {count: sectionIds.length});\r\n        }\r\n\r\n        const modalParams = {\r\n            title: titleText,\r\n            body: bodyText,\r\n            type: ModalFactory.types.DELETE_CANCEL,\r\n        };\r\n\r\n        const modal = await this._modalBodyRenderedPromise(modalParams);\r\n\r\n        modal.getRoot().on(\r\n            ModalEvents.delete,\r\n            e => {\r\n                // Stop the default save button behaviour which is to close the modal.\r\n                e.preventDefault();\r\n                modal.destroy();\r\n                this.reactive.dispatch('sectionDelete', sectionIds);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle a toggle cm selection.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestToggleSelectionCm(target, event) {\r\n        toggleBulkSelectionAction(this.reactive, target, event, 'cm');\r\n    }\r\n\r\n    /**\r\n     * Handle a toggle section selection.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestToggleSelectionSection(target, event) {\r\n        toggleBulkSelectionAction(this.reactive, target, event, 'section');\r\n    }\r\n\r\n    /**\r\n     * Basic mutation action helper.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     * @param {string} mutationName the mutation name\r\n     */\r\n    async _requestMutationAction(target, event, mutationName) {\r\n        if (!target.dataset.id) {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        this.reactive.dispatch(mutationName, [target.dataset.id]);\r\n    }\r\n\r\n    /**\r\n     * Handle a course module duplicate request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestCmDuplicate(target, event) {\r\n        const cmIds = this._getTargetIds(target);\r\n        if (cmIds.length == 0) {\r\n            return;\r\n        }\r\n        const sectionId = target.dataset.sectionid ?? null;\r\n        event.preventDefault();\r\n        this.reactive.dispatch('cmDuplicate', cmIds, sectionId);\r\n    }\r\n\r\n    /**\r\n     * Handle a delete cm request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     * @param {Event} event the triggered event\r\n     */\r\n    async _requestCmDelete(target, event) {\r\n        const cmIds = this._getTargetIds(target);\r\n        if (cmIds.length == 0) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n\r\n        let bodyText = null;\r\n        let titleText = null;\r\n        if (cmIds.length == 1) {\r\n            const cmInfo = this.reactive.get('cm', cmIds[0]);\r\n            titleText = getString('cmdelete_title', 'core_courseformat');\r\n            bodyText = getString(\r\n                'cmdelete_info',\r\n                'core_courseformat',\r\n                {\r\n                    type: cmInfo.modname,\r\n                    name: cmInfo.name,\r\n                }\r\n            );\r\n        } else {\r\n            titleText = getString('cmsdelete_title', 'core_courseformat');\r\n            bodyText = getString(\r\n                'cmsdelete_info',\r\n                'core_courseformat',\r\n                {count: cmIds.length}\r\n            );\r\n        }\r\n\r\n        const modalParams = {\r\n            title: titleText,\r\n            body: bodyText,\r\n            type: ModalFactory.types.DELETE_CANCEL,\r\n        };\r\n\r\n        const modal = await this._modalBodyRenderedPromise(modalParams);\r\n\r\n        modal.getRoot().on(\r\n            ModalEvents.delete,\r\n            e => {\r\n                // Stop the default save button behaviour which is to close the modal.\r\n                e.preventDefault();\r\n                modal.destroy();\r\n                this.reactive.dispatch('cmDelete', cmIds);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle a cm availability change request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     */\r\n    async _requestCmAvailability(target) {\r\n        const cmIds = this._getTargetIds(target);\r\n        if (cmIds.length == 0) {\r\n            return;\r\n        }\r\n        // Show the availability modal to decide which action to trigger.\r\n        const exporter = this.reactive.getExporter();\r\n        const data = {\r\n            allowstealth: exporter.canUseStealth(this.reactive.state, cmIds),\r\n        };\r\n        const modalParams = {\r\n            title: getString('availability', 'core'),\r\n            body: Templates.render('core_courseformat/local/content/cm/availabilitymodal', data),\r\n            saveButtonText: getString('apply', 'core'),\r\n            type: ModalFactory.types.SAVE_CANCEL,\r\n        };\r\n        const modal = await this._modalBodyRenderedPromise(modalParams);\r\n\r\n        this._setupMutationRadioButtonModal(modal, cmIds);\r\n    }\r\n\r\n    /**\r\n     * Handle a section availability change request.\r\n     *\r\n     * @param {Element} target the dispatch action element\r\n     */\r\n    async _requestSectionAvailability(target) {\r\n        const sectionIds = this._getTargetIds(target);\r\n        if (sectionIds.length == 0) {\r\n            return;\r\n        }\r\n        const title = (sectionIds.length == 1) ? 'sectionavailability_title' : 'sectionsavailability_title';\r\n        // Show the availability modal to decide which action to trigger.\r\n        const modalParams = {\r\n            title: this.reactive.getFormatString(title),\r\n            body: Templates.render('core_courseformat/local/content/section/availabilitymodal', []),\r\n            saveButtonText: getString('apply', 'core'),\r\n            type: ModalFactory.types.SAVE_CANCEL,\r\n        };\r\n        const modal = await this._modalBodyRenderedPromise(modalParams);\r\n\r\n        this._setupMutationRadioButtonModal(modal, sectionIds);\r\n    }\r\n\r\n    /**\r\n     * Add events to a mutation selector radio buttons modal.\r\n     * @param {Modal} modal\r\n     * @param {Number[]} ids the section or cm ids to apply the mutation\r\n     */\r\n    _setupMutationRadioButtonModal(modal, ids) {\r\n        // The save button is not enabled until the user selects an option.\r\n        modal.setButtonDisabled('save', true);\r\n\r\n        const submitFunction = (radio) => {\r\n            const mutation = radio?.value;\r\n            if (!mutation) {\r\n                return false;\r\n            }\r\n            this.reactive.dispatch(mutation, ids);\r\n            return true;\r\n        };\r\n\r\n        const modalBody = getFirst(modal.getBody());\r\n        const radioOptions = modalBody.querySelectorAll(this.selectors.OPTIONSRADIO);\r\n        radioOptions.forEach(radio => {\r\n            radio.addEventListener('change', () => {\r\n                modal.setButtonDisabled('save', false);\r\n            });\r\n            radio.parentNode.addEventListener('click', () => {\r\n                radio.checked = true;\r\n                modal.setButtonDisabled('save', false);\r\n            });\r\n            radio.parentNode.addEventListener('dblclick', dbClickEvent => {\r\n                if (submitFunction(radio)) {\r\n                    dbClickEvent.preventDefault();\r\n                    modal.destroy();\r\n                }\r\n            });\r\n        });\r\n\r\n        modal.getRoot().on(\r\n            ModalEvents.save,\r\n            () => {\r\n                const radio = modalBody.querySelector(`${this.selectors.OPTIONSRADIO}:checked`);\r\n                submitFunction(radio);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Disable all add sections actions.\r\n     *\r\n     * @param {boolean} locked the new locked value.\r\n     */\r\n    _setAddSectionLocked(locked) {\r\n        const targets = this.getElements(this.selectors.ADDSECTION);\r\n        targets.forEach(element => {\r\n            element.classList.toggle(this.classes.DISABLED, locked);\r\n            element.classList.toggle(this.classes.ITALIC, locked);\r\n            this.setElementLocked(element, locked);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Replace an element with a copy with a different tag name.\r\n     *\r\n     * @param {Element} element the original element\r\n     */\r\n    _disableLink(element) {\r\n        if (element) {\r\n            element.style.pointerEvents = 'none';\r\n            element.style.userSelect = 'none';\r\n            element.classList.add(this.classes.DISABLED);\r\n            element.classList.add(this.classes.ITALIC);\r\n            element.setAttribute('aria-disabled', true);\r\n            element.addEventListener('click', event => event.preventDefault());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render a modal and return a body ready promise.\r\n     *\r\n     * @param {object} modalParams the modal params\r\n     * @return {Promise} the modal body ready promise\r\n     */\r\n    _modalBodyRenderedPromise(modalParams) {\r\n        return new Promise((resolve, reject) => {\r\n            ModalFactory.create(modalParams).then((modal) => {\r\n                modal.setRemoveOnClose(true);\r\n                // Handle body loading event.\r\n                modal.getRoot().on(ModalEvents.bodyRendered, () => {\r\n                    resolve(modal);\r\n                });\r\n                // Configure some extra modal params.\r\n                if (modalParams.saveButtonText !== undefined) {\r\n                    modal.setSaveButtonText(modalParams.saveButtonText);\r\n                }\r\n                if (modalParams.deleteButtonText !== undefined) {\r\n                    modal.setDeleteButtonText(modalParams.saveButtonText);\r\n                }\r\n                modal.show();\r\n                return;\r\n            }).catch(() => {\r\n                reject(`Cannot load modal content`);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Hide and later destroy a modal.\r\n     *\r\n     * Behat will fail if we remove the modal while some boostrap collapse is executing.\r\n     *\r\n     * @param {Modal} modal\r\n     * @param {HTMLElement} element the dom element to focus on.\r\n     */\r\n    _destroyModal(modal, element) {\r\n        modal.hide();\r\n        const pendingDestroy = new Pending(`courseformat/actions:destroyModal`);\r\n        if (element) {\r\n            element.focus();\r\n        }\r\n        setTimeout(() =>{\r\n            modal.destroy();\r\n            pendingDestroy.resolve();\r\n        }, 500);\r\n    }\r\n\r\n    /**\r\n     * Get the closest actions menu toggler to an action element.\r\n     *\r\n     * @param {HTMLElement} element the action link element\r\n     * @returns {HTMLElement|undefined}\r\n     */\r\n    _getClosestActionMenuToogler(element) {\r\n        const actionMenu = element.closest(this.selectors.ACTIONMENU);\r\n        if (!actionMenu) {\r\n            return undefined;\r\n        }\r\n        return actionMenu.querySelector(this.selectors.ACTIONMENUTOGGLER);\r\n    }\r\n}\r\n"],"names":["directMutations","sectionHide","sectionShow","cmHide","cmShow","cmStealth","cmMoveRight","cmMoveLeft","BaseComponent","create","name","selectors","ACTIONLINK","SECTIONLINK","CMLINK","SECTIONNODE","MODALTOGGLER","ADDSECTION","CONTENTTREE","ACTIONMENU","ACTIONMENUTOGGLER","OPTIONSRADIO","classes","DISABLED","ITALIC","actions","action","mutationReference","Object","entries","Error","stateReady","state","addEventListener","this","element","_dispatchClick","_checkSectionlist","CourseEvents","sectionRefreshed","getWatchers","watch","handler","event","target","closest","classList","contains","preventDefault","actionName","dataset","methodName","_actionMethodName","undefined","_requestMutationAction","requestName","charAt","toUpperCase","slice","_setAddSectionLocked","course","sectionlist","length","maxsections","_getTargetIds","ids","_target$dataset","id","push","bulkType","_target$dataset2","bulk","reactive","get","enabled","selectedType","selection","sectionIds","pendingModalReady","Pending","editTools","_getClosestActionMenuToogler","data","getExporter","titleText","sectionInfo","sectionid","sectiontitle","title","information","getFormatString","modalParams","body","Templates","render","modal","_modalBodyRenderedPromise","modalBody","getBody","forEach","sectionId","currentElement","querySelector","_disableLink","ContentTree","SECTION","TOGGLER","COLLAPSE","matches","for","getAttribute","dispatch","_destroyModal","resolve","cmIds","exporter","cmInfo","cmid","cmname","cmId","ENTER","sectionnode","toggler","find","collapsibleId","attr","replace","expandNode","collapse","targetSectionId","targetCmId","dropData","cmDraggableData","nextcmid","section","cmlist","some","hassummary","rawtitle","bodyText","count","type","ModalFactory","types","DELETE_CANCEL","getRoot","on","ModalEvents","delete","e","destroy","mutationName","modname","allowstealth","canUseStealth","saveButtonText","SAVE_CANCEL","_setupMutationRadioButtonModal","setButtonDisabled","submitFunction","radio","mutation","value","querySelectorAll","parentNode","checked","dbClickEvent","save","locked","getElements","toggle","setElementLocked","style","pointerEvents","userSelect","add","setAttribute","Promise","reject","then","setRemoveOnClose","bodyRendered","setSaveButtonText","deleteButtonText","setDeleteButtonText","show","catch","hide","pendingDestroy","focus","setTimeout","actionMenu"],"mappings":";;;;;;;;;;;ujCA0CgB,OAAQ,CAAC,oBAAqB,mBAAoB,UAAW,iBAKvEA,gBAAkB,CACpBC,YAAa,cACbC,YAAa,cACbC,OAAQ,SACRC,OAAQ,SACRC,UAAW,YACXC,YAAa,cACbC,WAAY,qCAGaC,wBAKzBC,cAESC,KAAO,uBAEPC,UAAY,CACbC,2BAEAC,mCACAC,yBACAC,uCACAC,wCACAC,wCACAC,oCACAC,0BACAC,6CAEAC,oCAGCC,QAAU,CACXC,qBACAC,wCASUC,aACT,MAAOC,OAAQC,qBAAsBC,OAAOC,QAAQJ,SAAU,IAC9B,mBAAtBE,mBAAiE,iBAAtBA,wBAC5C,IAAIG,gBAASJ,yDAEvB1B,gBAAgB0B,QAAUC,mBAUlCI,WAAWC,YAEFC,iBACDC,KAAKC,QACL,QACAD,KAAKE,qBAGJC,kBAAkB,CAACL,MAAAA,aAEnBC,iBACDC,KAAKC,QACLG,aAAaC,kBACb,IAAML,KAAKG,kBAAkB,CAACL,MAAAA,UAStCQ,oBACW,CAEH,CAACC,mCAAqCC,QAASR,KAAKG,oBAI5DD,eAAeO,aACLC,OAASD,MAAMC,OAAOC,QAAQX,KAAKvB,UAAUC,gBAC9CgC,iBAGDA,OAAOE,UAAUC,SAASb,KAAKZ,QAAQC,sBACvCoB,MAAMK,uBAKJC,WAAaL,OAAOM,QAAQxB,OAC5ByB,WAAajB,KAAKkB,kBAAkBH,oBAEjBI,IAArBnB,KAAKiB,wBAM2BE,IAAhCrD,gBAAgBiD,YAC2B,mBAAhCjD,gBAAgBiD,iBACvBjD,gBAAgBiD,YAAYL,OAAQD,iBAGnCW,uBAAuBV,OAAQD,MAAO3C,gBAAgBiD,yBAVtDE,YAAYP,OAAQD,OAejCS,kBAAkB1C,YACR6C,YAAc7C,KAAK8C,OAAO,GAAGC,cAAgB/C,KAAKgD,MAAM,2BAC5CH,aAStBlB,4BAAkBL,MAACA,iBAEV2B,qBAAqB3B,MAAM4B,OAAOC,YAAYC,OAAS9B,MAAM4B,OAAOG,aAY7EC,cAAcpB,iDACNqB,IAAM,GACNrB,MAAAA,gCAAAA,OAAQM,oCAARgB,gBAAiBC,IACjBF,IAAIG,KAAKxB,OAAOM,QAAQiB,UAEtBE,SAAWzB,MAAAA,iCAAAA,OAAQM,2CAARoB,iBAAiBC,SAC7BF,gBACMJ,UAELM,KAAOrC,KAAKsC,SAASC,IAAI,eAC3BF,KAAKG,SAAWH,KAAKI,eAAiBN,WACtCJ,IAAM,IAAIA,OAAQM,KAAKK,YAEpBX,8BASerB,OAAQD,aAExBkC,WAAa3C,KAAK8B,cAAcpB,WACb,GAArBiC,WAAWf,cAIfnB,MAAMK,uBAEA8B,kBAAoB,IAAIC,iEAGxBC,UAAY9C,KAAK+C,6BAA6BrC,QAI9CsC,KADWhD,KAAKsC,SAASW,cACTvB,OAAO1B,KAAKsC,SAASxC,WACvCoD,UAAY,KAGZC,YAAc,KACO,GAArBR,WAAWf,QACXuB,YAAcnD,KAAKsC,SAASC,IAAI,UAAWI,WAAW,IACtDK,KAAKI,UAAYD,YAAYlB,GAC7Be,KAAKK,aAAeF,YAAYG,MAChCN,KAAKO,kBAAoBvD,KAAKsC,SAASkB,gBAAgB,mBAAoBR,KAAKK,cAChFH,UAAYlD,KAAKsC,SAASkB,gBAAgB,uBAE1CR,KAAKO,kBAAoBvD,KAAKsC,SAASkB,gBAAgB,oBAAqBb,WAAWf,QACvFsB,UAAYlD,KAAKsC,SAASkB,gBAAgB,6BAKxCC,YAAc,CAChBH,MAAOJ,UACPQ,KAAMC,mBAAUC,OAAO,8CAA+CZ,OAIpEa,YAAc7D,KAAK8D,0BAA0BL,aAE7CM,WAAY,uBAASF,MAAMG,WAGjCrB,WAAWsB,SAAQC,kBACTC,eAAiBJ,UAAUK,wBAAiBpE,KAAKvB,UAAUE,iCAAwBuF,sBACpFG,aAAaF,uBAIlBG,qBACAP,UAAUK,cAAcpE,KAAKvB,UAAUO,aACvC,CACIuF,QAASvE,KAAKvB,UAAUI,YACxB2F,QAASxE,KAAKvB,UAAUK,aACxB2F,SAAUzE,KAAKvB,UAAUK,eAE7B,GAIJiF,UAAUhE,iBAAiB,SAAUU,cAC3BC,OAASD,MAAMC,OAChBA,OAAOgE,QAAQ,MAA8B,WAAtBhE,OAAOM,QAAQ2D,UAA0CxD,IAAtBT,OAAOM,QAAQiB,KAG1EvB,OAAOkE,aAAa,mBAGxBnE,MAAMK,sBACDwB,SAASuC,SAAS,mBAAoBlC,WAAYjC,OAAOM,QAAQiB,SACjE6C,cAAcjB,MAAOf,gBAG9BF,kBAAkBmC,+BASDrE,OAAQD,aAEnBuE,MAAQhF,KAAK8B,cAAcpB,WACb,GAAhBsE,MAAMpD,cAIVnB,MAAMK,uBAEA8B,kBAAoB,IAAIC,4DAGxBC,UAAY9C,KAAK+C,6BAA6BrC,QAG9CuE,SAAWjF,KAAKsC,SAASW,cACzBD,KAAOiC,SAASvD,OAAO1B,KAAKsC,SAASxC,WAEvCoD,UAAY,QACI,GAAhB8B,MAAMpD,OAAa,OACbsD,OAASlF,KAAKsC,SAASC,IAAI,KAAMyC,MAAM,IAC7ChC,KAAKmC,KAAOD,OAAOjD,GACnBe,KAAKoC,OAASF,OAAO1G,KACrBwE,KAAKO,kBAAoBvD,KAAKsC,SAASkB,gBAAgB,cAAeR,KAAKoC,QAC3ElC,UAAYlD,KAAKsC,SAASkB,gBAAgB,qBAE1CR,KAAKO,kBAAoBvD,KAAKsC,SAASkB,gBAAgB,eAAgBwB,MAAMpD,QAC7EsB,UAAYlD,KAAKsC,SAASkB,gBAAgB,uBAIxCC,YAAc,CAChBH,MAAOJ,UACPQ,KAAMC,mBAAUC,OAAO,yCAA0CZ,OAI/Da,YAAc7D,KAAK8D,0BAA0BL,aAE7CM,WAAY,uBAASF,MAAMG,WAGjCgB,MAAMf,SAAQoB,aACJlB,eAAiBJ,UAAUK,wBAAiBpE,KAAKvB,UAAUG,4BAAmByG,iBAC/EhB,aAAaF,uBAIlBG,qBACAP,UAAUK,cAAcpE,KAAKvB,UAAUO,aACvC,CACIuF,QAASvE,KAAKvB,UAAUI,YACxB2F,QAASxE,KAAKvB,UAAUK,aACxB2F,SAAUzE,KAAKvB,UAAUK,aACzBwG,MAAOtF,KAAKvB,UAAUE,cAM9BqG,MAAMf,SAAQoB,+BAEJE,YADiBxB,UAAUK,wBAAiBpE,KAAKvB,UAAUG,4BAAmByG,YACjD1E,QAAQX,KAAKvB,UAAUI,aACpD2G,SAAU,mBAAOD,aAAaE,KAAKzF,KAAKvB,UAAUK,kBACpD4G,oCAAgBF,QAAQxC,KAAK,iDAAawC,QAAQG,KAAK,WACvDD,cAAe,CAEfA,cAAgBA,cAAcE,QAAQ,IAAK,UACrCC,WAAa9B,UAAUK,yBAAkBsB,oCACxCG,YAAYC,SAAS,YAIpC/B,UAAUhE,iBAAiB,SAAUU,cAC3BC,OAASD,MAAMC,WAChBA,OAAOgE,QAAQ,WAA+BvD,IAAvBT,OAAOM,QAAQ2D,UAA2CxD,IAAtBT,OAAOM,QAAQiB,aAG3EvB,OAAOkE,aAAa,4BAKpBmB,gBACAC,cAHJvF,MAAMK,iBAIoB,MAAtBJ,OAAOM,QAAQ2D,IAAa,OACtBsB,SAAWhB,SAASiB,gBAAgBlG,KAAKsC,SAASxC,MAAOY,OAAOM,QAAQiB,IAC9E8D,gBAAkBE,SAAS7C,UAC3B4C,WAAaC,SAASE,aACnB,OACGC,QAAUpG,KAAKsC,SAASC,IAAI,UAAW7B,OAAOM,QAAQiB,IAC5D8D,gBAAkBrF,OAAOM,QAAQiB,GACjC+D,WAAaI,MAAAA,eAAAA,QAASC,OAAO,QAE5B/D,SAASuC,SAAS,SAAUG,MAAOe,gBAAiBC,iBACpDlB,cAAcjB,MAAOf,cAG9BF,kBAAkBmC,mCASGrE,OAAQD,8BAC7BA,MAAMK,sBACDwB,SAASuC,SAAS,wCAAcnE,OAAOM,QAAQiB,oDAAM,+BASlCvB,OAAQD,aAC1BkC,WAAa3C,KAAK8B,cAAcpB,WACb,GAArBiC,WAAWf,iBAIfnB,MAAMK,kBAGkB6B,WAAW2D,MAAKpC,0CAC9Bf,YAAcnD,KAAKsC,SAASC,IAAI,UAAW2B,8CAClCf,YAAYkD,0DAAU,IACtBzE,QAAUuB,YAAYoD,YAAcpD,YAAYqD,6BAG1DlE,SAASuC,SAAS,gBAAiBlC,gBAIxC8D,SAAW,KACXvD,UAAY,QACS,GAArBP,WAAWf,OAAa,CACxBsB,UAAYlD,KAAKsC,SAASkB,gBAAgB,6BACpCL,YAAcnD,KAAKsC,SAASC,IAAI,UAAWI,WAAW,IAC5D8D,SAAWzG,KAAKsC,SAASkB,gBAAgB,qBAAsB,CAAChF,KAAM2E,YAAYG,aAElFJ,UAAYlD,KAAKsC,SAASkB,gBAAgB,wBAC1CiD,SAAWzG,KAAKsC,SAASkB,gBAAgB,sBAAuB,CAACkD,MAAO/D,WAAWf,eAGjF6B,YAAc,CAChBH,MAAOJ,UACPQ,KAAM+C,SACNE,KAAMC,uBAAaC,MAAMC,eAGvBjD,YAAc7D,KAAK8D,0BAA0BL,aAEnDI,MAAMkD,UAAUC,GACZC,sBAAYC,QACZC,IAEIA,EAAErG,iBACF+C,MAAMuD,eACD9E,SAASuC,SAAS,gBAAiBlC,+CAWpBjC,OAAQD,oDACVT,KAAKsC,SAAU5B,OAAQD,MAAO,2CASvBC,OAAQD,oDACfT,KAAKsC,SAAU5B,OAAQD,MAAO,wCAU/BC,OAAQD,MAAO4G,cACnC3G,OAAOM,QAAQiB,KAGpBxB,MAAMK,sBACDwB,SAASuC,SAASwC,aAAc,CAAC3G,OAAOM,QAAQiB,gCAS/BvB,OAAQD,uCACxBuE,MAAQhF,KAAK8B,cAAcpB,WACb,GAAhBsE,MAAMpD,oBAGJsC,wCAAYxD,OAAOM,QAAQoC,iEAAa,KAC9C3C,MAAMK,sBACDwB,SAASuC,SAAS,cAAeG,MAAOd,kCAS1BxD,OAAQD,aACrBuE,MAAQhF,KAAK8B,cAAcpB,WACb,GAAhBsE,MAAMpD,cAIVnB,MAAMK,qBAEF2F,SAAW,KACXvD,UAAY,QACI,GAAhB8B,MAAMpD,OAAa,OACbsD,OAASlF,KAAKsC,SAASC,IAAI,KAAMyC,MAAM,IAC7C9B,WAAY,mBAAU,iBAAkB,qBACxCuD,UAAW,mBACP,gBACA,oBACA,CACIE,KAAMzB,OAAOoC,QACb9I,KAAM0G,OAAO1G,YAIrB0E,WAAY,mBAAU,kBAAmB,qBACzCuD,UAAW,mBACP,iBACA,oBACA,CAACC,MAAO1B,MAAMpD,eAIhB6B,YAAc,CAChBH,MAAOJ,UACPQ,KAAM+C,SACNE,KAAMC,uBAAaC,MAAMC,eAGvBjD,YAAc7D,KAAK8D,0BAA0BL,aAEnDI,MAAMkD,UAAUC,GACZC,sBAAYC,QACZC,IAEIA,EAAErG,iBACF+C,MAAMuD,eACD9E,SAASuC,SAAS,WAAYG,uCAUlBtE,cACnBsE,MAAQhF,KAAK8B,cAAcpB,WACb,GAAhBsE,MAAMpD,oBAKJoB,KAAO,CACTuE,aAFavH,KAAKsC,SAASW,cAEJuE,cAAcxH,KAAKsC,SAASxC,MAAOkF,QAExDvB,YAAc,CAChBH,OAAO,mBAAU,eAAgB,QACjCI,KAAMC,mBAAUC,OAAO,uDAAwDZ,MAC/EyE,gBAAgB,mBAAU,QAAS,QACnCd,KAAMC,uBAAaC,MAAMa,aAEvB7D,YAAc7D,KAAK8D,0BAA0BL,kBAE9CkE,+BAA+B9D,MAAOmB,yCAQbtE,cACxBiC,WAAa3C,KAAK8B,cAAcpB,WACb,GAArBiC,WAAWf,oBAGT0B,MAA8B,GAArBX,WAAWf,OAAe,4BAA8B,6BAEjE6B,YAAc,CAChBH,MAAOtD,KAAKsC,SAASkB,gBAAgBF,OACrCI,KAAMC,mBAAUC,OAAO,4DAA6D,IACpF6D,gBAAgB,mBAAU,QAAS,QACnCd,KAAMC,uBAAaC,MAAMa,aAEvB7D,YAAc7D,KAAK8D,0BAA0BL,kBAE9CkE,+BAA+B9D,MAAOlB,YAQ/CgF,+BAA+B9D,MAAO9B,KAElC8B,MAAM+D,kBAAkB,QAAQ,SAE1BC,eAAkBC,cACdC,SAAWD,MAAAA,aAAAA,MAAOE,cACnBD,gBAGAzF,SAASuC,SAASkD,SAAUhG,MAC1B,IAGLgC,WAAY,uBAASF,MAAMG,WACZD,UAAUkE,iBAAiBjI,KAAKvB,UAAUU,cAClD8E,SAAQ6D,QACjBA,MAAM/H,iBAAiB,UAAU,KAC7B8D,MAAM+D,kBAAkB,QAAQ,MAEpCE,MAAMI,WAAWnI,iBAAiB,SAAS,KACvC+H,MAAMK,SAAU,EAChBtE,MAAM+D,kBAAkB,QAAQ,MAEpCE,MAAMI,WAAWnI,iBAAiB,YAAYqI,eACtCP,eAAeC,SACfM,aAAatH,iBACb+C,MAAMuD,iBAKlBvD,MAAMkD,UAAUC,GACZC,sBAAYoB,MACZ,WACUP,MAAQ/D,UAAUK,wBAAiBpE,KAAKvB,UAAUU,0BACxD0I,eAAeC,UAU3BrG,qBAAqB6G,QACDtI,KAAKuI,YAAYvI,KAAKvB,UAAUM,YACxCkF,SAAQhE,UACZA,QAAQW,UAAU4H,OAAOxI,KAAKZ,QAAQC,SAAUiJ,QAChDrI,QAAQW,UAAU4H,OAAOxI,KAAKZ,QAAQE,OAAQgJ,aACzCG,iBAAiBxI,QAASqI,WASvCjE,aAAapE,SACLA,UACAA,QAAQyI,MAAMC,cAAgB,OAC9B1I,QAAQyI,MAAME,WAAa,OAC3B3I,QAAQW,UAAUiI,IAAI7I,KAAKZ,QAAQC,UACnCY,QAAQW,UAAUiI,IAAI7I,KAAKZ,QAAQE,QACnCW,QAAQ6I,aAAa,iBAAiB,GACtC7I,QAAQF,iBAAiB,SAASU,OAASA,MAAMK,oBAUzDgD,0BAA0BL,oBACf,IAAIsF,SAAQ,CAAChE,QAASiE,iCACZzK,OAAOkF,aAAawF,MAAMpF,QACnCA,MAAMqF,kBAAiB,GAEvBrF,MAAMkD,UAAUC,GAAGC,sBAAYkC,cAAc,KACzCpE,QAAQlB,eAGuB1C,IAA/BsC,YAAYgE,gBACZ5D,MAAMuF,kBAAkB3F,YAAYgE,qBAEHtG,IAAjCsC,YAAY4F,kBACZxF,MAAMyF,oBAAoB7F,YAAYgE,gBAE1C5D,MAAM0F,UAEPC,OAAM,KACLR,0CAaZlE,cAAcjB,MAAO5D,SACjB4D,MAAM4F,aACAC,eAAiB,IAAI7G,sDACvB5C,SACAA,QAAQ0J,QAEZC,YAAW,KACP/F,MAAMuD,UACNsC,eAAe3E,YAChB,KASPhC,6BAA6B9C,eACnB4J,WAAa5J,QAAQU,QAAQX,KAAKvB,UAAUQ,eAC7C4K,kBAGEA,WAAWzF,cAAcpE,KAAKvB,UAAUS"}