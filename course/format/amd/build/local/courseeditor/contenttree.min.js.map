{"version":3,"file":"contenttree.min.js","sources":["../../../src/local/courseeditor/contenttree.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index keyboard navigation and aria-tree compatibility.\r\n *\r\n * Node tree and bootstrap collapsibles don't use the same HTML structure. However,\r\n * all keybindings and logic is compatible. This class translate the primitive opetations\r\n * to a bootstrap collapsible structure.\r\n *\r\n * @module     core_courseformat/local/courseeditor/contenttree\r\n * @class      core_courseformat/local/courseeditor/contenttree\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n// The core/tree uses jQuery to expand all nodes.\r\nimport jQuery from 'jquery';\r\nimport Tree from 'core/tree';\r\nimport {getList} from 'core/normalise';\r\n\r\nexport default class extends Tree {\r\n\r\n    /**\r\n     * Setup the core/tree keyboard navigation.\r\n     *\r\n     * @param {Element|undefined} mainElement an alternative main element in case it is not from the parent component\r\n     * @param {Object|undefined} selectors alternative selectors\r\n     * @param {boolean} preventcache if the elements cache must be disabled.\r\n     */\r\n    constructor(mainElement, selectors, preventcache) {\r\n        // Init this value with the parent DOM element.\r\n        super(mainElement);\r\n\r\n        // Get selectors from parent.\r\n        this.selectors = {\r\n            SECTION: selectors.SECTION,\r\n            TOGGLER: selectors.TOGGLER,\r\n            COLLAPSE: selectors.COLLAPSE,\r\n            ENTER: selectors.ENTER ?? selectors.TOGGLER,\r\n        };\r\n\r\n        // The core/tree library saves the visible elements cache inside the main tree node.\r\n        // However, in edit mode content can change suddenly so we need to refresh caches when needed.\r\n        if (preventcache) {\r\n            this._getVisibleItems = this.getVisibleItems;\r\n            this.getVisibleItems = () => {\r\n                this.refreshVisibleItemsCache();\r\n                return this._getVisibleItems();\r\n            };\r\n        }\r\n        // All jQuery events can be replaced when MDL-71979 is integrated.\r\n        this.treeRoot.on('hidden.bs.collapse shown.bs.collapse', () => {\r\n            this.refreshVisibleItemsCache();\r\n        });\r\n        // Register a custom callback for pressing enter key.\r\n        this.registerEnterCallback(this.enterCallback.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Return the current active node.\r\n     *\r\n     * @return {Element|undefined} the active item if any\r\n     */\r\n    getActiveItem() {\r\n        const activeItem = this.treeRoot.data('activeItem');\r\n        if (activeItem) {\r\n            return getList(activeItem)[0];\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Handle enter key on a collpasible node.\r\n     *\r\n     * @param {JQuery} jQueryItem the jQuery object\r\n     */\r\n    enterCallback(jQueryItem) {\r\n        const item = getList(jQueryItem)[0];\r\n        if (this.isGroupItem(jQueryItem)) {\r\n            // Group elements is like clicking a topic but without loosing the focus.\r\n            const enter = item.querySelector(this.selectors.ENTER);\r\n            if (enter.getAttribute('href') !== '#') {\r\n                window.location.href = enter.getAttribute('href');\r\n            }\r\n            enter.click();\r\n        } else {\r\n            // Activity links just follow the link href.\r\n            const link = item.querySelector('a');\r\n            if (link.getAttribute('href') !== '#') {\r\n                window.location.href = link.getAttribute('href');\r\n            } else {\r\n                link.click();\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle an item click.\r\n     *\r\n     * @param {Event} event the click event\r\n     * @param {jQuery} jQueryItem the item clicked\r\n     */\r\n    handleItemClick(event, jQueryItem) {\r\n        const isChevron = event.target.closest(this.selectors.COLLAPSE);\r\n        // Only chevron clicks toogle the sections always.\r\n        if (isChevron) {\r\n            super.handleItemClick(event, jQueryItem);\r\n            return;\r\n        }\r\n        // This is a title or activity name click.\r\n        jQueryItem.focus();\r\n        if (this.isGroupItem(jQueryItem)) {\r\n            this.expandGroup(jQueryItem);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a gorup item is collapsed.\r\n     *\r\n     * @param {JQuery} jQueryItem  the jQuery object\r\n     * @returns {boolean} if the element is collapsed\r\n     */\r\n    isGroupCollapsed(jQueryItem) {\r\n        const item = getList(jQueryItem)[0];\r\n        const toggler = item.querySelector(`[aria-expanded]`);\r\n        return toggler.getAttribute('aria-expanded') === 'false';\r\n    }\r\n\r\n    /**\r\n     * Toggle a group item.\r\n     *\r\n     * @param {JQuery} item  the jQuery object\r\n     */\r\n    toggleGroup(item) {\r\n        // All jQuery in this segment of code can be replaced when MDL-71979 is integrated.\r\n        const toggler = item.find(this.selectors.COLLAPSE);\r\n        let collapsibleId = toggler.data('target') ?? toggler.attr('href');\r\n        if (!collapsibleId) {\r\n            return;\r\n        }\r\n        collapsibleId = collapsibleId.replace('#', '');\r\n\r\n        // Bootstrap 4 uses jQuery to interact with collapsibles.\r\n        const collapsible = jQuery(`#${collapsibleId}`);\r\n        if (collapsible.length) {\r\n            jQuery(`#${collapsibleId}`).collapse('toggle');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Expand a group item.\r\n     *\r\n     * @param {JQuery} item  the jQuery object\r\n     */\r\n    expandGroup(item) {\r\n        if (this.isGroupCollapsed(item)) {\r\n            this.toggleGroup(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collpase a group item.\r\n     *\r\n     * @param {JQuery} item  the jQuery object\r\n     */\r\n    collapseGroup(item) {\r\n        if (!this.isGroupCollapsed(item)) {\r\n            this.toggleGroup(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Expand all groups.\r\n     */\r\n    expandAllGroups() {\r\n        const togglers = getList(this.treeRoot)[0].querySelectorAll(this.selectors.SECTION);\r\n        togglers.forEach(item => {\r\n            this.expandGroup(jQuery(item));\r\n        });\r\n    }\r\n}\r\n"],"names":["Tree","constructor","mainElement","selectors","preventcache","SECTION","TOGGLER","COLLAPSE","ENTER","_getVisibleItems","this","getVisibleItems","refreshVisibleItemsCache","treeRoot","on","registerEnterCallback","enterCallback","bind","getActiveItem","activeItem","data","jQueryItem","item","isGroupItem","enter","querySelector","getAttribute","window","location","href","click","link","handleItemClick","event","target","closest","focus","expandGroup","isGroupCollapsed","toggleGroup","toggler","find","collapsibleId","attr","replace","length","collapse","collapseGroup","expandAllGroups","querySelectorAll","forEach"],"mappings":";;;;;;;;;;;;wLAiC6BA,cASzBC,YAAYC,YAAaC,UAAWC,yCAE1BF,kBAGDC,UAAY,CACbE,QAASF,UAAUE,QACnBC,QAASH,UAAUG,QACnBC,SAAUJ,UAAUI,SACpBC,+BAAOL,UAAUK,mDAASL,UAAUG,SAKpCF,oBACKK,iBAAmBC,KAAKC,qBACxBA,gBAAkB,UACdC,2BACEF,KAAKD,0BAIfI,SAASC,GAAG,wCAAwC,UAChDF,mCAGJG,sBAAsBL,KAAKM,cAAcC,KAAKP,OAQvDQ,sBACUC,WAAaT,KAAKG,SAASO,KAAK,iBAClCD,kBACO,sBAAQA,YAAY,GAUnCH,cAAcK,kBACJC,MAAO,sBAAQD,YAAY,MAC7BX,KAAKa,YAAYF,YAAa,OAExBG,MAAQF,KAAKG,cAAcf,KAAKP,UAAUK,OACb,MAA/BgB,MAAME,aAAa,UACnBC,OAAOC,SAASC,KAAOL,MAAME,aAAa,SAE9CF,MAAMM,mBAGAC,KAAOT,KAAKG,cAAc,KACE,MAA9BM,KAAKL,aAAa,QAClBC,OAAOC,SAASC,KAAOE,KAAKL,aAAa,QAEzCK,KAAKD,SAYjBE,gBAAgBC,MAAOZ,YACDY,MAAMC,OAAOC,QAAQzB,KAAKP,UAAUI,gBAG5CyB,gBAAgBC,MAAOZ,aAIjCA,WAAWe,QACP1B,KAAKa,YAAYF,kBACZgB,YAAYhB,aAUzBiB,iBAAiBjB,kBAGoC,WAFpC,sBAAQA,YAAY,GACZI,iCACNC,aAAa,iBAQhCa,YAAYjB,8BAEFkB,QAAUlB,KAAKmB,KAAK/B,KAAKP,UAAUI,cACrCmC,oCAAgBF,QAAQpB,KAAK,iDAAaoB,QAAQG,KAAK,YACtDD,qBAGLA,cAAgBA,cAAcE,QAAQ,IAAK,KAGvB,8BAAWF,gBACfG,uCACDH,gBAAiBI,SAAS,UAS7CT,YAAYf,MACJZ,KAAK4B,iBAAiBhB,YACjBiB,YAAYjB,MASzByB,cAAczB,MACLZ,KAAK4B,iBAAiBhB,YAClBiB,YAAYjB,MAOzB0B,mBACqB,sBAAQtC,KAAKG,UAAU,GAAGoC,iBAAiBvC,KAAKP,UAAUE,SAClE6C,SAAQ5B,YACRe,aAAY,mBAAOf"}